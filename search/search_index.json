{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Tactical RMM Documentation \u00b6 Tactical RMM is a remote monitoring & management tool built with Django, Vue and Golang. It uses an agent written in Golang and integrates with MeshCentral . LIVE DEMO \u00b6 Features \u00b6 TeamViewer-like remote desktop control Real-time remote shell Remote file browser (download and upload files) Remote command and script execution (bash, batch, powershell, python, nushell and deno scripts) Event log viewer Services management Windows patch management Automated checks with email/SMS/Webhooks alerting (cpu, disk, memory, services, scripts, event logs) Automated task runner (run scripts on a schedule) Remote software installation via chocolatey Software and hardware inventory Sponsorship Features \u00b6 Mac and Linux Agents Windows Code Signed Agents Fully Customizable Reporting Module Single Sign-On (SSO) Windows agent versions supported \u00b6 Windows 7, 8.1, 10, 11 Server 2008 R2, 2012 R2, 2016, 2019, 2022, 2025 Linux agent versions supported \u00b6 Any distro with systemd which includes but is not limited to: Debian (10, 11), Ubuntu x86_64 (18.04, 20.04, 22.04), Synology 7, CentOS, FreePBX, Raspberry Pi with raspbian and more! Check to see if you're running systemd with ps --no-headers -o comm 1 Mac agent versions supported \u00b6 64 bit Intel and Apple Silicon (M-Series Processors) Discuss/Collaborate and Get Help/Support \u00b6 Join us on Discord for (help/tips/discussion/dev chat/social etc). This is the primary method of discussing all things Tactical RMM. Github Discussions : is a distant 2nd option, we will frequently request you join Discord if you're requesting help or troubleshooting issues with your installation. Github Issues : Report bugs you discover with clear write-ups on how to reproduce problems. Also submit enhancement/feature requests here. View useful scripts to be used in Tactical RMM. Check out Awesome additions from the community. Github Repos \u00b6 Main Code Repo: https://github.com/amidaware/tacticalrmm Main Web admin frontend: https://github.com/amidaware/tacticalrmm-web Tactical Agent Source: https://github.com/amidaware/rmmagent Community Scripts: https://github.com/amidaware/community-scripts https://docs.tacticalrmm.com source: https://github.com/amidaware/trmm-docs Awesome contributions from the community: https://github.com/amidaware/trmm-awesome","title":"Home"},{"location":"#tactical-rmm-documentation","text":"Tactical RMM is a remote monitoring & management tool built with Django, Vue and Golang. It uses an agent written in Golang and integrates with MeshCentral .","title":"Tactical RMM Documentation"},{"location":"#live-demo","text":"","title":"LIVE DEMO"},{"location":"#features","text":"TeamViewer-like remote desktop control Real-time remote shell Remote file browser (download and upload files) Remote command and script execution (bash, batch, powershell, python, nushell and deno scripts) Event log viewer Services management Windows patch management Automated checks with email/SMS/Webhooks alerting (cpu, disk, memory, services, scripts, event logs) Automated task runner (run scripts on a schedule) Remote software installation via chocolatey Software and hardware inventory","title":"Features"},{"location":"#sponsorship-features","text":"Mac and Linux Agents Windows Code Signed Agents Fully Customizable Reporting Module Single Sign-On (SSO)","title":"Sponsorship Features"},{"location":"#windows-agent-versions-supported","text":"Windows 7, 8.1, 10, 11 Server 2008 R2, 2012 R2, 2016, 2019, 2022, 2025","title":"Windows agent versions supported"},{"location":"#linux-agent-versions-supported","text":"Any distro with systemd which includes but is not limited to: Debian (10, 11), Ubuntu x86_64 (18.04, 20.04, 22.04), Synology 7, CentOS, FreePBX, Raspberry Pi with raspbian and more! Check to see if you're running systemd with ps --no-headers -o comm 1","title":"Linux agent versions supported"},{"location":"#mac-agent-versions-supported","text":"64 bit Intel and Apple Silicon (M-Series Processors)","title":"Mac agent versions supported"},{"location":"#discusscollaborate-and-get-helpsupport","text":"Join us on Discord for (help/tips/discussion/dev chat/social etc). This is the primary method of discussing all things Tactical RMM. Github Discussions : is a distant 2nd option, we will frequently request you join Discord if you're requesting help or troubleshooting issues with your installation. Github Issues : Report bugs you discover with clear write-ups on how to reproduce problems. Also submit enhancement/feature requests here. View useful scripts to be used in Tactical RMM. Check out Awesome additions from the community.","title":"Discuss/Collaborate and Get Help/Support"},{"location":"#github-repos","text":"Main Code Repo: https://github.com/amidaware/tacticalrmm Main Web admin frontend: https://github.com/amidaware/tacticalrmm-web Tactical Agent Source: https://github.com/amidaware/rmmagent Community Scripts: https://github.com/amidaware/community-scripts https://docs.tacticalrmm.com source: https://github.com/amidaware/trmm-docs Awesome contributions from the community: https://github.com/amidaware/trmm-awesome","title":"Github Repos"},{"location":"3rdparty_anydesk/","text":"AnyDesk \u00b6 AnyDesk Integration \u00b6 Info You can set up a full automation policy to collect the machine GUID, but this example will collect from just one agent for testing purposes. Create Custom Field \u00b6 From the UI go to Settings > Global Settings > CUSTOM FIELDS > Agents . Add Custom Field: Target = Agent Name = AnyNetID Field Type = Text Create URL Action \u00b6 While in Global Settings go to URL ACTIONS . Add a URL Action: Name = AnyDesk Control Description = Connect to a AnyDesk Session URL Pattern = anydesk:{{agent.AnyNetID}} Create AnyDesk Collector \u00b6 This populates the Custom field with the Anydesk ID. Navigate to an agent with AnyDesk running (or apply using Settings > Automation Manager ). Go to Tasks. Add Task: Select Script = AnyDesk - Get AnyNetID for client (this is a builtin script from script library) Descriptive name of task = Collects the AnyNetID for AnyDesk. Collector Task = CHECKED Custom Field to update = AnyNetID Click Next Check One Time , choose a time in the past so it'll run once on the agent. Click Add Task Right click on the newly created task and click Run Task Now . Give it a second to execute, then right click the agent that you are working with and go to Run URL Action > AnyDesk Control . It should launch the session in AnyDesk. Note You have to have AnyDesk installed on the local computer.","title":"AnyDesk"},{"location":"3rdparty_anydesk/#anydesk","text":"","title":"AnyDesk"},{"location":"3rdparty_anydesk/#anydesk-integration","text":"Info You can set up a full automation policy to collect the machine GUID, but this example will collect from just one agent for testing purposes.","title":"AnyDesk Integration"},{"location":"3rdparty_anydesk/#create-custom-field","text":"From the UI go to Settings > Global Settings > CUSTOM FIELDS > Agents . Add Custom Field: Target = Agent Name = AnyNetID Field Type = Text","title":"Create Custom Field"},{"location":"3rdparty_anydesk/#create-url-action","text":"While in Global Settings go to URL ACTIONS . Add a URL Action: Name = AnyDesk Control Description = Connect to a AnyDesk Session URL Pattern = anydesk:{{agent.AnyNetID}}","title":"Create URL Action"},{"location":"3rdparty_anydesk/#create-anydesk-collector","text":"This populates the Custom field with the Anydesk ID. Navigate to an agent with AnyDesk running (or apply using Settings > Automation Manager ). Go to Tasks. Add Task: Select Script = AnyDesk - Get AnyNetID for client (this is a builtin script from script library) Descriptive name of task = Collects the AnyNetID for AnyDesk. Collector Task = CHECKED Custom Field to update = AnyNetID Click Next Check One Time , choose a time in the past so it'll run once on the agent. Click Add Task Right click on the newly created task and click Run Task Now . Give it a second to execute, then right click the agent that you are working with and go to Run URL Action > AnyDesk Control . It should launch the session in AnyDesk. Note You have to have AnyDesk installed on the local computer.","title":"Create AnyDesk Collector"},{"location":"3rdparty_bitdefender_gravityzone/","text":"BitDefender GravityZone Deployment \u00b6 How to Deploy BitDefender GravityZone \u00b6 From the UI go to Settings > Global Settings > CUSTOM FIELDS > Clients . Add a Custom Field: First: Target = CLIENTS Name = bdurl Field Type = Text Log into your GravityZone and on the left hand side, select Network > Packages . Select the client you are working with and click \"Send Download Links\" at the top. Copy the appropriate download link. Paste download link into the bdurl when you right click your target clients name in the RMM. Right-click the Agent you want to deploy to and Run Script . Select BitDefender GravityZone Install and set timeout for 1800 seconds. Install time will vary based on internet speed and other AV removal by BitDefender BEST deployment How to onboard a new company \u00b6 Use these procedures to onboard a new company in Bitdefender. Go to Companies > Add Company and fill out the details. The company type is \"Customer\". Fill out the next tab for the authentication. Fill out the last tab for the licensing. You probably want to use Monthly Subscription so that it's added to your monthly MSP subscription. Next go to Network > Packages > Add to add a new package download for the company. Each company should have a separate download. Select the company > Send download links. The Windows link is needed for the TRMM script to install Bitdefender. The Linux and Mac installer links are also provided but the script is for Windows only. Alert types \u00b6 There are two general types of alerts: email and dashboard. While you may get both types of alerts for an incident, they are not the same and configuring the exclusions are not the same. This section explains both types and how to add the exclusions for each. Process alert \u00b6 Bitdefender docs: notification settings This is a process alert that is emailed and as the name suggests, it kills the process. If the parent process is C:\\Windows\\System32\\services.exe , the process is a service that just died. The detection type, ATC/IDS, indicates the exclusion will need to include the ATC/IDS module. Detected Exploit A harmful process has been detected by Behavior Scan on the following endpoint in your network: Detected Exploit Details Company: ACME Company, Inc. Computer Name: PC-Desktop01 Computer IP: 192.168.1.69 Installed Agent: Bitdefender Endpoint Security Tools Command Line: C:\\Program Files\\TacticalAgent\\tacticalrmm.exe -m svc Parent Process Path: C:\\Windows\\System32\\services.exe Parent PID: 852 Exploit Type: ATC Application Exploit Path: C:\\Program Files\\TacticalAgent\\tacticalrmm.exe Exploit Status: ATC/IDS Disinfected Last Blocked: 08 December 2022 08:55:59 Logged User: SYSTEM Process notifications are configured in Notifications > Settings > ATC/IDS event. Quarantine alert \u00b6 Bitdefender docs: quarantine When a file is detected, it is quarantined by moving it to an encrypted folder on the endpoint. Email notifications cannot be configured for quarantined files, although they are available via the API . The threat name, Atc4.Detection, indicates the exclusion needs to include the ATC/IDS module. Troubleshooting and problem resolution \u00b6 MeshAgent.exe quarantine corrupts Mesh Agent service \u00b6 When Bitdefender quarantines MeshAgent.exe, the service is corrupted. Here is what the service looks like before the quarantine. [PC-Desktop3]: PS C:\\> Get-CimInstance Win32_Service -Filter 'Name = \"Mesh Agent\"' | Format-List * Name : Mesh Agent Status : OK ExitCode : 0 DesktopInteract : True ErrorControl : Ignore PathName : \"C:\\Program Files\\Mesh Agent\\MeshAgent.exe\" ServiceType : Own Process StartMode : Auto Caption : Mesh Agent Description : Mesh Agent background service InstallDate : CreationClassName : Win32_Service Started : True SystemCreationClassName : Win32_ComputerSystem SystemName : PC-Desktop3 AcceptPause : False AcceptStop : True DisplayName : Mesh Agent ServiceSpecificExitCode : 0 StartName : LocalSystem State : Running TagId : 0 CheckPoint : 0 DelayedAutoStart : False ProcessId : 7612 WaitHint : 0 PSComputerName : CimClass : root/cimv2:Win32_Service CimInstanceProperties : {Caption, Description, InstallDate, Name...} CimSystemProperties : Microsoft.Management.Infrastructure.CimSystemProperties This is what the service looks like after MeshAgent.exe is quarantined. Notice the PathName , ServiceType , StartMode are \"Unknown\", and some properties are blank. [PC-Desktop3]: PS C:\\> Get-CimInstance Win32_Service -Filter 'Name = \"Mesh Agent\"' | Format-List * Name : Mesh Agent Status : OK ExitCode : 1067 DesktopInteract : ErrorControl : Unknown PathName : ServiceType : Unknown StartMode : Unknown Caption : Mesh Agent Description : InstallDate : CreationClassName : Win32_Service Started : False SystemCreationClassName : Win32_ComputerSystem SystemName : PC-Desktop3 AcceptPause : False AcceptStop : False DisplayName : Mesh Agent ServiceSpecificExitCode : 0 StartName : State : Stopped TagId : CheckPoint : 0 DelayedAutoStart : ProcessId : 0 WaitHint : 0 PSComputerName : CimClass : root/cimv2:Win32_Service CimInstanceProperties : {Caption, Description, InstallDate, Name...} CimSystemProperties : Microsoft.Management.Infrastructure.CimSystemProperties Restoring MeshAgent.exe from quarantine will make it \"look\" normal but will not have any permissions. Renaming, deleting or moving the file results in a permission denied error. After a reboot, the MeshAgent.exe will be missing. [PC-Desktop3]: PS C:\\Program Files\\Mesh Agent> Rename-Item -Path .\\MeshAgent.exe -NewName .\\MeshAgent-Restored.exe Rename-Item : Access to the path is denied. + CategoryInfo : PermissionDenied: (C:\\Program File...t\\MeshAgent.exe:String) [Rename-Item], Unauthorized AccessException + FullyQualifiedErrorId : RenameItemUnauthorizedAccessError,Microsoft.PowerShell.Commands.RenameItemCommand The best path for recovery is to leave the file in quarantine and run the Win_TRMM_Mesh_Install.ps1 script to have Tactical RMM install the Mesh Agent. The existing config will be used and there will not be duplicates.","title":"BitDefender GravityZone"},{"location":"3rdparty_bitdefender_gravityzone/#bitdefender-gravityzone-deployment","text":"","title":"BitDefender GravityZone Deployment"},{"location":"3rdparty_bitdefender_gravityzone/#how-to-deploy-bitdefender-gravityzone","text":"From the UI go to Settings > Global Settings > CUSTOM FIELDS > Clients . Add a Custom Field: First: Target = CLIENTS Name = bdurl Field Type = Text Log into your GravityZone and on the left hand side, select Network > Packages . Select the client you are working with and click \"Send Download Links\" at the top. Copy the appropriate download link. Paste download link into the bdurl when you right click your target clients name in the RMM. Right-click the Agent you want to deploy to and Run Script . Select BitDefender GravityZone Install and set timeout for 1800 seconds. Install time will vary based on internet speed and other AV removal by BitDefender BEST deployment","title":"How to Deploy BitDefender GravityZone"},{"location":"3rdparty_bitdefender_gravityzone/#how-to-onboard-a-new-company","text":"Use these procedures to onboard a new company in Bitdefender. Go to Companies > Add Company and fill out the details. The company type is \"Customer\". Fill out the next tab for the authentication. Fill out the last tab for the licensing. You probably want to use Monthly Subscription so that it's added to your monthly MSP subscription. Next go to Network > Packages > Add to add a new package download for the company. Each company should have a separate download. Select the company > Send download links. The Windows link is needed for the TRMM script to install Bitdefender. The Linux and Mac installer links are also provided but the script is for Windows only.","title":"How to onboard a new company"},{"location":"3rdparty_bitdefender_gravityzone/#alert-types","text":"There are two general types of alerts: email and dashboard. While you may get both types of alerts for an incident, they are not the same and configuring the exclusions are not the same. This section explains both types and how to add the exclusions for each.","title":"Alert types"},{"location":"3rdparty_bitdefender_gravityzone/#process-alert","text":"Bitdefender docs: notification settings This is a process alert that is emailed and as the name suggests, it kills the process. If the parent process is C:\\Windows\\System32\\services.exe , the process is a service that just died. The detection type, ATC/IDS, indicates the exclusion will need to include the ATC/IDS module. Detected Exploit A harmful process has been detected by Behavior Scan on the following endpoint in your network: Detected Exploit Details Company: ACME Company, Inc. Computer Name: PC-Desktop01 Computer IP: 192.168.1.69 Installed Agent: Bitdefender Endpoint Security Tools Command Line: C:\\Program Files\\TacticalAgent\\tacticalrmm.exe -m svc Parent Process Path: C:\\Windows\\System32\\services.exe Parent PID: 852 Exploit Type: ATC Application Exploit Path: C:\\Program Files\\TacticalAgent\\tacticalrmm.exe Exploit Status: ATC/IDS Disinfected Last Blocked: 08 December 2022 08:55:59 Logged User: SYSTEM Process notifications are configured in Notifications > Settings > ATC/IDS event.","title":"Process alert"},{"location":"3rdparty_bitdefender_gravityzone/#quarantine-alert","text":"Bitdefender docs: quarantine When a file is detected, it is quarantined by moving it to an encrypted folder on the endpoint. Email notifications cannot be configured for quarantined files, although they are available via the API . The threat name, Atc4.Detection, indicates the exclusion needs to include the ATC/IDS module.","title":"Quarantine alert"},{"location":"3rdparty_bitdefender_gravityzone/#troubleshooting-and-problem-resolution","text":"","title":"Troubleshooting and problem resolution"},{"location":"3rdparty_bitdefender_gravityzone/#meshagentexe-quarantine-corrupts-mesh-agent-service","text":"When Bitdefender quarantines MeshAgent.exe, the service is corrupted. Here is what the service looks like before the quarantine. [PC-Desktop3]: PS C:\\> Get-CimInstance Win32_Service -Filter 'Name = \"Mesh Agent\"' | Format-List * Name : Mesh Agent Status : OK ExitCode : 0 DesktopInteract : True ErrorControl : Ignore PathName : \"C:\\Program Files\\Mesh Agent\\MeshAgent.exe\" ServiceType : Own Process StartMode : Auto Caption : Mesh Agent Description : Mesh Agent background service InstallDate : CreationClassName : Win32_Service Started : True SystemCreationClassName : Win32_ComputerSystem SystemName : PC-Desktop3 AcceptPause : False AcceptStop : True DisplayName : Mesh Agent ServiceSpecificExitCode : 0 StartName : LocalSystem State : Running TagId : 0 CheckPoint : 0 DelayedAutoStart : False ProcessId : 7612 WaitHint : 0 PSComputerName : CimClass : root/cimv2:Win32_Service CimInstanceProperties : {Caption, Description, InstallDate, Name...} CimSystemProperties : Microsoft.Management.Infrastructure.CimSystemProperties This is what the service looks like after MeshAgent.exe is quarantined. Notice the PathName , ServiceType , StartMode are \"Unknown\", and some properties are blank. [PC-Desktop3]: PS C:\\> Get-CimInstance Win32_Service -Filter 'Name = \"Mesh Agent\"' | Format-List * Name : Mesh Agent Status : OK ExitCode : 1067 DesktopInteract : ErrorControl : Unknown PathName : ServiceType : Unknown StartMode : Unknown Caption : Mesh Agent Description : InstallDate : CreationClassName : Win32_Service Started : False SystemCreationClassName : Win32_ComputerSystem SystemName : PC-Desktop3 AcceptPause : False AcceptStop : False DisplayName : Mesh Agent ServiceSpecificExitCode : 0 StartName : State : Stopped TagId : CheckPoint : 0 DelayedAutoStart : ProcessId : 0 WaitHint : 0 PSComputerName : CimClass : root/cimv2:Win32_Service CimInstanceProperties : {Caption, Description, InstallDate, Name...} CimSystemProperties : Microsoft.Management.Infrastructure.CimSystemProperties Restoring MeshAgent.exe from quarantine will make it \"look\" normal but will not have any permissions. Renaming, deleting or moving the file results in a permission denied error. After a reboot, the MeshAgent.exe will be missing. [PC-Desktop3]: PS C:\\Program Files\\Mesh Agent> Rename-Item -Path .\\MeshAgent.exe -NewName .\\MeshAgent-Restored.exe Rename-Item : Access to the path is denied. + CategoryInfo : PermissionDenied: (C:\\Program File...t\\MeshAgent.exe:String) [Rename-Item], Unauthorized AccessException + FullyQualifiedErrorId : RenameItemUnauthorizedAccessError,Microsoft.PowerShell.Commands.RenameItemCommand The best path for recovery is to leave the file in quarantine and run the Win_TRMM_Mesh_Install.ps1 script to have Tactical RMM install the Mesh Agent. The existing config will be used and there will not be duplicates.","title":"MeshAgent.exe quarantine corrupts Mesh Agent service"},{"location":"3rdparty_bitdefender_total_security/","text":"BitDefender Total Security \u00b6 Exceptions \u00b6 Open the app and select the Protection tab on the left. Open Antivirus, Advanced Threat Defense, or Online Threat Protection. It doesn't matter which, simply select the Settings tab in any of them and click Manage exceptions. Click the Add an Exception button. You'll be greeted with this panel: The buttons become available depending on what you enter for the path / URL. Antivirus allows folders and files. Online Threat Prevention allows URLS, files, folders, and *. Advanced Threat Defense allows only individual files. BitDefender does not allow right click interactions in the entry field, so copy and paste using ctrl-c and ctrl-v if you want to do so. Enter: C:\\Program Files\\Mesh Agent\\MeshAgent.exe And toggle the buttons for Advanced Threat Defense, Online Threat Prevention, and Antivirus. Under Antivirus, options for On-access scan, On-demand scan, and Embedded scripts appear. Select them all. Repeat this process for: C:\\Program Files\\TacticalAgent\\meshagent.exe C:\\Program Files\\TacticalAgent\\tacticalrmm.exe C:\\Program Files\\TacticalAgent\\unins000.exe Next, add an exception for: C:\\ProgramData\\TacticalRMM Select all available options. For the sake of caution, add the following and select the Online Threat Prevention option: C:\\Program Files\\Mesh Agent\\* C:\\Program Files\\TacticalAgent\\* C:\\ProgramData\\TacticalRMM\\* Add exceptions for your T-RMM URLs as well. That should be all that's needed, unless BitDefender complains about the T-RMM agent installation file, in which case you'll need to add an exception for it as well, selecting all available options, then re-download it and save it in the same location to be safe.","title":"BitDefender Total Security"},{"location":"3rdparty_bitdefender_total_security/#bitdefender-total-security","text":"","title":"BitDefender Total Security"},{"location":"3rdparty_bitdefender_total_security/#exceptions","text":"Open the app and select the Protection tab on the left. Open Antivirus, Advanced Threat Defense, or Online Threat Protection. It doesn't matter which, simply select the Settings tab in any of them and click Manage exceptions. Click the Add an Exception button. You'll be greeted with this panel: The buttons become available depending on what you enter for the path / URL. Antivirus allows folders and files. Online Threat Prevention allows URLS, files, folders, and *. Advanced Threat Defense allows only individual files. BitDefender does not allow right click interactions in the entry field, so copy and paste using ctrl-c and ctrl-v if you want to do so. Enter: C:\\Program Files\\Mesh Agent\\MeshAgent.exe And toggle the buttons for Advanced Threat Defense, Online Threat Prevention, and Antivirus. Under Antivirus, options for On-access scan, On-demand scan, and Embedded scripts appear. Select them all. Repeat this process for: C:\\Program Files\\TacticalAgent\\meshagent.exe C:\\Program Files\\TacticalAgent\\tacticalrmm.exe C:\\Program Files\\TacticalAgent\\unins000.exe Next, add an exception for: C:\\ProgramData\\TacticalRMM Select all available options. For the sake of caution, add the following and select the Online Threat Prevention option: C:\\Program Files\\Mesh Agent\\* C:\\Program Files\\TacticalAgent\\* C:\\ProgramData\\TacticalRMM\\* Add exceptions for your T-RMM URLs as well. That should be all that's needed, unless BitDefender complains about the T-RMM agent installation file, in which case you'll need to add an exception for it as well, selecting all available options, then re-download it and save it in the same location to be safe.","title":"Exceptions"},{"location":"3rdparty_bomgar/","text":"Bomgar / BeyondTrust Remote Support \u00b6 Bomgar / BeyondTrust Integration \u00b6 Info To make this work you will need to already have the Bomgar / BeyondTrust agent pinned, installed, and running on a Bomgar Guest. In TRMM go to Global Settings > URL ACTIONS . Add a URL Action: Name = Bomgar Connect Description = Open Bomgar and Start Session URL Pattern = https:// < your_Bomgar_FQDN > /api/client_script??type=rep & operation=generate & action=start_jump_item_session & client.hostname={{agent.hostname}} & client.private_ip={{agent.local_ips}} & jump.method=pinned & session.custom.custom_field1=Custom%20Value & session.custom.custom_field2=123Note: Click Summit Give it a second to execute, then right click the agent that you are working with and go to Run URL Action > BomgarConnect . It should ask you to sign into your Bomgar Representative Console if you are not already logged in and launch the session.","title":"Bomgar"},{"location":"3rdparty_bomgar/#bomgar-beyondtrust-remote-support","text":"","title":"Bomgar / BeyondTrust Remote Support"},{"location":"3rdparty_bomgar/#bomgar-beyondtrust-integration","text":"Info To make this work you will need to already have the Bomgar / BeyondTrust agent pinned, installed, and running on a Bomgar Guest. In TRMM go to Global Settings > URL ACTIONS . Add a URL Action: Name = Bomgar Connect Description = Open Bomgar and Start Session URL Pattern = https:// < your_Bomgar_FQDN > /api/client_script??type=rep & operation=generate & action=start_jump_item_session & client.hostname={{agent.hostname}} & client.private_ip={{agent.local_ips}} & jump.method=pinned & session.custom.custom_field1=Custom%20Value & session.custom.custom_field2=123Note: Click Summit Give it a second to execute, then right click the agent that you are working with and go to Run URL Action > BomgarConnect . It should ask you to sign into your Bomgar Representative Console if you are not already logged in and launch the session.","title":"Bomgar / BeyondTrust Integration"},{"location":"3rdparty_dashy/","text":"Dashy \u00b6 Dashy Integration \u00b6 Info This is a Dashy integration for Tactical RMM to see server status in your dashboard. Enable Monitoring Endpoint \u00b6 SSH into your TRMM server as the user who installed Tactical Edit the local_settings.py file found at /rmm/api/tacticalrmm/tacticalrmm Add a new line at the botton with MON_TOKEN and give it a secure token value MON_TOKEN = \"fahlidufuidavb389fgw4a730gha0v9a0sdv8cyv\" Now run the command sudo systemctl restart rmm Add Widget to Dashboard \u00b6 While in the config editor add the widget to your desired section. Widget Options: useProxy = true type = trmm options : token = Your MON_TOKEN url = Api url of your instance Preview or save your config and you should now see the Tactical RMM Status widget.","title":"Dashy"},{"location":"3rdparty_dashy/#dashy","text":"","title":"Dashy"},{"location":"3rdparty_dashy/#dashy-integration","text":"Info This is a Dashy integration for Tactical RMM to see server status in your dashboard.","title":"Dashy Integration"},{"location":"3rdparty_dashy/#enable-monitoring-endpoint","text":"SSH into your TRMM server as the user who installed Tactical Edit the local_settings.py file found at /rmm/api/tacticalrmm/tacticalrmm Add a new line at the botton with MON_TOKEN and give it a secure token value MON_TOKEN = \"fahlidufuidavb389fgw4a730gha0v9a0sdv8cyv\" Now run the command sudo systemctl restart rmm","title":"Enable Monitoring Endpoint"},{"location":"3rdparty_dashy/#add-widget-to-dashboard","text":"While in the config editor add the widget to your desired section. Widget Options: useProxy = true type = trmm options : token = Your MON_TOKEN url = Api url of your instance Preview or save your config and you should now see the Tactical RMM Status widget.","title":"Add Widget to Dashboard"},{"location":"3rdparty_grafana/","text":"Adding Grafana to Tactical RMM \u00b6 Adding graphical dashboards to Tactical. See https://github.com/dinger1986/TRMM-Grafana","title":"Grafana"},{"location":"3rdparty_grafana/#adding-grafana-to-tactical-rmm","text":"Adding graphical dashboards to Tactical. See https://github.com/dinger1986/TRMM-Grafana","title":"Adding Grafana to Tactical RMM"},{"location":"3rdparty_n-able-takecontrol/","text":"N-Able TAKE CONTROL \u00b6 N-Able Take Control Integration (Solarwinds / Beanywhere) \u00b6 Info You can setup a full automation policy to collect the machine GUID but this example will collect from just one agent for testing purposes. From the UI go to Settings > Global Settings > CUSTOM FIELDS > Agents Add Custom Field Target = Agent Name = TakeControlID Field Type = Text While in Global Settings go to URL ACTIONS Add a URL Action Name = N-Able Take Control Description = Connect to a Take Control Session URL Pattern = mspasp://{{agent.TakeControlID}} Add script with this name Take Control - Get TakeControlID for client: $ConfigPath = $Env:ProgramData + \"\\GetSupportService\\BASupSrvc.ini\" $ResultsIdSearch = Select-String -Path $ConfigPath -Pattern ServerUniqueID $Result = @($ResultsIdSearch -split '=') $id = $Result[1] $Text = \"-s \" + $id $ENCODED = [Convert]::ToBase64String([Text.Encoding]::UTF8.GetBytes($Text)) Write-Output $ENCODED Navigate to an agent with Take Control running (or apply using Settings > Automation Manager ). Go to Tasks. Add Task Select Script = Take Control - Get TakeControlID for client Descriptive name of task = Collects the TakeControlID. Collector Task = CHECKED Custom Field to update = TakeControlID Click Next Add Schedule Click Add Task Right click on the newly created task and click Run Task Now . Give it a second to execute then right click the agent that you are working with and go to Run URL Action > N-Able Take Control It launch the session in Take Control desktop Console.","title":"N-Able"},{"location":"3rdparty_n-able-takecontrol/#n-able-take-control","text":"","title":"N-Able TAKE CONTROL"},{"location":"3rdparty_n-able-takecontrol/#n-able-take-control-integration-solarwinds-beanywhere","text":"Info You can setup a full automation policy to collect the machine GUID but this example will collect from just one agent for testing purposes. From the UI go to Settings > Global Settings > CUSTOM FIELDS > Agents Add Custom Field Target = Agent Name = TakeControlID Field Type = Text While in Global Settings go to URL ACTIONS Add a URL Action Name = N-Able Take Control Description = Connect to a Take Control Session URL Pattern = mspasp://{{agent.TakeControlID}} Add script with this name Take Control - Get TakeControlID for client: $ConfigPath = $Env:ProgramData + \"\\GetSupportService\\BASupSrvc.ini\" $ResultsIdSearch = Select-String -Path $ConfigPath -Pattern ServerUniqueID $Result = @($ResultsIdSearch -split '=') $id = $Result[1] $Text = \"-s \" + $id $ENCODED = [Convert]::ToBase64String([Text.Encoding]::UTF8.GetBytes($Text)) Write-Output $ENCODED Navigate to an agent with Take Control running (or apply using Settings > Automation Manager ). Go to Tasks. Add Task Select Script = Take Control - Get TakeControlID for client Descriptive name of task = Collects the TakeControlID. Collector Task = CHECKED Custom Field to update = TakeControlID Click Next Add Schedule Click Add Task Right click on the newly created task and click Run Task Now . Give it a second to execute then right click the agent that you are working with and go to Run URL Action > N-Able Take Control It launch the session in Take Control desktop Console.","title":"N-Able Take Control Integration (Solarwinds / Beanywhere)"},{"location":"3rdparty_rustdesk/","text":"To install Rustdesk and use it with Tactical RMM you need to the the following. \u00b6 Install your own RustDesk Server, following their official docs and open ports. Create the following scripts (all are powershell). Create a URL Action . Create custom fields for the RustDesk ID and password. Create collector tasks and Script Checks Enjoy :) Install Script Replace IPADDRESS and KEY \u00b6 $ErrorActionPreference= 'silentlycontinue' If (!(Test-Path c:\\Temp)) { New-Item -ItemType Directory -Force -Path c:\\Temp > null } cd c:\\Temp powershell Invoke-WebRequest \"https://github.com/rustdesk/rustdesk/releases/download/1.2.2/rustdesk-1.2.2-x86_64.exe\" -Outfile \"rustdesk.exe\" Start-Process .\\rustdesk.exe --silent-install -wait $ServiceName = 'Rustdesk' $arrService = Get-Service -Name $ServiceName -ErrorAction SilentlyContinue if ($arrService -eq $null) { Start-Sleep -seconds 20 } while ($arrService.Status -ne 'Running') { Start-Service $ServiceName Start-Sleep -seconds 5 $arrService.Refresh() } net stop rustdesk $username = ((Get-WMIObject -ClassName Win32_ComputerSystem).Username).Split('\\')[1] Remove-Item C:\\Users\\$username\\AppData\\Roaming\\RustDesk\\config\\RustDesk2.toml New-Item C:\\Users\\$username\\AppData\\Roaming\\RustDesk\\config\\RustDesk2.toml Set-Content C:\\Users\\$username\\AppData\\Roaming\\RustDesk\\config\\RustDesk2.toml \"rendezvous_server = 'IPADDRESS' `nnat_type = 1`nserial = 0`n`n[options]`ncustom-rendezvous-server = 'IPADDRESS'`nkey = 'KEY='`nrelay-server = 'IPADDRESS'`napi-server = 'https://IPADDRESS'\" Remove-Item C:\\Windows\\ServiceProfiles\\LocalService\\AppData\\Roaming\\RustDesk\\config\\RustDesk2.toml New-Item C:\\Windows\\ServiceProfiles\\LocalService\\AppData\\Roaming\\RustDesk\\config\\RustDesk2.toml Set-Content C:\\Windows\\ServiceProfiles\\LocalService\\AppData\\Roaming\\RustDesk\\config\\RustDesk2.toml \"rendezvous_server = 'IPADDRESS' `nnat_type = 1`nserial = 0`n`n[options]`ncustom-rendezvous-server = 'IPADDRESS'`nkey = 'KEY='`nrelay-server = 'IPADDRESS'`napi-server = 'https://IPADDRESS'\" net start rustdesk RustDesk Get ID (Collector Script needs Custom Agent Field) \u00b6 $ErrorActionPreference= 'silentlycontinue' cd $env:ProgramFiles\\RustDesk\\ .\\RustDesk.exe --get-id | out-host Create Script to be used as a Check \u00b6 $ErrorActionPreference= 'silentlycontinue' $confirmation_file = \"C:\\program files\\RustDesk\\rdrunonce.txt\" if ([System.IO.File]::Exists($confirmation_file)) { echo \"Confirmation file exists\" exit 0 } else { echo \"Confirmation file doesn't exists\" exit 1 } RustDesk Set and Get Password (Collector Script needs Custom Agent Field) to run on Check Failure \u00b6 $ErrorActionPreference= 'silentlycontinue' $confirmation_file = \"C:\\program files\\RustDesk\\rdrunonce.txt\" net stop rustdesk > null $ProcessActive = Get-Process rustdesk -ErrorAction SilentlyContinue if($ProcessActive -ne $null) { stop-process -ProcessName rustdesk -Force } $rustdesk_pw = (-join ((65..90) + (97..122) | Get-Random -Count 12 | % {[char]$_})) Start-Process \"$env:ProgramFiles\\RustDesk\\RustDesk.exe\" \"--password $rustdesk_pw\" -wait Write-Output $rustdesk_pw net start rustdesk > null New-Item $confirmation_file > null RustDesk URL Action \u00b6 rustdesk://connection/new/{{agent.rustdeskid}}?password={{agent.rustdeskpwd}} Add Custom Agent Fields \u00b6 rustdeskid Type = Text rustdeskpwd Type = Text","title":"RustDesk"},{"location":"3rdparty_rustdesk/#to-install-rustdesk-and-use-it-with-tactical-rmm-you-need-to-the-the-following","text":"Install your own RustDesk Server, following their official docs and open ports. Create the following scripts (all are powershell). Create a URL Action . Create custom fields for the RustDesk ID and password. Create collector tasks and Script Checks Enjoy :)","title":"To install Rustdesk and use it with Tactical RMM you need to the the following."},{"location":"3rdparty_rustdesk/#install-script-replace-ipaddress-and-key","text":"$ErrorActionPreference= 'silentlycontinue' If (!(Test-Path c:\\Temp)) { New-Item -ItemType Directory -Force -Path c:\\Temp > null } cd c:\\Temp powershell Invoke-WebRequest \"https://github.com/rustdesk/rustdesk/releases/download/1.2.2/rustdesk-1.2.2-x86_64.exe\" -Outfile \"rustdesk.exe\" Start-Process .\\rustdesk.exe --silent-install -wait $ServiceName = 'Rustdesk' $arrService = Get-Service -Name $ServiceName -ErrorAction SilentlyContinue if ($arrService -eq $null) { Start-Sleep -seconds 20 } while ($arrService.Status -ne 'Running') { Start-Service $ServiceName Start-Sleep -seconds 5 $arrService.Refresh() } net stop rustdesk $username = ((Get-WMIObject -ClassName Win32_ComputerSystem).Username).Split('\\')[1] Remove-Item C:\\Users\\$username\\AppData\\Roaming\\RustDesk\\config\\RustDesk2.toml New-Item C:\\Users\\$username\\AppData\\Roaming\\RustDesk\\config\\RustDesk2.toml Set-Content C:\\Users\\$username\\AppData\\Roaming\\RustDesk\\config\\RustDesk2.toml \"rendezvous_server = 'IPADDRESS' `nnat_type = 1`nserial = 0`n`n[options]`ncustom-rendezvous-server = 'IPADDRESS'`nkey = 'KEY='`nrelay-server = 'IPADDRESS'`napi-server = 'https://IPADDRESS'\" Remove-Item C:\\Windows\\ServiceProfiles\\LocalService\\AppData\\Roaming\\RustDesk\\config\\RustDesk2.toml New-Item C:\\Windows\\ServiceProfiles\\LocalService\\AppData\\Roaming\\RustDesk\\config\\RustDesk2.toml Set-Content C:\\Windows\\ServiceProfiles\\LocalService\\AppData\\Roaming\\RustDesk\\config\\RustDesk2.toml \"rendezvous_server = 'IPADDRESS' `nnat_type = 1`nserial = 0`n`n[options]`ncustom-rendezvous-server = 'IPADDRESS'`nkey = 'KEY='`nrelay-server = 'IPADDRESS'`napi-server = 'https://IPADDRESS'\" net start rustdesk","title":"Install Script Replace IPADDRESS and KEY"},{"location":"3rdparty_rustdesk/#rustdesk-get-id-collector-script-needs-custom-agent-field","text":"$ErrorActionPreference= 'silentlycontinue' cd $env:ProgramFiles\\RustDesk\\ .\\RustDesk.exe --get-id | out-host","title":"RustDesk Get ID (Collector Script needs Custom Agent Field)"},{"location":"3rdparty_rustdesk/#create-script-to-be-used-as-a-check","text":"$ErrorActionPreference= 'silentlycontinue' $confirmation_file = \"C:\\program files\\RustDesk\\rdrunonce.txt\" if ([System.IO.File]::Exists($confirmation_file)) { echo \"Confirmation file exists\" exit 0 } else { echo \"Confirmation file doesn't exists\" exit 1 }","title":"Create Script to be used as a Check"},{"location":"3rdparty_rustdesk/#rustdesk-set-and-get-password-collector-script-needs-custom-agent-field-to-run-on-check-failure","text":"$ErrorActionPreference= 'silentlycontinue' $confirmation_file = \"C:\\program files\\RustDesk\\rdrunonce.txt\" net stop rustdesk > null $ProcessActive = Get-Process rustdesk -ErrorAction SilentlyContinue if($ProcessActive -ne $null) { stop-process -ProcessName rustdesk -Force } $rustdesk_pw = (-join ((65..90) + (97..122) | Get-Random -Count 12 | % {[char]$_})) Start-Process \"$env:ProgramFiles\\RustDesk\\RustDesk.exe\" \"--password $rustdesk_pw\" -wait Write-Output $rustdesk_pw net start rustdesk > null New-Item $confirmation_file > null","title":"RustDesk Set and Get Password (Collector Script needs Custom Agent Field) to run on Check Failure"},{"location":"3rdparty_rustdesk/#rustdesk-url-action","text":"rustdesk://connection/new/{{agent.rustdeskid}}?password={{agent.rustdeskpwd}}","title":"RustDesk URL Action"},{"location":"3rdparty_rustdesk/#add-custom-agent-fields","text":"rustdeskid Type = Text rustdeskpwd Type = Text","title":"Add Custom Agent Fields"},{"location":"3rdparty_screenconnect/","text":"ScreenConnect / ConnectWise Control \u00b6 ConnectWise Control Integration \u00b6 Info To make this work you will need the exact name of the windows service from one of your agents running a ScreenConnect Guest. Info You can setup a full automation policy to collect the machine GUID, but this example will collect from just one agent for testing purposes. From the UI go to Settings > Global Settings > CUSTOM FIELDS > Agents . Add Custom Field: Target = Client Name = ScreenConnectService Field Type = Text Default Value = ScreenConnect Client (XXXXXXXX) (make sure to copy paste the exact windows service name here) Add Custom Field: Target = Agent Name = ScreenConnectGUID Field Type = Text While in Global Settings go to URL ACTIONS Add a URL Action: Name = ScreenConnect Description = Launch Screen Connect Session URL Pattern = https:// < your_screenconnect_fqdn_with_port > /Host#Access/All%20Machines//{{agent.ScreenConnectGUID}}/Join Navigate to an agent with ConnectWise Service running (or apply using Settings > Automation Manager ). Go to Tasks. Add Task: Descriptive name of task = get screen connect GUID Collector Task = CHECKED Custom Field to update = ScreenConnectGUID (Agent) Click Next Select Script = ScreenConnect - Get GUID for client (this is a builtin script from script library) Script argument = {{client.ScreenConnectService}} (it should auto-fill) Click the plus sign Choose a schedule for the collector to run then add the task. Once the task has synced with the agent, right click on the newly created task and click Run Task Now . Give it a second to execute, refresh the tasks tab and then check the output of the task and make sure you see a GUID. Right click the agent that you are working with and go to Run URL Action > ScreenConnect . It should ask you to sign into your ConnectWise Control server if you are not already logged in and launch the session. Install ScreenConnect via Tactical \u00b6 Use the ScreenConnect AIO script Install Tactical RMM via ScreenConnect Commands Window \u00b6 Create a Deployment under Agents > Manage Deployments Replace <deployment URL> below with your Deployment Download Link. #!ps #maxlength=500000 #timeout=600000 Invoke-WebRequest \"<deployment URL>\" -OutFile ( New-Item -Path \"c:\\ProgramData\\TacticalRMM\\temp\\trmminstall.exe\" -Force ) $proc = Start-Process c :\\ ProgramData \\ TacticalRMM \\ temp \\ trmminstall . exe -ArgumentList '-silent' -PassThru Wait-Process -InputObject $proc if ( $proc . ExitCode -ne 0 ) { Write-Warning \"$_ exited with status code $( $proc . ExitCode ) \" } Remove-Item -Path \"c:\\ProgramData\\TacticalRMM\\temp\\trmminstall.exe\" -Force","title":"ConnectWise Control / ScreenConnect"},{"location":"3rdparty_screenconnect/#screenconnect-connectwise-control","text":"","title":"ScreenConnect / ConnectWise Control"},{"location":"3rdparty_screenconnect/#connectwise-control-integration","text":"Info To make this work you will need the exact name of the windows service from one of your agents running a ScreenConnect Guest. Info You can setup a full automation policy to collect the machine GUID, but this example will collect from just one agent for testing purposes. From the UI go to Settings > Global Settings > CUSTOM FIELDS > Agents . Add Custom Field: Target = Client Name = ScreenConnectService Field Type = Text Default Value = ScreenConnect Client (XXXXXXXX) (make sure to copy paste the exact windows service name here) Add Custom Field: Target = Agent Name = ScreenConnectGUID Field Type = Text While in Global Settings go to URL ACTIONS Add a URL Action: Name = ScreenConnect Description = Launch Screen Connect Session URL Pattern = https:// < your_screenconnect_fqdn_with_port > /Host#Access/All%20Machines//{{agent.ScreenConnectGUID}}/Join Navigate to an agent with ConnectWise Service running (or apply using Settings > Automation Manager ). Go to Tasks. Add Task: Descriptive name of task = get screen connect GUID Collector Task = CHECKED Custom Field to update = ScreenConnectGUID (Agent) Click Next Select Script = ScreenConnect - Get GUID for client (this is a builtin script from script library) Script argument = {{client.ScreenConnectService}} (it should auto-fill) Click the plus sign Choose a schedule for the collector to run then add the task. Once the task has synced with the agent, right click on the newly created task and click Run Task Now . Give it a second to execute, refresh the tasks tab and then check the output of the task and make sure you see a GUID. Right click the agent that you are working with and go to Run URL Action > ScreenConnect . It should ask you to sign into your ConnectWise Control server if you are not already logged in and launch the session.","title":"ConnectWise Control Integration"},{"location":"3rdparty_screenconnect/#install-screenconnect-via-tactical","text":"Use the ScreenConnect AIO script","title":"Install ScreenConnect via Tactical"},{"location":"3rdparty_screenconnect/#install-tactical-rmm-via-screenconnect-commands-window","text":"Create a Deployment under Agents > Manage Deployments Replace <deployment URL> below with your Deployment Download Link. #!ps #maxlength=500000 #timeout=600000 Invoke-WebRequest \"<deployment URL>\" -OutFile ( New-Item -Path \"c:\\ProgramData\\TacticalRMM\\temp\\trmminstall.exe\" -Force ) $proc = Start-Process c :\\ ProgramData \\ TacticalRMM \\ temp \\ trmminstall . exe -ArgumentList '-silent' -PassThru Wait-Process -InputObject $proc if ( $proc . ExitCode -ne 0 ) { Write-Warning \"$_ exited with status code $( $proc . ExitCode ) \" } Remove-Item -Path \"c:\\ProgramData\\TacticalRMM\\temp\\trmminstall.exe\" -Force","title":"Install Tactical RMM via ScreenConnect Commands Window"},{"location":"3rdparty_splashtop/","text":"Splashtop \u00b6 Splashtop Integration \u00b6 From the UI go to Settings > Global Settings > CUSTOM FIELDS > Agents . Add Custom Field: Target = Agent Name = SplashtopSUUID Field Type = Text While in Global Settings go to URL ACTIONS . Add a URL Action: Name = Splashtop Description = Connect to a Splashtop client URL Pattern = st-business://com.splashtop.business?account= & uuid={{agent.SplashtopSUUID}} & sessiontype=remote Navigate to an agent with Splashtop running (or apply using Settings > Automation Manager ). Go to Tasks. Add Task: Select Script = Splashtop - Get SUUID for client (this is a builtin script from script library) Descriptive name of task = Obtain Splashtop SUUID from device registry. Collector Task = CHECKED Custom Field to update = SplashtopSUUID Click Next Check Manual Click Add Task Right click on the newly created task and click Run Task Now . Give it a second to execute, then right click the agent that you are working with and go to Run URL Action > Splashtop .","title":"Splashtop"},{"location":"3rdparty_splashtop/#splashtop","text":"","title":"Splashtop"},{"location":"3rdparty_splashtop/#splashtop-integration","text":"From the UI go to Settings > Global Settings > CUSTOM FIELDS > Agents . Add Custom Field: Target = Agent Name = SplashtopSUUID Field Type = Text While in Global Settings go to URL ACTIONS . Add a URL Action: Name = Splashtop Description = Connect to a Splashtop client URL Pattern = st-business://com.splashtop.business?account= & uuid={{agent.SplashtopSUUID}} & sessiontype=remote Navigate to an agent with Splashtop running (or apply using Settings > Automation Manager ). Go to Tasks. Add Task: Select Script = Splashtop - Get SUUID for client (this is a builtin script from script library) Descriptive name of task = Obtain Splashtop SUUID from device registry. Collector Task = CHECKED Custom Field to update = SplashtopSUUID Click Next Check Manual Click Add Task Right click on the newly created task and click Run Task Now . Give it a second to execute, then right click the agent that you are working with and go to Run URL Action > Splashtop .","title":"Splashtop Integration"},{"location":"3rdparty_supremo/","text":"Supremo \u00b6 Supremo Integration \u00b6 Info You can set up a full automation policy to collect the machine GUID, but this example will collect from just one agent for testing purposes. Create Custom Field \u00b6 From the UI go to Settings > Global Settings > CUSTOM FIELDS > Agents . Add Custom Field: Target = Agent Name = SupremoID Field Type = Text Create URL Action ( Ref ) \u00b6 While in Global Settings go to URL ACTIONS . Add a URL Action: Name = Supremo Control Description = Connect to a Supremo Session URL Pattern = Supremo:{{agent.SupremoID}} Create Supremo Collector \u00b6 This populates the Custom field with the Supremo ID. Navigate to an agent with Supremo running (or apply using Settings > Automation Manager ). Go to Tasks. Add Task: Select Script = Supremo - Get ClientID for client (this is a builtin script from script library) Descriptive name of task = Collects the SupremoID for Supremo. Collector Task = CHECKED Custom Field to update = SupremoID Click Next Check One Time , choose a time in the past so it'll run once on the agent. Click Add Task Right click on the newly created task and click Run Task Now . Give it a second to execute, then right click the agent that you are working with and go to Run URL Action > Supremo Control . It should launch the session in Supremo. Note You have to have Supremo installed on the local computer.","title":"Supremo"},{"location":"3rdparty_supremo/#supremo","text":"","title":"Supremo"},{"location":"3rdparty_supremo/#supremo-integration","text":"Info You can set up a full automation policy to collect the machine GUID, but this example will collect from just one agent for testing purposes.","title":"Supremo Integration"},{"location":"3rdparty_supremo/#create-custom-field","text":"From the UI go to Settings > Global Settings > CUSTOM FIELDS > Agents . Add Custom Field: Target = Agent Name = SupremoID Field Type = Text","title":"Create Custom Field"},{"location":"3rdparty_supremo/#create-url-action-ref","text":"While in Global Settings go to URL ACTIONS . Add a URL Action: Name = Supremo Control Description = Connect to a Supremo Session URL Pattern = Supremo:{{agent.SupremoID}}","title":"Create URL Action (Ref)"},{"location":"3rdparty_supremo/#create-supremo-collector","text":"This populates the Custom field with the Supremo ID. Navigate to an agent with Supremo running (or apply using Settings > Automation Manager ). Go to Tasks. Add Task: Select Script = Supremo - Get ClientID for client (this is a builtin script from script library) Descriptive name of task = Collects the SupremoID for Supremo. Collector Task = CHECKED Custom Field to update = SupremoID Click Next Check One Time , choose a time in the past so it'll run once on the agent. Click Add Task Right click on the newly created task and click Run Task Now . Give it a second to execute, then right click the agent that you are working with and go to Run URL Action > Supremo Control . It should launch the session in Supremo. Note You have to have Supremo installed on the local computer.","title":"Create Supremo Collector"},{"location":"3rdparty_teamviewer/","text":"TeamViewer \u00b6 TeamViewer Integration \u00b6 Info You can setup a full automation policy to collect the machine GUID, but this example will collect from just one agent for testing purposes. From the UI go to Settings > Global Settings > CUSTOM FIELDS > Agents . Add Custom Field: Target = Agent Name = TeamViewerClientID Field Type = Text While in Global Settings go to URL ACTIONS . Add a URL Action: Name = TeamViewer Control Description = Connect to a TeamViewer Session URL Pattern = https://start.teamviewer.com/device/{{agent.TeamViewerClientID}}/authorization/password/mode/control Navigate to an agent with TeamViewer running (or apply using Settings > Automation Manager ). Go to Tasks. Add Task: Select Script = TeamViewer - Get ClientID for client (this is a builtin script from script library) Descriptive name of task = Collects the ClientID for TeamViewer. Collector Task = CHECKED Custom Field to update = TeamViewerClientID Click Next Check Manual Click Add Task Right click on the newly created task and click Run Task Now . Give it a second to execute, then right click the agent that you are working with and go to Run URL Action > TeamViewer Control . It will launch the session and possibly prompt for a password in TeamViewer.","title":"TeamViewer"},{"location":"3rdparty_teamviewer/#teamviewer","text":"","title":"TeamViewer"},{"location":"3rdparty_teamviewer/#teamviewer-integration","text":"Info You can setup a full automation policy to collect the machine GUID, but this example will collect from just one agent for testing purposes. From the UI go to Settings > Global Settings > CUSTOM FIELDS > Agents . Add Custom Field: Target = Agent Name = TeamViewerClientID Field Type = Text While in Global Settings go to URL ACTIONS . Add a URL Action: Name = TeamViewer Control Description = Connect to a TeamViewer Session URL Pattern = https://start.teamviewer.com/device/{{agent.TeamViewerClientID}}/authorization/password/mode/control Navigate to an agent with TeamViewer running (or apply using Settings > Automation Manager ). Go to Tasks. Add Task: Select Script = TeamViewer - Get ClientID for client (this is a builtin script from script library) Descriptive name of task = Collects the ClientID for TeamViewer. Collector Task = CHECKED Custom Field to update = TeamViewerClientID Click Next Check Manual Click Add Task Right click on the newly created task and click Run Task Now . Give it a second to execute, then right click the agent that you are working with and go to Run URL Action > TeamViewer Control . It will launch the session and possibly prompt for a password in TeamViewer.","title":"TeamViewer Integration"},{"location":"3rdparty_zammad/","text":"Zammad Setup \u00b6 Install Zammad: Follow the installation instructions provided in the Zammad documentation . Generate API Token: Click on your User Initials in Zammad. Navigate to Profile > Token Access. Click \"Create\". Name the Token \"Tactical RMM\" and select \"Ticket Agent\". Click \"Create\" to generate the token. Add Customers and Emails: Ensure each customer in Zammad has a corresponding email associated. Tactical RMM Setup \u00b6 Add Custom Field in Sites: Add a custom field under Sites called Zammad-Email Populate this field with the corresponding email addresses from Zammad to match up with customers. Add Webhook: URL Pattern: https://your_zammad_domain.com/api/v1/tickets Method: POST Request Headers: { \"Content-Type\" : \"application/json\" , \"Authorization\" : \"Bearer your_generated_token_here\" } Replace your_generated_token_here with the actual API token generated from Zammad. Request Body: { \"title\" : \"{{ alert.severity }} on {{ agent.hostname }}\" , \"group\" : \"Users\" , \"customer\" : \"{{ client.Zammad-Email }}\" , \"article\" : { \"subject\" : \"{{ alert.severity }} on {{ agent.hostname }}\" , \"body\" : \"Client: {{agent.site.client.name}}, Site: {{agent.site.name}}: {{ alert.message }} at {{ alert.alert_time }}\" , \"type\" : \"note\" , \"internal\" : false } } {{ alert.severity }} , {{ agent.hostname }} , {{ alert.message }} , and {{ alert.alert_time }} are placeholders that will be replaced with actual data from Tactical RMM alerts. {{ client.Zammad-Email }} refers to the custom field you added under Sites where you store the corresponding Zammad email for each customer. Add Webhook to Alert Policy : Assign the webhook to the appropriate Alert Policy that is assigned to customers in Tactical RMM. Notes: \u00b6 Ensure that the API token in the Authorization header (Bearer your_generated_token_here) has the necessary permissions (e.g., ticket.agent) to create tickets in Zammad. Adjust the title, group, customer, article fields in the request body as per your specific requirements and Zammad's API capabilities. Test the integration thoroughly to ensure that alerts from Tactical RMM are correctly creating tickets in Zammad with the expected data.","title":"Zammad"},{"location":"3rdparty_zammad/#zammad-setup","text":"Install Zammad: Follow the installation instructions provided in the Zammad documentation . Generate API Token: Click on your User Initials in Zammad. Navigate to Profile > Token Access. Click \"Create\". Name the Token \"Tactical RMM\" and select \"Ticket Agent\". Click \"Create\" to generate the token. Add Customers and Emails: Ensure each customer in Zammad has a corresponding email associated.","title":"Zammad Setup"},{"location":"3rdparty_zammad/#tactical-rmm-setup","text":"Add Custom Field in Sites: Add a custom field under Sites called Zammad-Email Populate this field with the corresponding email addresses from Zammad to match up with customers. Add Webhook: URL Pattern: https://your_zammad_domain.com/api/v1/tickets Method: POST Request Headers: { \"Content-Type\" : \"application/json\" , \"Authorization\" : \"Bearer your_generated_token_here\" } Replace your_generated_token_here with the actual API token generated from Zammad. Request Body: { \"title\" : \"{{ alert.severity }} on {{ agent.hostname }}\" , \"group\" : \"Users\" , \"customer\" : \"{{ client.Zammad-Email }}\" , \"article\" : { \"subject\" : \"{{ alert.severity }} on {{ agent.hostname }}\" , \"body\" : \"Client: {{agent.site.client.name}}, Site: {{agent.site.name}}: {{ alert.message }} at {{ alert.alert_time }}\" , \"type\" : \"note\" , \"internal\" : false } } {{ alert.severity }} , {{ agent.hostname }} , {{ alert.message }} , and {{ alert.alert_time }} are placeholders that will be replaced with actual data from Tactical RMM alerts. {{ client.Zammad-Email }} refers to the custom field you added under Sites where you store the corresponding Zammad email for each customer. Add Webhook to Alert Policy : Assign the webhook to the appropriate Alert Policy that is assigned to customers in Tactical RMM.","title":"Tactical RMM Setup"},{"location":"3rdparty_zammad/#notes","text":"Ensure that the API token in the Authorization header (Bearer your_generated_token_here) has the necessary permissions (e.g., ticket.agent) to create tickets in Zammad. Adjust the title, group, customer, article fields in the request body as per your specific requirements and Zammad's API capabilities. Test the integration thoroughly to ensure that alerts from Tactical RMM are correctly creating tickets in Zammad with the expected data.","title":"Notes:"},{"location":"advanced_commands/","text":"body, .md-content, .md-main__inner { background-color: red !important; } Advanced Commands \u00b6 Everything you find on this page is dangerous. The first rule of TRMM Club is: You do not talk about TRMM Club. The second rule of TRMM Club is: You do not talk about TRMM Club. Danger Use all commands here with caution, there is no undo. Have backups. You have been warned. Server Commands \u00b6 Remove agent history for one agent \u00b6 Permanently deletes all history records for a specific agent. This is useful for cleaning up agents with corrupted history or reducing database size for agents. Keywords: agent history , delete history , cleanup , database maintenance , audit trail , task history , agent cleanup Parameters: - Replace CHANGEME with the exact hostname of the target agent - Ensure the agent hostname exists before running the command /rmm/api/env/bin/python /rmm/api/tacticalrmm/manage.py shell -c 'from agents.models import Agent,AgentHistory;agent = Agent.objects.get(hostname=\"CHANGEME\");to_delete = AgentHistory.objects.filter(agent=agent).values_list(\"id\", flat=True);AgentHistory.objects.filter(id__in=to_delete).delete()' Get mapping of agent ID to mesh ID \u00b6 TRMM Agent unique ID and MeshCentral nodeID /rmm/api/env/bin/python /rmm/api/tacticalrmm/manage.py shell -c 'from agents.models import Agent; [print((i.agent_id, f\"node//{i.hex_mesh_node_id}\")) for i in Agent.objects.only(\"mesh_node_id\") if i.mesh_node_id and i.hex_mesh_node_id != \"error\"]' Maintenance mode toggle for all agents \u00b6 Set all agents in Maintenance Mode echo \"from agents.models import Agent; Agent.objects.update(maintenance_mode=True)\" | /rmm/api/env/bin/python /rmm/api/tacticalrmm/manage.py shell Undo all agents from Maintenance Mode echo \"from agents.models import Agent; Agent.objects.update(maintenance_mode=False)\" | /rmm/api/env/bin/python /rmm/api/tacticalrmm/manage.py shell","title":"Advanced commands"},{"location":"advanced_commands/#advanced-commands","text":"Everything you find on this page is dangerous. The first rule of TRMM Club is: You do not talk about TRMM Club. The second rule of TRMM Club is: You do not talk about TRMM Club. Danger Use all commands here with caution, there is no undo. Have backups. You have been warned.","title":"Advanced Commands"},{"location":"advanced_commands/#server-commands","text":"","title":"Server Commands"},{"location":"advanced_commands/#remove-agent-history-for-one-agent","text":"Permanently deletes all history records for a specific agent. This is useful for cleaning up agents with corrupted history or reducing database size for agents. Keywords: agent history , delete history , cleanup , database maintenance , audit trail , task history , agent cleanup Parameters: - Replace CHANGEME with the exact hostname of the target agent - Ensure the agent hostname exists before running the command /rmm/api/env/bin/python /rmm/api/tacticalrmm/manage.py shell -c 'from agents.models import Agent,AgentHistory;agent = Agent.objects.get(hostname=\"CHANGEME\");to_delete = AgentHistory.objects.filter(agent=agent).values_list(\"id\", flat=True);AgentHistory.objects.filter(id__in=to_delete).delete()'","title":"Remove agent history for one agent"},{"location":"advanced_commands/#get-mapping-of-agent-id-to-mesh-id","text":"TRMM Agent unique ID and MeshCentral nodeID /rmm/api/env/bin/python /rmm/api/tacticalrmm/manage.py shell -c 'from agents.models import Agent; [print((i.agent_id, f\"node//{i.hex_mesh_node_id}\")) for i in Agent.objects.only(\"mesh_node_id\") if i.mesh_node_id and i.hex_mesh_node_id != \"error\"]'","title":"Get mapping of agent ID to mesh ID"},{"location":"advanced_commands/#maintenance-mode-toggle-for-all-agents","text":"Set all agents in Maintenance Mode echo \"from agents.models import Agent; Agent.objects.update(maintenance_mode=True)\" | /rmm/api/env/bin/python /rmm/api/tacticalrmm/manage.py shell Undo all agents from Maintenance Mode echo \"from agents.models import Agent; Agent.objects.update(maintenance_mode=False)\" | /rmm/api/env/bin/python /rmm/api/tacticalrmm/manage.py shell","title":"Maintenance mode toggle for all agents"},{"location":"av/","text":"Antivirus \u00b6 They are usually fraught with false-positives because we live in a world of complex greys, not black and white. We are facing significant challenges due to the stringent policies of antivirus companies. Antivirus software is a critical tool for safeguarding Windows systems against viruses, trojans, and other malicious threats. However, the aggressive approach of some antivirus companies towards virus and trojan protection often results in legitimate software, such as Tactical RMM, being misclassified as malware. For instance, Tactical RMM is designed to assist IT professionals and system administrators in managing and monitoring systems remotely. This, while essential for operational efficiency and security, can sometimes be flagged by antivirus solutions as potential threats. This classification occurs despite the primary use of Tactical RMM for legitimate, constructive purposes. The rationale behind such decisions is that if a tool could potentially be leveraged for malicious activities, it must be treated as a threat. This stance overlooks the reality that the majority of users employ these tools for valid and positive reasons. Some antivirus companies adopt a slightly more nuanced approach by labeling these tools as \"Security Threats\" or \"Riskware.\" While this is a less severe classification than labeling them as viruses or trojans, it still hinders users by quarantining or deleting the tools, effectively preventing their use. Moreover, the distinction between \"Virus\" and \"Riskware\" is lost on many users, leading to confusion and undue concern and why do they not class other RMMs the same? The issue of overzealous protection is not unique to Tactical RMM. Other developers, both small and large, encounter similar problems with antivirus software flagging their products without clear justification. Examples include utilities that do not even involve password recovery or system monitoring but still face unwarranted scrutiny and restriction. Infact we can see NirSoft 15 years ago wrote a similar blog about this. The challenge extends beyond individual developers to affect the broader ecosystem. Small developers, in particular, struggle with the ramifications of these false positives, lacking the resources and legal clout that larger companies possess to quickly address and resolve these issues. To mitigate these challenges, it is crucial for both users and developers to engage more proactively with antivirus companies. This involves reporting false positives, providing feedback on software classifications, and advocating for a more balanced approach that recognizes the legitimate use of Tactical RMM. Ultimately, greater awareness and communication can help ensure that essential tools are not unjustly penalized, supporting a more secure and efficient digital environment. Remember YOU are the antivirus companies customer, YOU by reporting these false positives can help! At the moment, Microsoft Windows Defender thinks a go executable with virtually nothing in it is the \"Trojan:Win32/Wacatac.B!ml\" virus https://old.reddit.com/r/golang/comments/s1bh01/goexecutables_and_windows_defender/ . Windows Defender ranks as one of the top AVs and can be largely controlled via Tactical. Read more about Defender detection rates etc here . Use the Defender Status Report script (Task > Run Daily - Use Automation manager) to monitor machines: https://github.com/amidaware/community-scripts/blob/main/scripts/Win_Defender_Status_Report.ps1 . If you want to lock a system down, run the Defender Enable script (test in your environment, because it can stop Microsoft Office from opening docs among MANY other things) that will turn on Protected Folders: https://github.com/amidaware/community-scripts/blob/main/scripts/Win_Defender_Enable.ps1 and you will be extremely safe. Annoyed, and unable to do lots of dangerous things like opening files from the internet and email...but safe. Use this as an Exclusion List for Protected Folders items. Be aware there is also a PowerShell script to add TRMM exclusions specific to Windows Defender. Is Code Signing worth it? Note If you need to use 3rd party AV, add the necessary exclusions (see below for examples) and submit the exes as safe. Bitdefender Gravityzone \u00b6 Admin URL: https://cloud.gravityzone.bitdefender.com/ To exclude the Tactical and MeshCentral agents, go to Policies > {policy name} > Antimalware > Settings > Custom Exclusions . Add the following exclusions. The ATS/IDS module does not support file exclusions, only folder exclusions. File Excluded Items Modules Notes Folder C:\\ProgramData\\TacticalRMM\\ On-demand, On-Access, ATC/IDS All TRMM scripts are saved here to run Folder %ProgramFiles%\\Mesh Agent\\ On-demand, On-Access, ATC/IDS Excludes Mesh Agent from ATC/IDS Folder %ProgramFiles%\\TacticalAgent\\ On-demand, On-Access, ATC/IDS Excludes TacticalAgent from ATC/IDS Process %ProgramFiles%\\Mesh Agent\\MeshAgent.exe On-Access, ATC/IDS Excludes Mesh Agent service (process) from ATC/IDS Process %ProgramFiles%\\TacticalAgent\\tacticalrmm.exe On-Access, ATC/IDS Excludes tacticalrmm service (process) from ATC/IDS File %ProgramFiles%\\Mesh Agent\\MeshAgent.exe On-demand, On-Access This may not be needed since the entire folder is excluded File %ProgramFiles%\\TacticalAgent\\tacticalrmm.exe On-demand, On-Access This may not be needed since the entire folder is excluded To exclude URLs: Policies > {policy name} > Network Protection > Content Control > Settings > Exclusions Webroot \u00b6 Admin URL: Sentinel One \u00b6 First log into your SentinelOne account Go To Sentinels (from the sidebar) > Exclusions > New Exclusion > Create Exclusion Choose the Path option in the New Exclusion window Add the Following Paths: C:\\ProgramData\\TacticalRMM\\ %ProgramFiles%\\Mesh Agent\\ %ProgramFiles%\\TacticalAgent\\ Choose Suppress Alerts in Exclusions mode Save and Apply Policy to Devices Sophos \u00b6 Sophos Central Admin \u00b6 Go To Global Settings > General > Global Exclusions > Add Exclusion Sophos XG Firewall \u00b6 Log into Sophos Central Admin: Admin URL: https://cloud.sophos.com/ Log into the Sophos XG Firewall. Go To System > Hosts and services > FQDN Host Group and create a new group. Go To System > Hosts and services > FQDN Host . Create the following 3 hosts and add each to your FQDN host group. api.yourdomain.com mesh.yourdomain.com rmm.yourdomain.com (Optional if you want your client to have GUI access to Tactical RMM) Go To Hosts and services > Services and create the following services: Name: Tactical-Service-443 Protocol: TCP Source port: 1:65535 Destination port: 443 Go To Hosts and services > Service group and create the following service group: Go To Protect > Rules and policies and add a firewall rule: Rule name: Tactical Rule Rule position: Top Source zones: LAN Source networks: ANY Destination zones: WAN Destination networks: Your FQDN Host Group Services: Tactical Services Optionally select Log Firewall Traffic checkbox for troubleshooting. ESET PROTECT Console \u00b6 There are three areas where you need to configure exclusions: Detection Engine > Performance Exclusions Web Access Protection > URL Address Management > List of addresses excluded from content scan Web Access Protection > URL Address Management > List of allowed addresses UTM Filter Bypasses \u00b6 Use the below if your UTM blocks installation of Tactical RMM ^https?://([A-Za-z0-9.-]*\\.)?tacticalrmm\\.com\\.?/","title":"Antivirus Exclusions"},{"location":"av/#antivirus","text":"They are usually fraught with false-positives because we live in a world of complex greys, not black and white. We are facing significant challenges due to the stringent policies of antivirus companies. Antivirus software is a critical tool for safeguarding Windows systems against viruses, trojans, and other malicious threats. However, the aggressive approach of some antivirus companies towards virus and trojan protection often results in legitimate software, such as Tactical RMM, being misclassified as malware. For instance, Tactical RMM is designed to assist IT professionals and system administrators in managing and monitoring systems remotely. This, while essential for operational efficiency and security, can sometimes be flagged by antivirus solutions as potential threats. This classification occurs despite the primary use of Tactical RMM for legitimate, constructive purposes. The rationale behind such decisions is that if a tool could potentially be leveraged for malicious activities, it must be treated as a threat. This stance overlooks the reality that the majority of users employ these tools for valid and positive reasons. Some antivirus companies adopt a slightly more nuanced approach by labeling these tools as \"Security Threats\" or \"Riskware.\" While this is a less severe classification than labeling them as viruses or trojans, it still hinders users by quarantining or deleting the tools, effectively preventing their use. Moreover, the distinction between \"Virus\" and \"Riskware\" is lost on many users, leading to confusion and undue concern and why do they not class other RMMs the same? The issue of overzealous protection is not unique to Tactical RMM. Other developers, both small and large, encounter similar problems with antivirus software flagging their products without clear justification. Examples include utilities that do not even involve password recovery or system monitoring but still face unwarranted scrutiny and restriction. Infact we can see NirSoft 15 years ago wrote a similar blog about this. The challenge extends beyond individual developers to affect the broader ecosystem. Small developers, in particular, struggle with the ramifications of these false positives, lacking the resources and legal clout that larger companies possess to quickly address and resolve these issues. To mitigate these challenges, it is crucial for both users and developers to engage more proactively with antivirus companies. This involves reporting false positives, providing feedback on software classifications, and advocating for a more balanced approach that recognizes the legitimate use of Tactical RMM. Ultimately, greater awareness and communication can help ensure that essential tools are not unjustly penalized, supporting a more secure and efficient digital environment. Remember YOU are the antivirus companies customer, YOU by reporting these false positives can help! At the moment, Microsoft Windows Defender thinks a go executable with virtually nothing in it is the \"Trojan:Win32/Wacatac.B!ml\" virus https://old.reddit.com/r/golang/comments/s1bh01/goexecutables_and_windows_defender/ . Windows Defender ranks as one of the top AVs and can be largely controlled via Tactical. Read more about Defender detection rates etc here . Use the Defender Status Report script (Task > Run Daily - Use Automation manager) to monitor machines: https://github.com/amidaware/community-scripts/blob/main/scripts/Win_Defender_Status_Report.ps1 . If you want to lock a system down, run the Defender Enable script (test in your environment, because it can stop Microsoft Office from opening docs among MANY other things) that will turn on Protected Folders: https://github.com/amidaware/community-scripts/blob/main/scripts/Win_Defender_Enable.ps1 and you will be extremely safe. Annoyed, and unable to do lots of dangerous things like opening files from the internet and email...but safe. Use this as an Exclusion List for Protected Folders items. Be aware there is also a PowerShell script to add TRMM exclusions specific to Windows Defender. Is Code Signing worth it? Note If you need to use 3rd party AV, add the necessary exclusions (see below for examples) and submit the exes as safe.","title":"Antivirus"},{"location":"av/#bitdefender-gravityzone","text":"Admin URL: https://cloud.gravityzone.bitdefender.com/ To exclude the Tactical and MeshCentral agents, go to Policies > {policy name} > Antimalware > Settings > Custom Exclusions . Add the following exclusions. The ATS/IDS module does not support file exclusions, only folder exclusions. File Excluded Items Modules Notes Folder C:\\ProgramData\\TacticalRMM\\ On-demand, On-Access, ATC/IDS All TRMM scripts are saved here to run Folder %ProgramFiles%\\Mesh Agent\\ On-demand, On-Access, ATC/IDS Excludes Mesh Agent from ATC/IDS Folder %ProgramFiles%\\TacticalAgent\\ On-demand, On-Access, ATC/IDS Excludes TacticalAgent from ATC/IDS Process %ProgramFiles%\\Mesh Agent\\MeshAgent.exe On-Access, ATC/IDS Excludes Mesh Agent service (process) from ATC/IDS Process %ProgramFiles%\\TacticalAgent\\tacticalrmm.exe On-Access, ATC/IDS Excludes tacticalrmm service (process) from ATC/IDS File %ProgramFiles%\\Mesh Agent\\MeshAgent.exe On-demand, On-Access This may not be needed since the entire folder is excluded File %ProgramFiles%\\TacticalAgent\\tacticalrmm.exe On-demand, On-Access This may not be needed since the entire folder is excluded To exclude URLs: Policies > {policy name} > Network Protection > Content Control > Settings > Exclusions","title":"Bitdefender Gravityzone"},{"location":"av/#webroot","text":"Admin URL:","title":"Webroot"},{"location":"av/#sentinel-one","text":"First log into your SentinelOne account Go To Sentinels (from the sidebar) > Exclusions > New Exclusion > Create Exclusion Choose the Path option in the New Exclusion window Add the Following Paths: C:\\ProgramData\\TacticalRMM\\ %ProgramFiles%\\Mesh Agent\\ %ProgramFiles%\\TacticalAgent\\ Choose Suppress Alerts in Exclusions mode Save and Apply Policy to Devices","title":"Sentinel One"},{"location":"av/#sophos","text":"","title":"Sophos"},{"location":"av/#sophos-central-admin","text":"Go To Global Settings > General > Global Exclusions > Add Exclusion","title":"Sophos Central Admin"},{"location":"av/#sophos-xg-firewall","text":"Log into Sophos Central Admin: Admin URL: https://cloud.sophos.com/ Log into the Sophos XG Firewall. Go To System > Hosts and services > FQDN Host Group and create a new group. Go To System > Hosts and services > FQDN Host . Create the following 3 hosts and add each to your FQDN host group. api.yourdomain.com mesh.yourdomain.com rmm.yourdomain.com (Optional if you want your client to have GUI access to Tactical RMM) Go To Hosts and services > Services and create the following services: Name: Tactical-Service-443 Protocol: TCP Source port: 1:65535 Destination port: 443 Go To Hosts and services > Service group and create the following service group: Go To Protect > Rules and policies and add a firewall rule: Rule name: Tactical Rule Rule position: Top Source zones: LAN Source networks: ANY Destination zones: WAN Destination networks: Your FQDN Host Group Services: Tactical Services Optionally select Log Firewall Traffic checkbox for troubleshooting.","title":"Sophos XG Firewall"},{"location":"av/#eset-protect-console","text":"There are three areas where you need to configure exclusions: Detection Engine > Performance Exclusions Web Access Protection > URL Address Management > List of addresses excluded from content scan Web Access Protection > URL Address Management > List of allowed addresses","title":"ESET PROTECT Console"},{"location":"av/#utm-filter-bypasses","text":"Use the below if your UTM blocks installation of Tactical RMM ^https?://([A-Za-z0-9.-]*\\.)?tacticalrmm\\.com\\.?/","title":"UTM Filter Bypasses"},{"location":"backup/","text":"function multiplyBy() { num1 = document.getElementById( \"firstNumber\").value; num2 = document.getElementById( \"secondNumber\").value; document.getElementById( \"result\").innerHTML = num1 * num2; } Backing up the RMM \u00b6 Note This is only applicable for the standard install, not Docker installs. A backup script is provided for quick and easy way to backup all settings/data into one file to migrate to another server. Warning The backup script does not self update itself. Always make sure you have latest version from the master branch by verifying the SCRIPT_VERSION at the top of the file matches. Make sure you are logged into the user you used to install TRMM eg tactical . Then download and run the backup script: wget -N https://raw.githubusercontent.com/amidaware/tacticalrmm/master/backup.sh chmod +x backup.sh ./backup.sh The backup tar file will be saved in /rmmbackups with the following format: rmm-backup-CURRENTDATETIME.tar Schedule to run Daily via Cron \u00b6 Note You MUST enable passwordless sudo for your linux user or you won't get all files backed up, do a dry run first before setting up a schedule! You should verify this also by doing a test restore or verify the files have content. To schedule automated daily backups run the script with the --schedule flag ./backup.sh --schedule This will do the following: Create daily, weekly and monthly folders under /rmmbackup. Schedule backups using cron to run at midnight every night. As well as Daily backups, there are monthly backups on the 10th day of every month and weekly backups every Friday. Automated pruning of backup files, daily kept for 2 weeks, weekly for 2 months and monthly for 1 year. To calculate estimated disk needs, take the size of a manual backup and * 37. eg 600MB backup * 37 = 22.2GB of space needed. Calculate Backup Size (in MB): MB * = Total Space needed MB Warning The backup script will just save to your server drive, you ideally want to automate moving this to another server. Please ensure you have space for the backups to be stored. Video Walkthru \u00b6 Backup Testing \u00b6 See Restore Testing","title":"Backup"},{"location":"backup/#backing-up-the-rmm","text":"Note This is only applicable for the standard install, not Docker installs. A backup script is provided for quick and easy way to backup all settings/data into one file to migrate to another server. Warning The backup script does not self update itself. Always make sure you have latest version from the master branch by verifying the SCRIPT_VERSION at the top of the file matches. Make sure you are logged into the user you used to install TRMM eg tactical . Then download and run the backup script: wget -N https://raw.githubusercontent.com/amidaware/tacticalrmm/master/backup.sh chmod +x backup.sh ./backup.sh The backup tar file will be saved in /rmmbackups with the following format: rmm-backup-CURRENTDATETIME.tar","title":"Backing up the RMM"},{"location":"backup/#schedule-to-run-daily-via-cron","text":"Note You MUST enable passwordless sudo for your linux user or you won't get all files backed up, do a dry run first before setting up a schedule! You should verify this also by doing a test restore or verify the files have content. To schedule automated daily backups run the script with the --schedule flag ./backup.sh --schedule This will do the following: Create daily, weekly and monthly folders under /rmmbackup. Schedule backups using cron to run at midnight every night. As well as Daily backups, there are monthly backups on the 10th day of every month and weekly backups every Friday. Automated pruning of backup files, daily kept for 2 weeks, weekly for 2 months and monthly for 1 year. To calculate estimated disk needs, take the size of a manual backup and * 37. eg 600MB backup * 37 = 22.2GB of space needed. Calculate Backup Size (in MB): MB * = Total Space needed MB Warning The backup script will just save to your server drive, you ideally want to automate moving this to another server. Please ensure you have space for the backups to be stored.","title":"Schedule to run Daily via Cron"},{"location":"backup/#video-walkthru","text":"","title":"Video Walkthru"},{"location":"backup/#backup-testing","text":"See Restore Testing","title":"Backup Testing"},{"location":"code_signing/","text":"Code Signing \u00b6 Version added: Tactical RMM v0.6.0 / Agent v1.5.0 (April 2021) Tactical RMM agents are now code signed ! To get access to code signed agents (which also includes Linux/macOS agents) and Single Sign-On , you must be a Sponsor with a minimum monthly Tier 1 sponsorship. To get access to our Reporting feature, you must be a sponsor with a minimum monthly Tier 2 sponsorship. Exceptions will be made for Founders and Non-Profits which will only require Tier 1. One token is valid for 1 self hosted instance. If you have more than 1 instance please contact support for pricing options. Once you have become a Sponsor , open a support ticket and choose the \"Code Signing Request\" layout. Select the payment method you paid with from the dropdown. If you sponsored via Stripe or Paypal and your contact email is different from the email you used to pay, please let us know that in the ticket. Enter the API subdomain you will be using for your instance (e.g. api.example.com ). If you already have an existing token and want to switch your sponsorship from github to stripe/paypal, make sure to mention that in the ticket description and include your github username. Don't forget to also cancel your github sponsorship after you have successfully setup Paypal/Stripe. If you have joined our Discord and would like to be added to the sponsors role, include your Discord username as well. Please allow up to 24 hours for a response. How does it work? \u00b6 Every time you generate an agent or an agent does a self-update, your self-hosted instance sends a request to Tactical's code signing servers with your auth token. If the token is valid, the server sends you back a code signed agent. If not, it sends you back the un-signed agent. If you think your auth token has been compromised or stolen then please open a ticket to get a new token / invalidate the old one. Why should I pay for Code Signing? \u00b6 Code signing costs a lot of money. OV code signing requires a legitimate legal business...Amidaware was setup for this purpose. Code signing + operating a business costs thousands of dollars a year. It helps the project move forward and it can supports devs spending time on it, they have lives, wives, jobs and kids which all demands attention. It should stop bad actors using it maliciously. It helps with Antivirus products detecting it as being malicious. Tactical RMM is getting flagged as PUA or virus, will this fix it? \u00b6 Getting a code signed agent helps, but it is not guaranteed to eliminate this entirely. This is because AVs are unpredictable, changing all the time, constantly making new decisions and rules, telling you one thing and doing another, all doing different things in slightly different ways, etc. However, the best way to submit a whitelisting request to your AV for the TRMM agent... is having a code signed exe to submit. Right click \"C:\\Program Files\\TacticalAgent\\tacticalrmm.exe\" > Properties > Digital Signatures tab. Code signing certificate info \u00b6 Digicert OV code signing cert used by agents v2.9.0 and higher: Serial Number: 0108a89f4540182a1dfc246db61a0e89 Thumb Print: 9b38bdd4327297c8b87505119dbc8305379335bc Digicert OV code signing cert used by agents v2.7.0 and v2.8.0: Serial Number: 0f558fcc46f23aa4e2688052f3a9459f Thumb Print: 5f67afdbb3adc263965f5ed0c732e45575434449 Digicert OV code signing used by agents v2.6.2 and below: Serial Number: 0fef30ccce9d30183067160018796558 Thumb Print: 0e4844266294100d3f93e1cc7eecf61e9206bb14 Amidaware code signing used only by the dynamic EXE installer after May 3, 2024 at 4:59 PM PST: Serial Number: 0229c833c9bda1fe0a306f4b12b6ab3cf40f5790 Thumb Print: 17a930357440276bfaee23220e2f7e8f1a208556 Amidaware Code Signing Root CA : Serial Number: 2d4486df7eba0c6659d79106783caac1a83ffb41 Thumb Print: 45492337c44055dbb3910a90d4ed02758ebc0ebd Code Signing Changes for Dynamic EXE Installers \u00b6 Starting May 3, 2024, at 4:59 PM PST, all new dynamically generated EXE installers, including deployment link installers, will now be signed with Amidaware's own code signing certificate, issued by Amidaware's Code Signing Root CA. This change has been prompted by industry-wide modifications to code signing practices, which now necessitate the use of hardware tokens or HSMs (Hardware Security Modules). These requirements make it unfeasible for us to continue using our Digicert code signing certificate for signing these dynamically generated installers. While we have already transitioned to using Digicert's HSM to store our private key, this approach now incurs a cost for each executable signed. Given the volume of dynamic EXEs we currently generate and sign for all our customers, currently around 250,000 per month as of May 2024, this would result in costs around $62,000.00 USD per month\u2014an unsustainable increase from the previously nonexistent cost. Please note that the Inno Setup installer ( tacticalagent-vX.X.X-windows-arch.exe ), utilized by both the Powershell and Manual installation methods, as well as the agent update method, will continue to be signed with our Digicert OV code signing certificate. The tacticalrmm.exe agent binary will also continue being signed with our Digicert OV cert. As a reminder, the dynamic EXE installer is a generally one-time use standalone program that simply serves as a convenience wrapper around the Manual installation method. It automates the process by downloading the Inno Setup installer and executing it with the necessary command-line arguments\u2014mirroring the functionality provided by the Powershell installer but delivered in an EXE format. Optional Root CA Installation for Dynamic EXE Installers: \u00b6 For those using the dynamic EXE installation method, installing Amidaware's Code Signing Root CA on your system before you attempt installation can help ensure a smoother installation process. This step is entirely optional and is not needed for existing agents of if you use any of the other installation methods. To install the Root CA, you can run the following PowerShell command (as admin): Invoke-WebRequest -Uri \"https://amidaware.com/amidaware-root.crt\" -OutFile \"amida-root.crt\" ; Import-Certificate -FilePath \"amida-root.crt\" -CertStoreLocation Cert :\\ LocalMachine \\ Root","title":"Code Signing"},{"location":"code_signing/#code-signing","text":"Version added: Tactical RMM v0.6.0 / Agent v1.5.0 (April 2021) Tactical RMM agents are now code signed ! To get access to code signed agents (which also includes Linux/macOS agents) and Single Sign-On , you must be a Sponsor with a minimum monthly Tier 1 sponsorship. To get access to our Reporting feature, you must be a sponsor with a minimum monthly Tier 2 sponsorship. Exceptions will be made for Founders and Non-Profits which will only require Tier 1. One token is valid for 1 self hosted instance. If you have more than 1 instance please contact support for pricing options. Once you have become a Sponsor , open a support ticket and choose the \"Code Signing Request\" layout. Select the payment method you paid with from the dropdown. If you sponsored via Stripe or Paypal and your contact email is different from the email you used to pay, please let us know that in the ticket. Enter the API subdomain you will be using for your instance (e.g. api.example.com ). If you already have an existing token and want to switch your sponsorship from github to stripe/paypal, make sure to mention that in the ticket description and include your github username. Don't forget to also cancel your github sponsorship after you have successfully setup Paypal/Stripe. If you have joined our Discord and would like to be added to the sponsors role, include your Discord username as well. Please allow up to 24 hours for a response.","title":"Code Signing"},{"location":"code_signing/#how-does-it-work","text":"Every time you generate an agent or an agent does a self-update, your self-hosted instance sends a request to Tactical's code signing servers with your auth token. If the token is valid, the server sends you back a code signed agent. If not, it sends you back the un-signed agent. If you think your auth token has been compromised or stolen then please open a ticket to get a new token / invalidate the old one.","title":"How does it work?"},{"location":"code_signing/#why-should-i-pay-for-code-signing","text":"Code signing costs a lot of money. OV code signing requires a legitimate legal business...Amidaware was setup for this purpose. Code signing + operating a business costs thousands of dollars a year. It helps the project move forward and it can supports devs spending time on it, they have lives, wives, jobs and kids which all demands attention. It should stop bad actors using it maliciously. It helps with Antivirus products detecting it as being malicious.","title":"Why should I pay for Code Signing?"},{"location":"code_signing/#tactical-rmm-is-getting-flagged-as-pua-or-virus-will-this-fix-it","text":"Getting a code signed agent helps, but it is not guaranteed to eliminate this entirely. This is because AVs are unpredictable, changing all the time, constantly making new decisions and rules, telling you one thing and doing another, all doing different things in slightly different ways, etc. However, the best way to submit a whitelisting request to your AV for the TRMM agent... is having a code signed exe to submit. Right click \"C:\\Program Files\\TacticalAgent\\tacticalrmm.exe\" > Properties > Digital Signatures tab.","title":"Tactical RMM is getting flagged as PUA or virus, will this fix it?"},{"location":"code_signing/#code-signing-certificate-info","text":"Digicert OV code signing cert used by agents v2.9.0 and higher: Serial Number: 0108a89f4540182a1dfc246db61a0e89 Thumb Print: 9b38bdd4327297c8b87505119dbc8305379335bc Digicert OV code signing cert used by agents v2.7.0 and v2.8.0: Serial Number: 0f558fcc46f23aa4e2688052f3a9459f Thumb Print: 5f67afdbb3adc263965f5ed0c732e45575434449 Digicert OV code signing used by agents v2.6.2 and below: Serial Number: 0fef30ccce9d30183067160018796558 Thumb Print: 0e4844266294100d3f93e1cc7eecf61e9206bb14 Amidaware code signing used only by the dynamic EXE installer after May 3, 2024 at 4:59 PM PST: Serial Number: 0229c833c9bda1fe0a306f4b12b6ab3cf40f5790 Thumb Print: 17a930357440276bfaee23220e2f7e8f1a208556 Amidaware Code Signing Root CA : Serial Number: 2d4486df7eba0c6659d79106783caac1a83ffb41 Thumb Print: 45492337c44055dbb3910a90d4ed02758ebc0ebd","title":"Code signing certificate info"},{"location":"code_signing/#code-signing-changes-for-dynamic-exe-installers","text":"Starting May 3, 2024, at 4:59 PM PST, all new dynamically generated EXE installers, including deployment link installers, will now be signed with Amidaware's own code signing certificate, issued by Amidaware's Code Signing Root CA. This change has been prompted by industry-wide modifications to code signing practices, which now necessitate the use of hardware tokens or HSMs (Hardware Security Modules). These requirements make it unfeasible for us to continue using our Digicert code signing certificate for signing these dynamically generated installers. While we have already transitioned to using Digicert's HSM to store our private key, this approach now incurs a cost for each executable signed. Given the volume of dynamic EXEs we currently generate and sign for all our customers, currently around 250,000 per month as of May 2024, this would result in costs around $62,000.00 USD per month\u2014an unsustainable increase from the previously nonexistent cost. Please note that the Inno Setup installer ( tacticalagent-vX.X.X-windows-arch.exe ), utilized by both the Powershell and Manual installation methods, as well as the agent update method, will continue to be signed with our Digicert OV code signing certificate. The tacticalrmm.exe agent binary will also continue being signed with our Digicert OV cert. As a reminder, the dynamic EXE installer is a generally one-time use standalone program that simply serves as a convenience wrapper around the Manual installation method. It automates the process by downloading the Inno Setup installer and executing it with the necessary command-line arguments\u2014mirroring the functionality provided by the Powershell installer but delivered in an EXE format.","title":"Code Signing Changes for Dynamic EXE Installers"},{"location":"code_signing/#optional-root-ca-installation-for-dynamic-exe-installers","text":"For those using the dynamic EXE installation method, installing Amidaware's Code Signing Root CA on your system before you attempt installation can help ensure a smoother installation process. This step is entirely optional and is not needed for existing agents of if you use any of the other installation methods. To install the Root CA, you can run the following PowerShell command (as admin): Invoke-WebRequest -Uri \"https://amidaware.com/amidaware-root.crt\" -OutFile \"amida-root.crt\" ; Import-Certificate -FilePath \"amida-root.crt\" -CertStoreLocation Cert :\\ LocalMachine \\ Root","title":"Optional Root CA Installation for Dynamic EXE Installers:"},{"location":"contributing/","text":"Contributing \u00b6 Contributing to the Docs \u00b6 The source of the docs are https://github.com/amidaware/trmm-docs Docs are built with MKDocs for Material Please refer to the docs README for instructions on how to build and serve the docs locally. Open your browser and navigate to http://yourserverip:8005 Add/edit markdown files in the docs/docs folder and you'll see live changes at the url above. Edit docs/mkdocs.yml to edit structure and add new files. Full MKDocs documentation here Once finished, create a pull request to the main branch for review. Contributing using GitHub Codespaces \u00b6 Devcontainers is an open specification for developing with a preconfigured container setup. With devcontainers, you don't need SSH keys, git clone , or deal with the usual \"local setup\" tasks. Everything is configured in the container and you connect to it remotely. GitHub Codespaces is GitHub's version of devcontainers. Authentication is provided via your GitHub account. Before you start a Codespace, there are a few settings you should to be aware of. Cost and spending limit \u00b6 GitHub provides 120 core hours and 15 GB-month storage for free accounts. Please read GitHub's notes in detail to understand how much that provides. For clarity, here is the explanation of GB-month storage and core hour compute usage. The GB-month unit of storage is a time-based measurement, 1 GB-month being 1 GB of storage usage for one whole month. The disk space used by all of your codespaces and prebuilds is assessed once an hour and your current GB-month usage is recalculated. Therefore, while you have codespaces and prebuilds, your GB-month usage will increase throughout the month. For example, if the storage totals 15 GB, and remains unchanged throughout your monthly billing cycle, then you will have used 7.5 GB halfway through the month, and 15 GB at the end of the month. For more information, see \"About billing for storage usage\" later in this article. A \"core hour\" is a measure used for included compute usage. To calculate core hours, multiply the number of hours for which a codespace has been active by the multiplier in the pricing table later in this article. For the basic machine types, the multiplier is the number of processor cores in the machine that hosts the codespace. For example, if you use a 2-core machine for your codespace and it's active for an hour, you have used 2 core hours. If you use an 8-core machine for an hour, you have used 8 core hours. If you use an 8-core machine for two hours, you have used 16 core hours. By default, the spending limit is $0. This means the devcontainer will stop after the free tier has been exhausted. Creating the codespace \u00b6 Codespaces are created by clicking the code button and then the Codespaces tab. Codespaces are specific to a branch! If needed, create a new branch for your changes. Clicking the + will create the Codespace. Codespaces are paid for by you using the spencing limit mentioned above. This screenshot is from my account where I already have a codespace on this branch, scaling pancake . Using the Codespace \u00b6 It takes about 15 seconds for the Codespace to start in the browser. If you want to use Code on the desktop, click the Codespaces in the lower left corner (to open the command menu at top) and selection the option to \"Open in VS Code Desktop\". Once VS Code is open on the desktop, you can close the browser tab. Committing your code \u00b6 As stated above, you don't need SSH keys to commit your changes. The Codespace is already authenticated with your GitHub account, and git push \"just works(tm)\". Of course you still need to git add --update or git add . followed by git commit --message \"Some descriptive message for your change\" . Stopping the Codespace \u00b6 After committing your message, stop the Codespace by clicking the Codespaces in the lower left corner (to open the command menu at top) and selection the option to \"Stop Current Codespace\". See the screenshot above. Deleting the Codespace \u00b6 Since you are billed for storage on a GB-month basis, it's best to delete the Codespace. Codespaces are disposable! Go to https://github.com/codespaces/ to view all your codespaces. Clicking on the Codespace will launch it! Instead, click the kebab menu on the right and select Delete. Help! Something's wrong \u00b6 Remember, Codespaces are disposable! If something is wrong, go to your Codespace dashboard, https://github.com/codespaces/ , and delete the Codespace. Uncommitted changes will be deleted. Create another Codespace and try again. Wrapping up \u00b6 Codespaces help the developer workflow but it doesn't replace the pull request process. You still need to submit the pull request like you normally would. The main advantage of using Codespaces is not having to git clone the repository.","title":"Contributing to Docs"},{"location":"contributing/#contributing","text":"","title":"Contributing"},{"location":"contributing/#contributing-to-the-docs","text":"The source of the docs are https://github.com/amidaware/trmm-docs Docs are built with MKDocs for Material Please refer to the docs README for instructions on how to build and serve the docs locally. Open your browser and navigate to http://yourserverip:8005 Add/edit markdown files in the docs/docs folder and you'll see live changes at the url above. Edit docs/mkdocs.yml to edit structure and add new files. Full MKDocs documentation here Once finished, create a pull request to the main branch for review.","title":"Contributing to the Docs"},{"location":"contributing/#contributing-using-github-codespaces","text":"Devcontainers is an open specification for developing with a preconfigured container setup. With devcontainers, you don't need SSH keys, git clone , or deal with the usual \"local setup\" tasks. Everything is configured in the container and you connect to it remotely. GitHub Codespaces is GitHub's version of devcontainers. Authentication is provided via your GitHub account. Before you start a Codespace, there are a few settings you should to be aware of.","title":"Contributing using GitHub Codespaces"},{"location":"contributing/#cost-and-spending-limit","text":"GitHub provides 120 core hours and 15 GB-month storage for free accounts. Please read GitHub's notes in detail to understand how much that provides. For clarity, here is the explanation of GB-month storage and core hour compute usage. The GB-month unit of storage is a time-based measurement, 1 GB-month being 1 GB of storage usage for one whole month. The disk space used by all of your codespaces and prebuilds is assessed once an hour and your current GB-month usage is recalculated. Therefore, while you have codespaces and prebuilds, your GB-month usage will increase throughout the month. For example, if the storage totals 15 GB, and remains unchanged throughout your monthly billing cycle, then you will have used 7.5 GB halfway through the month, and 15 GB at the end of the month. For more information, see \"About billing for storage usage\" later in this article. A \"core hour\" is a measure used for included compute usage. To calculate core hours, multiply the number of hours for which a codespace has been active by the multiplier in the pricing table later in this article. For the basic machine types, the multiplier is the number of processor cores in the machine that hosts the codespace. For example, if you use a 2-core machine for your codespace and it's active for an hour, you have used 2 core hours. If you use an 8-core machine for an hour, you have used 8 core hours. If you use an 8-core machine for two hours, you have used 16 core hours. By default, the spending limit is $0. This means the devcontainer will stop after the free tier has been exhausted.","title":"Cost and spending limit"},{"location":"contributing/#creating-the-codespace","text":"Codespaces are created by clicking the code button and then the Codespaces tab. Codespaces are specific to a branch! If needed, create a new branch for your changes. Clicking the + will create the Codespace. Codespaces are paid for by you using the spencing limit mentioned above. This screenshot is from my account where I already have a codespace on this branch, scaling pancake .","title":"Creating the codespace"},{"location":"contributing/#using-the-codespace","text":"It takes about 15 seconds for the Codespace to start in the browser. If you want to use Code on the desktop, click the Codespaces in the lower left corner (to open the command menu at top) and selection the option to \"Open in VS Code Desktop\". Once VS Code is open on the desktop, you can close the browser tab.","title":"Using the Codespace"},{"location":"contributing/#committing-your-code","text":"As stated above, you don't need SSH keys to commit your changes. The Codespace is already authenticated with your GitHub account, and git push \"just works(tm)\". Of course you still need to git add --update or git add . followed by git commit --message \"Some descriptive message for your change\" .","title":"Committing your code"},{"location":"contributing/#stopping-the-codespace","text":"After committing your message, stop the Codespace by clicking the Codespaces in the lower left corner (to open the command menu at top) and selection the option to \"Stop Current Codespace\". See the screenshot above.","title":"Stopping the Codespace"},{"location":"contributing/#deleting-the-codespace","text":"Since you are billed for storage on a GB-month basis, it's best to delete the Codespace. Codespaces are disposable! Go to https://github.com/codespaces/ to view all your codespaces. Clicking on the Codespace will launch it! Instead, click the kebab menu on the right and select Delete.","title":"Deleting the Codespace"},{"location":"contributing/#help-somethings-wrong","text":"Remember, Codespaces are disposable! If something is wrong, go to your Codespace dashboard, https://github.com/codespaces/ , and delete the Codespace. Uncommitted changes will be deleted. Create another Codespace and try again.","title":"Help! Something's wrong"},{"location":"contributing/#wrapping-up","text":"Codespaces help the developer workflow but it doesn't replace the pull request process. You still need to submit the pull request like you normally would. The main advantage of using Codespaces is not having to git clone the repository.","title":"Wrapping up"},{"location":"contributing_community_scripts/","text":"Community Scripts \u00b6 Script Library Naming Conventions \u00b6 File Names \u00b6 Under /scripts the file name should generally follow this format: (Platform)_(Category or Function)_(What It Does).xxx Platforms for now are: all_ Win_ nix_bash_ nix_zsh_macos_ nix_sh_ nix_sh_truenas_ nix_bash_freepbx_ ios_ android_ Good filename examples include: Win_Azure_Mars_Cloud_Backup_Status.ps1 Win_AzureAD_Check_Connection_Status.ps1 Win_Network_DHCP_Set.bat Win_Network_DNS_Set_to_1.1.1.2.ps1 Info This is so that at a glance you can see if there is already a script with that function, and you can avoid duplication of functionality. Name Field (in community_scripts.json) \u00b6 Consider they are viewed in 3 different locations: Script Manager List View (sortable by any column) Folder View (Grouped by Categories) Run or Add Script Running scripts manually or adding tasks (or adding in Automation Manager). Info A good max length is 50-60 chars or less for display in these 3 locations. Make sure your Name roughly follows the order of file naming as above. Category or Function - What It Does Consider how the alphabetic sort will affect display. JSON Field Names \u00b6 Example { \"guid\" : \"bfd61545-839b-45da-8b3d-75ffc4d43272\" , \"filename\" : \"Win_Sophos_EndpointProtection_Install.ps1\" , \"submittedBy\" : \"https://github.com/bc24fl/\" , \"name\" : \"Sophos Endpoint Protection Install\" , \"description\" : \"Installs Sophos Endpoint Protection via the Sophos API. Products include Antivirus, InterceptX, MDR, Device Encryption. The script requires API credentials, Custom Fields, and Arguments passed to script. See script comments for details\" , \"args\" : [ \"-ClientId {{client.SophosClientId}}\" , \"-ClientSecret {{client.SophosClientSecret}}\" , \"-TenantName {{client.SophosTenantName}}\" , \"-Products antivirus,intercept\" ], \"default_timeout\" : \"3600\" , \"supported_platforms\" : [ \"windows\" ], \"shell\" : \"powershell\" , \"category\" : \"TRMM (Win):3rd Party Software\" }, Notes guid : Must be unique in the file. filename : File with that name must exist in /scripts folder. submittedBy : Get credit for creator. args : default args pre-filled in arg field. default_timeout : Sets the default timeout for the script. supported_platforms : [\"windows\", \"linux\", \"darwin\"] (case sensitive, if missing, assumes all platforms are supported). darwin =macOS shell : can be powershell , cmd , python or shell syntax : See scripting category : Preferably use existing categories and format structure for library sorting, add new as needed. Making Script Files \u00b6 Use the template to start with a good common structure. Good Habits \u00b6 Try and make them fully self-contained. If they pull data from elsewhere, create comment notes at the top with references for others to audit/validate. Good folder locations to use for standardized things: c:\\ProgramData\\TacticalRMM\\ c:\\ProgramData\\TacticalRMM\\scripts c:\\ProgramData\\TacticalRMM\\toolbox c:\\ProgramData\\TacticalRMM\\logs c:\\ProgramData\\TacticalRMM\\temp Command Parameters are good. Optional command parameters for extra functions are better. param ( [string] $Username , [switch] $log , [int] $numberofdays , [array] $packages #separated by commas ) Add standardized Comment headers to scripts (include the first 2, more if appropriate): <# .SYNOPSIS Short description eg Check IP address .DESCRIPTION Long description eg Checks IP address on all local network adapters, and returns results .PARAMETER xx Inputs to this cmdlet (if any) .PARAMETER yy Inputs to this cmdlet (if any) .OUTPUTS Output from this cmdlet (if any) .EXAMPLE Example of how to use this cmdlet .EXAMPLE Another example of how to use this cmdlet .NOTES v1.0 1/1/2020 username notes General notes #> Bad Habits \u00b6 Assumes non-standard configurations. Doesn't play well with other community scripts (reused names etc.). Script Parameters \u00b6 Useful Reference Script Examples \u00b6 RunAsUser (since Tactical RMM runs as system) https://github.com/amidaware/community-scripts/blob/main/scripts/Win_Display_Message_To_User.ps1 Command Parameter Ninja https://github.com/amidaware/community-scripts/blob/main/scripts/Win_ScreenConnectAIO.ps1 Optional Command Parameters and testing for errors https://github.com/amidaware/community-scripts/blob/main/scripts/Win_Computer_Rename.ps1 Volunteers Needed \u00b6 If you want to contribute back to the project there are a lot of scripts that need some TLC (Tender Loving Care) please peruse thru them in The Script WIP (Work In Progress): https://github.com/amidaware/community-scripts/tree/main/scripts_wip Discuss/ask questions in the Discord group here . What you can add is: Add standardized Comment headers per above. Consolidate and parameterize scripts where appropriate. Add $ExitCode and error conditions as appropriate. Contact @silversword in Discord if you need help doing Github additions/edits/adding to the community Library and have questions about Script Library Naming Conventions .","title":"Contributing to Community Scripts"},{"location":"contributing_community_scripts/#community-scripts","text":"","title":"Community Scripts"},{"location":"contributing_community_scripts/#script-library-naming-conventions","text":"","title":"Script Library Naming Conventions"},{"location":"contributing_community_scripts/#file-names","text":"Under /scripts the file name should generally follow this format: (Platform)_(Category or Function)_(What It Does).xxx Platforms for now are: all_ Win_ nix_bash_ nix_zsh_macos_ nix_sh_ nix_sh_truenas_ nix_bash_freepbx_ ios_ android_ Good filename examples include: Win_Azure_Mars_Cloud_Backup_Status.ps1 Win_AzureAD_Check_Connection_Status.ps1 Win_Network_DHCP_Set.bat Win_Network_DNS_Set_to_1.1.1.2.ps1 Info This is so that at a glance you can see if there is already a script with that function, and you can avoid duplication of functionality.","title":"File Names"},{"location":"contributing_community_scripts/#name-field-in-community_scriptsjson","text":"Consider they are viewed in 3 different locations: Script Manager List View (sortable by any column) Folder View (Grouped by Categories) Run or Add Script Running scripts manually or adding tasks (or adding in Automation Manager). Info A good max length is 50-60 chars or less for display in these 3 locations. Make sure your Name roughly follows the order of file naming as above. Category or Function - What It Does Consider how the alphabetic sort will affect display.","title":"Name Field (in community_scripts.json)"},{"location":"contributing_community_scripts/#json-field-names","text":"Example { \"guid\" : \"bfd61545-839b-45da-8b3d-75ffc4d43272\" , \"filename\" : \"Win_Sophos_EndpointProtection_Install.ps1\" , \"submittedBy\" : \"https://github.com/bc24fl/\" , \"name\" : \"Sophos Endpoint Protection Install\" , \"description\" : \"Installs Sophos Endpoint Protection via the Sophos API. Products include Antivirus, InterceptX, MDR, Device Encryption. The script requires API credentials, Custom Fields, and Arguments passed to script. See script comments for details\" , \"args\" : [ \"-ClientId {{client.SophosClientId}}\" , \"-ClientSecret {{client.SophosClientSecret}}\" , \"-TenantName {{client.SophosTenantName}}\" , \"-Products antivirus,intercept\" ], \"default_timeout\" : \"3600\" , \"supported_platforms\" : [ \"windows\" ], \"shell\" : \"powershell\" , \"category\" : \"TRMM (Win):3rd Party Software\" }, Notes guid : Must be unique in the file. filename : File with that name must exist in /scripts folder. submittedBy : Get credit for creator. args : default args pre-filled in arg field. default_timeout : Sets the default timeout for the script. supported_platforms : [\"windows\", \"linux\", \"darwin\"] (case sensitive, if missing, assumes all platforms are supported). darwin =macOS shell : can be powershell , cmd , python or shell syntax : See scripting category : Preferably use existing categories and format structure for library sorting, add new as needed.","title":"JSON Field Names"},{"location":"contributing_community_scripts/#making-script-files","text":"Use the template to start with a good common structure.","title":"Making Script Files"},{"location":"contributing_community_scripts/#good-habits","text":"Try and make them fully self-contained. If they pull data from elsewhere, create comment notes at the top with references for others to audit/validate. Good folder locations to use for standardized things: c:\\ProgramData\\TacticalRMM\\ c:\\ProgramData\\TacticalRMM\\scripts c:\\ProgramData\\TacticalRMM\\toolbox c:\\ProgramData\\TacticalRMM\\logs c:\\ProgramData\\TacticalRMM\\temp Command Parameters are good. Optional command parameters for extra functions are better. param ( [string] $Username , [switch] $log , [int] $numberofdays , [array] $packages #separated by commas ) Add standardized Comment headers to scripts (include the first 2, more if appropriate): <# .SYNOPSIS Short description eg Check IP address .DESCRIPTION Long description eg Checks IP address on all local network adapters, and returns results .PARAMETER xx Inputs to this cmdlet (if any) .PARAMETER yy Inputs to this cmdlet (if any) .OUTPUTS Output from this cmdlet (if any) .EXAMPLE Example of how to use this cmdlet .EXAMPLE Another example of how to use this cmdlet .NOTES v1.0 1/1/2020 username notes General notes #>","title":"Good Habits"},{"location":"contributing_community_scripts/#bad-habits","text":"Assumes non-standard configurations. Doesn't play well with other community scripts (reused names etc.).","title":"Bad Habits"},{"location":"contributing_community_scripts/#script-parameters","text":"","title":"Script Parameters"},{"location":"contributing_community_scripts/#useful-reference-script-examples","text":"RunAsUser (since Tactical RMM runs as system) https://github.com/amidaware/community-scripts/blob/main/scripts/Win_Display_Message_To_User.ps1 Command Parameter Ninja https://github.com/amidaware/community-scripts/blob/main/scripts/Win_ScreenConnectAIO.ps1 Optional Command Parameters and testing for errors https://github.com/amidaware/community-scripts/blob/main/scripts/Win_Computer_Rename.ps1","title":"Useful Reference Script Examples"},{"location":"contributing_community_scripts/#volunteers-needed","text":"If you want to contribute back to the project there are a lot of scripts that need some TLC (Tender Loving Care) please peruse thru them in The Script WIP (Work In Progress): https://github.com/amidaware/community-scripts/tree/main/scripts_wip Discuss/ask questions in the Discord group here . What you can add is: Add standardized Comment headers per above. Consolidate and parameterize scripts where appropriate. Add $ExitCode and error conditions as appropriate. Contact @silversword in Discord if you need help doing Github additions/edits/adding to the community Library and have questions about Script Library Naming Conventions .","title":"Volunteers Needed"},{"location":"contributing_reporting_templates/","text":"Reporting Templates \u00b6 Template Names \u00b6 Templates should be named in such a way it is clear and concise for others to know what the template does. Prerequisites \u00b6 Before you begin, ensure you are: Familiar with the report data available in Tactical RMM. Read more about reporting here . Up and running with Tactical RMM, for testing purposes (you can safely use your live environment). Creating a new/unique Report Template, existing templates are available here . Once your template is ready: \u00b6 Fork the Tactical RMM template repository on GitHub. Export your template from Tactical RMM Reporting manager by right clicking and clicking export. Create a new template in the templates folder and copy and paste in code or upload exported template. Create a pull request with a brief description of your template and why it's useful. The Tactical RMM team will review your submission and test it, provide tests pass etc your PR will be accepted, if theres issues feedback will be provided in the comments section of the PR. Thank you for contributing to Tactical RMM and helping enhance the reporting capabilities for all users!","title":"Contributing to Reporting Templates"},{"location":"contributing_reporting_templates/#reporting-templates","text":"","title":"Reporting Templates"},{"location":"contributing_reporting_templates/#template-names","text":"Templates should be named in such a way it is clear and concise for others to know what the template does.","title":"Template Names"},{"location":"contributing_reporting_templates/#prerequisites","text":"Before you begin, ensure you are: Familiar with the report data available in Tactical RMM. Read more about reporting here . Up and running with Tactical RMM, for testing purposes (you can safely use your live environment). Creating a new/unique Report Template, existing templates are available here .","title":"Prerequisites"},{"location":"contributing_reporting_templates/#once-your-template-is-ready","text":"Fork the Tactical RMM template repository on GitHub. Export your template from Tactical RMM Reporting manager by right clicking and clicking export. Create a new template in the templates folder and copy and paste in code or upload exported template. Create a pull request with a brief description of your template and why it's useful. The Tactical RMM team will review your submission and test it, provide tests pass etc your PR will be accepted, if theres issues feedback will be provided in the comments section of the PR. Thank you for contributing to Tactical RMM and helping enhance the reporting capabilities for all users!","title":"Once your template is ready:"},{"location":"contributing_using_a_remote_server/","text":"Contributing Using a Remote Server \u00b6 The below instructions are for a non-production server that has Tactical RMM installed and configured with a real domain. You can then use your own GitHub to push changes to and then submit a PR request to the TRMM develop branch ( https://github.com/amidaware/tacticalrmm ). Warning Do not attempt development of this kind on your production server. Install Tactical RMM \u00b6 Traditional install \u00b6 This guide assumes you have done a Traditional Install . This is going to install your dev server at latest release version. If you want it to install latest dev, edit install.sh and remove this line after git clone https://github.com/amidaware/tacticalrmm.git /rmm/ cd /rmm git config user.email \"admin@example.com\" git config user.name \"Bob\" git checkout master # <-------------Remove this line to be on latest code Install VS Code and Extensions \u00b6 Download VS Code here Download the Remote SSH Development Pack here Configure the Remote Development Server \u00b6 Connect \u00b6 The remote development server should already have Tactical RMM installed via the traditional install method. After the extension pack is installed in VS Code you will have a new button at the bottom-left of VS Code. You can select it and add your remote SSH host information. Configure \u00b6 Configuring a remote server for development work is necessary so that as you make changes to the code base it will automatically refresh and you can see the changes. It may be necessary to do a full browser refresh if changing styles. Disable RMM and Daphne services: sudo systemctl disable --now rmm.service && sudo systemctl disable --now daphne.service Open /rmm/web/.env and make it look like the following: DEV_URL = \"http://api.EXAMPLE.COM:8000\" APP_URL = \"http://rmm.EXAMPLE.COM:8080\" Open /rmm/api/tacticalrmm/tacticalrmm/local_settings.py Change: DEBUG = True ADMIN_ENABLED = True Comment out: #CORS_ORIGIN_WHITELIST = [ # \"https://rmm.example.com\" #] Add CORS_ORIGIN_ALLOW_ALL = True Add the following to the ALLOWED HOSTS: rmm.EXAMPLE.COM Install dev requirements and start Python \u00b6 cd /rmm/api/tacticalrmm/ source ../env/bin/activate Install requirements pip install -r requirements-dev.txt -r requirements-test.txt Merge migrations python manage.py migrate Start Django backend python manage.py runserver 0 :8000 Get frontend working \u00b6 Open a new terminal and compile Quasar frontend. Change to any directory (your user home folder in Linux is fine) cd ~ git clone https://github.com/amidaware/tacticalrmm-web.git cd tacticalrmm-web Create .env file and put in: PROD_URL = \"https://api.example.com\" DEV_URL = \"http://api.example.com:8000\" APP_URL = \"http://rmm.example.com:8080\" DEV_PORT = \"8080\" USE_HTTPS = false Close and save. npm install npm install -g @quasar/cli quasar dev Info If you receive a CORS error when trying to log into your server via localhost or IP, try the following: rm -rf node_modules .quasar npm install quasar dev You should now have a localhost and IP based URL to view that has a live reload feature. Configure GitHub with VS Code \u00b6 Info Make sure you are submitting Pull Requests to the develop branch. Follow this guide for a good introduction to GitHub: https://www.digitalocean.com/community/tutorials/how-to-create-a-pull-request-on-github Make sure you are on develop branch: git checkout develop git remote -v should look like the following: origin https://github.com/yourusername/tacticalrmm.git ( fetch ) origin https://github.com/yourusername/tacticalrmm.git ( push ) upstream https://github.com/amidaware/tacticalrmm.git ( fetch ) upstream https://github.com/amidaware/tacticalrmm.git ( push ) You will commit the change to your GitHub and from within GitHub you can then submit a PR to the develop branch of wh1te909 Tactical RMM. More to come...","title":"Contributing using a Remote Server"},{"location":"contributing_using_a_remote_server/#contributing-using-a-remote-server","text":"The below instructions are for a non-production server that has Tactical RMM installed and configured with a real domain. You can then use your own GitHub to push changes to and then submit a PR request to the TRMM develop branch ( https://github.com/amidaware/tacticalrmm ). Warning Do not attempt development of this kind on your production server.","title":"Contributing Using a Remote Server"},{"location":"contributing_using_a_remote_server/#install-tactical-rmm","text":"","title":"Install Tactical RMM"},{"location":"contributing_using_a_remote_server/#traditional-install","text":"This guide assumes you have done a Traditional Install . This is going to install your dev server at latest release version. If you want it to install latest dev, edit install.sh and remove this line after git clone https://github.com/amidaware/tacticalrmm.git /rmm/ cd /rmm git config user.email \"admin@example.com\" git config user.name \"Bob\" git checkout master # <-------------Remove this line to be on latest code","title":"Traditional install"},{"location":"contributing_using_a_remote_server/#install-vs-code-and-extensions","text":"Download VS Code here Download the Remote SSH Development Pack here","title":"Install VS Code and Extensions"},{"location":"contributing_using_a_remote_server/#configure-the-remote-development-server","text":"","title":"Configure the Remote Development Server"},{"location":"contributing_using_a_remote_server/#connect","text":"The remote development server should already have Tactical RMM installed via the traditional install method. After the extension pack is installed in VS Code you will have a new button at the bottom-left of VS Code. You can select it and add your remote SSH host information.","title":"Connect"},{"location":"contributing_using_a_remote_server/#configure","text":"Configuring a remote server for development work is necessary so that as you make changes to the code base it will automatically refresh and you can see the changes. It may be necessary to do a full browser refresh if changing styles. Disable RMM and Daphne services: sudo systemctl disable --now rmm.service && sudo systemctl disable --now daphne.service Open /rmm/web/.env and make it look like the following: DEV_URL = \"http://api.EXAMPLE.COM:8000\" APP_URL = \"http://rmm.EXAMPLE.COM:8080\" Open /rmm/api/tacticalrmm/tacticalrmm/local_settings.py Change: DEBUG = True ADMIN_ENABLED = True Comment out: #CORS_ORIGIN_WHITELIST = [ # \"https://rmm.example.com\" #] Add CORS_ORIGIN_ALLOW_ALL = True Add the following to the ALLOWED HOSTS: rmm.EXAMPLE.COM","title":"Configure"},{"location":"contributing_using_a_remote_server/#install-dev-requirements-and-start-python","text":"cd /rmm/api/tacticalrmm/ source ../env/bin/activate Install requirements pip install -r requirements-dev.txt -r requirements-test.txt Merge migrations python manage.py migrate Start Django backend python manage.py runserver 0 :8000","title":"Install dev requirements and start Python"},{"location":"contributing_using_a_remote_server/#get-frontend-working","text":"Open a new terminal and compile Quasar frontend. Change to any directory (your user home folder in Linux is fine) cd ~ git clone https://github.com/amidaware/tacticalrmm-web.git cd tacticalrmm-web Create .env file and put in: PROD_URL = \"https://api.example.com\" DEV_URL = \"http://api.example.com:8000\" APP_URL = \"http://rmm.example.com:8080\" DEV_PORT = \"8080\" USE_HTTPS = false Close and save. npm install npm install -g @quasar/cli quasar dev Info If you receive a CORS error when trying to log into your server via localhost or IP, try the following: rm -rf node_modules .quasar npm install quasar dev You should now have a localhost and IP based URL to view that has a live reload feature.","title":"Get frontend working"},{"location":"contributing_using_a_remote_server/#configure-github-with-vs-code","text":"Info Make sure you are submitting Pull Requests to the develop branch. Follow this guide for a good introduction to GitHub: https://www.digitalocean.com/community/tutorials/how-to-create-a-pull-request-on-github Make sure you are on develop branch: git checkout develop git remote -v should look like the following: origin https://github.com/yourusername/tacticalrmm.git ( fetch ) origin https://github.com/yourusername/tacticalrmm.git ( push ) upstream https://github.com/amidaware/tacticalrmm.git ( fetch ) upstream https://github.com/amidaware/tacticalrmm.git ( push ) You will commit the change to your GitHub and from within GitHub you can then submit a PR to the develop branch of wh1te909 Tactical RMM. More to come...","title":"Configure GitHub with VS Code"},{"location":"contributing_using_browser/","text":"Contributing Using Web Browser \u00b6 Getting Started \u00b6 Fork project in Github \u00b6 This is making a duplicate of the code under your Github that you can edit https://github.com/amidaware/tacticalrmm Make edits \u00b6 Make some changes Request your changes to be pulled into the primary repo (Pull Request) \u00b6 This is taking your changes and requesting they be integrated into the Tactical RMM develop branch. Check the status of your PR \u00b6 Look at a summary of the changes you've requested, monitor for them to be accepted, or commented on. https://github.com/amidaware/tacticalrmm/pulls Once they're accepted you can either: * Delete your fork * Sync your local fork Sync your fork \u00b6 Bring changes from original repo to your fork so you're current with changes made in original Github repo: ...or Official Github Docs Lather, rinse, repeat \u00b6 Go to Step 2. and contribute some more. Notes \u00b6 After your changes are accepted, they won't be live in Tactical RMM until there is a new release . #BePatient","title":"Contributing using a browser"},{"location":"contributing_using_browser/#contributing-using-web-browser","text":"","title":"Contributing Using Web Browser"},{"location":"contributing_using_browser/#getting-started","text":"","title":"Getting Started"},{"location":"contributing_using_browser/#fork-project-in-github","text":"This is making a duplicate of the code under your Github that you can edit https://github.com/amidaware/tacticalrmm","title":"Fork project in Github"},{"location":"contributing_using_browser/#make-edits","text":"Make some changes","title":"Make edits"},{"location":"contributing_using_browser/#request-your-changes-to-be-pulled-into-the-primary-repo-pull-request","text":"This is taking your changes and requesting they be integrated into the Tactical RMM develop branch.","title":"Request your changes to be pulled into the primary repo (Pull Request)"},{"location":"contributing_using_browser/#check-the-status-of-your-pr","text":"Look at a summary of the changes you've requested, monitor for them to be accepted, or commented on. https://github.com/amidaware/tacticalrmm/pulls Once they're accepted you can either: * Delete your fork * Sync your local fork","title":"Check the status of your PR"},{"location":"contributing_using_browser/#sync-your-fork","text":"Bring changes from original repo to your fork so you're current with changes made in original Github repo: ...or Official Github Docs","title":"Sync your fork"},{"location":"contributing_using_browser/#lather-rinse-repeat","text":"Go to Step 2. and contribute some more.","title":"Lather, rinse, repeat"},{"location":"contributing_using_browser/#notes","text":"After your changes are accepted, they won't be live in Tactical RMM until there is a new release . #BePatient","title":"Notes"},{"location":"contributing_using_docker/","text":"Contributing Using Docker \u00b6 Install WSL2 \u00b6 https://docs.microsoft.com/en-us/windows/wsl/install-win10 Install Docker Desktop \u00b6 https://www.docker.com/products/docker-desktop Configure Docker \u00b6 Make sure it doesn't look like this: This is better: Check and Make Sure WSL is v2 and Set Ubuntu as Default \u00b6 https://docs.microsoft.com/en-us/windows/wsl/install-win10#set-your-distribution-version-to-wsl-1-or-wsl-2 Install VS Code Extensions \u00b6 Remote - Containers Docker Connect to WSL and Clone Your Github Fork \u00b6 Create .env File \u00b6 Under .devcontainer duplicate: .env.example as .env Customize to your tastes (it doesn't need to be internet configured, just add records in your hosts file) eg: 127.0.0.1 rmm.example.com api.example.com mesh.example.com Launch your Dev VM in Docker \u00b6 Right-click docker-compose.yml and choose Compose Up . Wait, it'll take a while as docker downloads all the modules and gets running. Develop \u00b6 You're operational! Note Self-signed certs are in your dev environment. Navigate to https://api.example.com and https://rmm.example.com and accept the self signed certs to get rid of errors. View MKDocks Live Edits in Browser \u00b6 Change stuff in /docs/docs/ MKDocs is Exposed on Port: 8005 Open: http://rmm.example.com:8005/ Note If you add new MKDocs extensions you might need to: - docker compose down - Then delete the /api/tacticalrmm/env/ folder. - Then docker compose up and it will download / rebuild new extensions. View Django Administration \u00b6 Open: http://rmm.example.com:8000/admin/","title":"Contributing using Docker"},{"location":"contributing_using_docker/#contributing-using-docker","text":"","title":"Contributing Using Docker"},{"location":"contributing_using_docker/#install-wsl2","text":"https://docs.microsoft.com/en-us/windows/wsl/install-win10","title":"Install WSL2"},{"location":"contributing_using_docker/#install-docker-desktop","text":"https://www.docker.com/products/docker-desktop","title":"Install Docker Desktop"},{"location":"contributing_using_docker/#configure-docker","text":"Make sure it doesn't look like this: This is better:","title":"Configure Docker"},{"location":"contributing_using_docker/#check-and-make-sure-wsl-is-v2-and-set-ubuntu-as-default","text":"https://docs.microsoft.com/en-us/windows/wsl/install-win10#set-your-distribution-version-to-wsl-1-or-wsl-2","title":"Check and Make Sure WSL is v2 and Set Ubuntu as Default"},{"location":"contributing_using_docker/#install-vs-code-extensions","text":"Remote - Containers Docker","title":"Install VS Code Extensions"},{"location":"contributing_using_docker/#connect-to-wsl-and-clone-your-github-fork","text":"","title":"Connect to WSL and Clone Your Github Fork"},{"location":"contributing_using_docker/#create-env-file","text":"Under .devcontainer duplicate: .env.example as .env Customize to your tastes (it doesn't need to be internet configured, just add records in your hosts file) eg: 127.0.0.1 rmm.example.com api.example.com mesh.example.com","title":"Create .env File"},{"location":"contributing_using_docker/#launch-your-dev-vm-in-docker","text":"Right-click docker-compose.yml and choose Compose Up . Wait, it'll take a while as docker downloads all the modules and gets running.","title":"Launch your Dev VM in Docker"},{"location":"contributing_using_docker/#develop","text":"You're operational! Note Self-signed certs are in your dev environment. Navigate to https://api.example.com and https://rmm.example.com and accept the self signed certs to get rid of errors.","title":"Develop"},{"location":"contributing_using_docker/#view-mkdocks-live-edits-in-browser","text":"Change stuff in /docs/docs/ MKDocs is Exposed on Port: 8005 Open: http://rmm.example.com:8005/ Note If you add new MKDocs extensions you might need to: - docker compose down - Then delete the /api/tacticalrmm/env/ folder. - Then docker compose up and it will download / rebuild new extensions.","title":"View MKDocks Live Edits in Browser"},{"location":"contributing_using_docker/#view-django-administration","text":"Open: http://rmm.example.com:8000/admin/","title":"View Django Administration"},{"location":"contributing_using_vscode/","text":"Contributing Using VS Code \u00b6 Getting Started \u00b6 Install VS Code \u00b6 https://code.visualstudio.com/download Fork Project in Github \u00b6 This is making a duplicate of the code under your Github that you can edit. https://github.com/amidaware/tacticalrmm Add your (forked) repo to VS Code \u00b6 Clone repository. Login to your Github. Choose local folder. Install extra VS Code Extensions \u00b6 GitLens Remote - SSH Open Terminal \u00b6 https://code.visualstudio.com/docs/editor/integrated-terminal Ctrl+` Configure a remote for your fork (in VS Code) \u00b6 https://docs.github.com/en/github/collaborating-with-issues-and-pull-requests/configuring-a-remote-for-a-fork Configure your local fork and tell it where the original code repo is so you can compare and merge updates later when official repo is updated. Check repos: git remote -v Add upstream repo: git remote add upstream https://github.com/amidaware/tacticalrmm Confirm changes: git remote -v Contribute code \u00b6 Make changes to something. Commit (update something) and notate what you did. Push (from your local VS Code to your github fork). Open your browser and look at your repo (It should reflect your commit). Request your changes to be pulled into the primary repo (Pull Request) \u00b6 In your browser, create a pull request. Sync your local fork \u00b6 https://docs.github.com/en/github/collaborating-with-issues-and-pull-requests/syncing-a-fork Bring changes from original repo to your local VS Code copy so you're current with changes made in original Github repo: In VS Code open TERMINAL: Ctrl+` Tell git to pull from the GitHub upstream repo all new changes into your local directory: git pull --rebase upstream develop Push your local updated copy to your Github fork \u00b6 Then you're push ing that updated local repo to your online Github fork: Verify and Repeat \u00b6 Check your Github fork in browser, it should be up to date now with original. Repeat 6 or 7 as necessary. Reference \u00b6 Customizing the Admin Web Interface \u00b6 Created using Quasar, it's all your .vue files in web/src/components/modals/agents/RunScript.vue . Learn stuff here: https://quasar.dev/","title":"Contributing using VS Code"},{"location":"contributing_using_vscode/#contributing-using-vs-code","text":"","title":"Contributing Using VS Code"},{"location":"contributing_using_vscode/#getting-started","text":"","title":"Getting Started"},{"location":"contributing_using_vscode/#install-vs-code","text":"https://code.visualstudio.com/download","title":"Install VS Code"},{"location":"contributing_using_vscode/#fork-project-in-github","text":"This is making a duplicate of the code under your Github that you can edit. https://github.com/amidaware/tacticalrmm","title":"Fork Project in Github"},{"location":"contributing_using_vscode/#add-your-forked-repo-to-vs-code","text":"Clone repository. Login to your Github. Choose local folder.","title":"Add your (forked) repo to VS Code"},{"location":"contributing_using_vscode/#install-extra-vs-code-extensions","text":"GitLens Remote - SSH","title":"Install extra VS Code Extensions"},{"location":"contributing_using_vscode/#open-terminal","text":"https://code.visualstudio.com/docs/editor/integrated-terminal Ctrl+`","title":"Open Terminal"},{"location":"contributing_using_vscode/#configure-a-remote-for-your-fork-in-vs-code","text":"https://docs.github.com/en/github/collaborating-with-issues-and-pull-requests/configuring-a-remote-for-a-fork Configure your local fork and tell it where the original code repo is so you can compare and merge updates later when official repo is updated. Check repos: git remote -v Add upstream repo: git remote add upstream https://github.com/amidaware/tacticalrmm Confirm changes: git remote -v","title":"Configure a remote for your fork (in VS Code)"},{"location":"contributing_using_vscode/#contribute-code","text":"Make changes to something. Commit (update something) and notate what you did. Push (from your local VS Code to your github fork). Open your browser and look at your repo (It should reflect your commit).","title":"Contribute code"},{"location":"contributing_using_vscode/#request-your-changes-to-be-pulled-into-the-primary-repo-pull-request","text":"In your browser, create a pull request.","title":"Request your changes to be pulled into the primary repo (Pull Request)"},{"location":"contributing_using_vscode/#sync-your-local-fork","text":"https://docs.github.com/en/github/collaborating-with-issues-and-pull-requests/syncing-a-fork Bring changes from original repo to your local VS Code copy so you're current with changes made in original Github repo: In VS Code open TERMINAL: Ctrl+` Tell git to pull from the GitHub upstream repo all new changes into your local directory: git pull --rebase upstream develop","title":"Sync your local fork"},{"location":"contributing_using_vscode/#push-your-local-updated-copy-to-your-github-fork","text":"Then you're push ing that updated local repo to your online Github fork:","title":"Push your local updated copy to your Github fork"},{"location":"contributing_using_vscode/#verify-and-repeat","text":"Check your Github fork in browser, it should be up to date now with original. Repeat 6 or 7 as necessary.","title":"Verify and Repeat"},{"location":"contributing_using_vscode/#reference","text":"","title":"Reference"},{"location":"contributing_using_vscode/#customizing-the-admin-web-interface","text":"Created using Quasar, it's all your .vue files in web/src/components/modals/agents/RunScript.vue . Learn stuff here: https://quasar.dev/","title":"Customizing the Admin Web Interface"},{"location":"faq/","text":"FAQ \u00b6 How do I get Reporting? \u00b6 Please see the Reporting FAQ Help! I've been hacked and there are weird agents appearing in my Tactical RMM! \u00b6 No, you haven't. You used the Dynamic EXE/Deployment EXE installation method, and the installer was scanned by an antivirus. It didn't recognize the exe. You have the option enabled to submit unknown applications for analysis. They ran it against their virtualization testing cluster. To prevent this from happening : either turn off file uploads in your AV settings, or use the Powershell or Manual install methods. Here are some examples of what that looks like. Can I _ ___? \u00b6 If you've been sent a link to this, we are not going to allow or support things like your request. The reason is because it would facilitate people avoiding to pay for/supporting Tactical RMM for these/similar premium paid features. So the answer is No. I'd like to be able to _ ___? \u00b6 If you've been sent a link to this, it's possible that we could support this but it would most likely be a paid premium feature. Please contact Commercial Support to discuss further. Why isn't the Code Signing free? \u00b6 It is recommended because it helps the project mature, Tactical is source available and free. Community support is also free on top of this we have spent a lot of time developing the docs, please follow them! With many source available (and similar) projects devs get bored of them because they don't make money out of it. So here is your reasons to pay for code signing and also why it was discussed and implemented. Code signing costs a lot of money. OV code signing requires a legitimate legal business...Amidaware was setup for this purpose. Code signing + operating a business costs thousands of dollars a year. It helps the project move forward and it can support devs spending time on it, they have lives, wives, jobs and kids which all demands attention. It should stop bad actors using it maliciously. It helps with AVs detecting it as anything malicious. We had github sponsors up for many months before code signing. Very few people donated, some $5 and $10. maybe $40 a month. Once we announced code signing, sponsors came in like crazy, and many people upgraded their $5 to $55 so whilst everyone believes people would gladly donate, that's just not the case. We already tried. Is Tactical RMM Compliant with Privacy Laws? \u00b6 Tactical, as a self-hosted solution, offers the potential for GDPR and HIPAA compliance as well as many other privacy laws, but its adherence largely depends on the hosting environment and how it's configured. Since you have full control over the hosting, you bear a significant responsibility for compliance. By default, the Tactical server collects essential information which is displayed in the dashboard on each agent. None of this data is transmitted outside of the Tactical server, enhancing data security. Encryption at rest is possible at the file system level, contingent on your hosting infrastructure. Additionally, all communications between the Tactical server and your clients are encrypted in transit, enhancing security. Furthermore, Tactical incorporates an audit log that records all actions, assisting in tracking and ensuring accountability. However, it's crucial to be cautious about collector scripts, as they could potentially alter data collection practices, potentially leading to non-compliance if not carefully managed and configured in accordance with GDPR and HIPAA regulations. Therefore, maintaining a vigilant approach to configuration and monitoring is essential when utilizing Tactical for compliance purposes. Linux/macOS Agents \u00b6 Why do I see? Missing code signing token 400: Bad Request You must have a paid code signing certificate while Linux/macOS support is in the post-alpha/beta: Code signing makes these installs easy and is a benefit offered to code signing sponsors. So become a sponsor and enjoy the easy life DIYer can read thru the code and... DIY. This is primarily for 2 reasons: As this has been a sponsorship goal it seems only fair that those who contributed to make this a reality get early access to easy agent installs. We're looking for good bug reports from active users to get these agent into production ready code. Who is Amidaware Inc? \u00b6 The Legal entity behind Tactical RMM. How do I move an agent to another client/site? \u00b6 Right click on the agent > Edit agent. Then select the new site from the dropdown. Is it possible to use XXX with Tactical RMM \u00b6 While it may be possible to use XXX, we have not configured it and therefore it is Unsupported . We cannot help you configure XXX as it pertains to your environment . Is it possible to use XXX proxy server with Tactical RMM \u00b6 If you wish to stray from the easy install of a standard install in a VPS, you need to have the knowledge on how to troubleshoot your own custom environment. The most common reasons you're running a proxy are: Because you only have a single public IP and you already have something on Port 443. Workaround : Get another public IP from your ISP. Because you want to monitor traffic for security reasons: You're a Networking Wizard . There are some implementations that others have done, but be aware it is Unsupported and if you're requesting help in Discord please let us know in advance. I want to use a different port other than 443 \u00b6 I want to use a different port for Tactical RMM because my public IP on 443 is currently being used by something else. PAT (aka Port Address Translation) That is not possible at this time. Your options are: Run in a VPS Get another Public IP from your ISP Use another proxy server in an unsupported configuration Run TRMM in a SDWAN like Netmaker/Zerotier/Tailscale/Sunbird etc How do I do X feature in the web UI? \u00b6 A lot of features in the web UI are hidden behind right-click menus. Almost everything has a right click menu so if you don't see something, try right clicking on it. Can I run Tactical RMM locally behind NAT without exposing my RMM server to the internet? \u00b6 Yes, you will just need to setup local DNS for the 3 subdomains, either by editing host files on all your agents or through a local DNS server. Similarly asked: Can I use onsite DNS servers (I don\u2019t want my server accessible from the internet). Yes, you can use (only) internal DNS (if you want) for api, mesh and rmm domains. You don't have to put these records in your public DNS servers. The Let's Encrypt DNS TXT wildcard cert request process does not require any inbound connection from the internet (port forwarding etc) to be enabled. This does not expose your RMM server to the internet in any way. I forgot my username to login to the web UI, how can I find it? \u00b6 Do the following as the tactical user which will list all user accounts: tactical@trmm:~$ /rmm/api/env/bin/python /rmm/api/tacticalrmm/manage.py shell Python 3 .11.3 ( main, Apr 9 2023 , 04 :41:05 ) [ GCC 10 .2.1 20210110 ] on linux Type \"help\" , \"copyright\" , \"credits\" or \"license\" for more information. ( InteractiveConsole ) >>> from accounts.models import User >>> User.objects.exclude ( is_installer_user = True ) .filter ( agent__isnull = True ) How do I make another superuser for logging into rmm. \u00b6 cd /rmm/api/tacticalrmm/ source ../env/bin/activate python manage.py createsuperuser I am locked out of the web UI. How do I reset my password? \u00b6 SSH into your server and run: /rmm/api/env/bin/python /rmm/api/tacticalrmm/manage.py reset_password <username> How do I reset password or 2 factor token? \u00b6 From TRMM Admin GUI \u00b6 From the web UI, click Settings > User Administration and then right-click on a user: From SSH \u00b6 Login with SSH using your install ID (eg tactical ) and Reset Password OR Reset 2FA token for a TRMM user standard docker /rmm/api/env/bin/python /rmm/api/tacticalrmm/manage.py reset_2fa <username> docker exec -it trmm-backend /bin/bash Then simply log out of the web UI and next time the user logs in they will be redirected to the 2FA setup page which will present a barcode to be scanned with the Authenticator app. How do I recover my MeshCentral login credentials? \u00b6 From Tactical's web UI: Settings > Global Settings > MeshCentral Copy the username, then ssh into the server and run: cd /meshcentral/ sudo systemctl stop meshcentral.service node node_modules/meshcentral --resetaccount <username> --pass <newpassword> sudo systemctl start meshcentral.service to reset Mesh password for user. Warning Resetting the default admin in mesh will break agent installs if you don't also update the mesh connection into in Settings > General > Meshcentral and make sure it's working DNS can't find record \u00b6 Q. My DNS isn\u2019t working. A. Make sure it\u2019s correctly formatted, as most DNS providers add in the domain automatically. License FAQ \u00b6 If you're not certain if your business use case is allowed by the license please open a ticket and let us know how you're planning on using it. Can I password protect the uninstalling of the TRMM agent? \u00b6 From the client / agent side: Installing and uninstalling software is part of system administration. Administrators can install / uninstall. Users cannot. Configure your system appropriately. From the TRMM Admin panel: Use Permissions Manager to restrict your techs permissions. To hide Tactical RMM from the Control Panel's Program and Features, use the following PowerShell command: Set-ItemProperty -Path 'HKLM:\\SOFTWARE\\WOW6432Node\\Microsoft\\Windows\\CurrentVersion\\Uninstall\\{0D34D278-5FAF-4159-A4A0-4E2D2C08139D}_is1' -Name 'SystemComponent' -Value 1 -Type DWord To undo the changes and make Tactical RMM visible again in the Control Panel, use the following PowerShell command: Remove-ItemProperty -Path 'HKLM:\\SOFTWARE\\WOW6432Node\\Microsoft\\Windows\\CurrentVersion\\Uninstall\\{0D34D278-5FAF-4159-A4A0-4E2D2C08139D}_is1' -Name 'SystemComponent' Alternative: Check out some scripts I want to move and/or migrate my server? How do I do it? \u00b6 Changing a public IP or private LAN IP address? \u00b6 TRMM doesn't care about that. TRMM uses DNS, and only the 3 configured DNS names used during install. Make them right, and you'll be fine (with a backup/restore script if necessary) Are you keeping the same DNS names? \u00b6 Use the backup and restore process. Note It's best practice to make sure you're running the latest version before running the backup script, and make sure you have the latest backup script. It does change. Are you wanting to change the DNS names on the server? \u00b6 We warned you you should choose the right DNS names during install. There is no supported way to do this because of the complexities involved. We do offer a paid migration service, please open a ticket for pricing. If you want to try it yourself, your best bet is to use another service outside of TRMM to uninstall and reinstall your agents to a new TRMM server. Then you'll need to migrate all your automation policies, alert policies, patch policies, custom scripts, reports, users, user permissions, user settings, custom fields, api keys, key store items, email configuration, sms configuration etc from your old TRMM server to the new one manually. If you received this link \u00b6 You have asked for assistance in Discord or Github, and you have not provided enough information . Please provide the following information by submitting this , or copy/pasting this text and answering the questions: Install type (Standard/Docker) and amount of RAM on server? Did you deviate IN ANY WAY from these Standard server install instructions https://docs.tacticalrmm.com/install_server/ ? Did you deviate IN ANY WAY from these Docker server install instructions https://docs.tacticalrmm.com/install_docker/ ? Where is the server (VPS/onprem)? New/old install? Rough age of TRMM server (days/weeks/months)? Server Install Specific questions: What OS/version is TRMM installed on. Using a real domain? Did letsencrypt finalize and work? Have you looked at the troubleshooting steps to see if something there is appropriate to you situation? Test DNS from an agent etc. https://docs.tacticalrmm.com/troubleshooting/ Run the Server Troubleshooting Script and DM the person (from @Support) that is working with you https://docs.tacticalrmm.com/troubleshooting/#server-troubleshooting-script What kind of ssl certs? Let's Encrypt, or purchased. Check Expiry date of your certificates in the browser (at https://rmm.example.com/ ) Network Troubleshooting Are you using a proxy? Are you a wizard? See https://docs.tacticalrmm.com/unsupported_guidelines/ If so, what's in the network between agent and server? Agent Troubleshooting Is there ANY 3rd party Antivirus installed on the computer? Is there any network based filtering/AV filtering? Asking yourself questions like: When did it go from working to broken? What changed during that time? This will help you. We can not help you until we understand your setup. Just posting an error log is not enough information. You can help yourself by running this and this that will test your server and and tell you common problems. If you would like us to do it for you please contact support . Should I use a Check or a Task? \u00b6 Checks Run every 2-1440 mins (1 day max) Results are naturally graphed, and not logged to the agents \"History\" tab Tasks Is run using the Windows Task Scheduler on the agent. Although multiple times/day can be scheduled it's complicated and will clutter up your \"History\" tab. Best for periodic script runs that run daily/weekly/monthly/onboarding/once Is Tactical RMM vulnerable to Log4j \u00b6 No. Terminology \u00b6 Code Signing: A windows .exe cryptographic signing process that can't be forged. The only want to reliably whitelist your TRMM agent is to have a Code signed agent that you can give the signers public key to your security software to whitelist. Mac/Linux Pre-Compiled binaries: Are provided by Amidaware so you can install agents on Mac and Linux. This requires sponsorship . If you want to test Mac/Linux agents please contact support and open a ticket to request a 7 day hosted trial.","title":"FAQ"},{"location":"faq/#faq","text":"","title":"FAQ"},{"location":"faq/#how-do-i-get-reporting","text":"Please see the Reporting FAQ","title":"How do I get Reporting?"},{"location":"faq/#help-ive-been-hacked-and-there-are-weird-agents-appearing-in-my-tactical-rmm","text":"No, you haven't. You used the Dynamic EXE/Deployment EXE installation method, and the installer was scanned by an antivirus. It didn't recognize the exe. You have the option enabled to submit unknown applications for analysis. They ran it against their virtualization testing cluster. To prevent this from happening : either turn off file uploads in your AV settings, or use the Powershell or Manual install methods. Here are some examples of what that looks like.","title":"Help! I've been hacked and there are weird agents appearing in my Tactical RMM!"},{"location":"faq/#can-i-____","text":"If you've been sent a link to this, we are not going to allow or support things like your request. The reason is because it would facilitate people avoiding to pay for/supporting Tactical RMM for these/similar premium paid features. So the answer is No.","title":"Can I ____?"},{"location":"faq/#id-like-to-be-able-to-____","text":"If you've been sent a link to this, it's possible that we could support this but it would most likely be a paid premium feature. Please contact Commercial Support to discuss further.","title":"I'd like to be able to ____?"},{"location":"faq/#why-isnt-the-code-signing-free","text":"It is recommended because it helps the project mature, Tactical is source available and free. Community support is also free on top of this we have spent a lot of time developing the docs, please follow them! With many source available (and similar) projects devs get bored of them because they don't make money out of it. So here is your reasons to pay for code signing and also why it was discussed and implemented. Code signing costs a lot of money. OV code signing requires a legitimate legal business...Amidaware was setup for this purpose. Code signing + operating a business costs thousands of dollars a year. It helps the project move forward and it can support devs spending time on it, they have lives, wives, jobs and kids which all demands attention. It should stop bad actors using it maliciously. It helps with AVs detecting it as anything malicious. We had github sponsors up for many months before code signing. Very few people donated, some $5 and $10. maybe $40 a month. Once we announced code signing, sponsors came in like crazy, and many people upgraded their $5 to $55 so whilst everyone believes people would gladly donate, that's just not the case. We already tried.","title":"Why isn't the Code Signing free?"},{"location":"faq/#is-tactical-rmm-compliant-with-privacy-laws","text":"Tactical, as a self-hosted solution, offers the potential for GDPR and HIPAA compliance as well as many other privacy laws, but its adherence largely depends on the hosting environment and how it's configured. Since you have full control over the hosting, you bear a significant responsibility for compliance. By default, the Tactical server collects essential information which is displayed in the dashboard on each agent. None of this data is transmitted outside of the Tactical server, enhancing data security. Encryption at rest is possible at the file system level, contingent on your hosting infrastructure. Additionally, all communications between the Tactical server and your clients are encrypted in transit, enhancing security. Furthermore, Tactical incorporates an audit log that records all actions, assisting in tracking and ensuring accountability. However, it's crucial to be cautious about collector scripts, as they could potentially alter data collection practices, potentially leading to non-compliance if not carefully managed and configured in accordance with GDPR and HIPAA regulations. Therefore, maintaining a vigilant approach to configuration and monitoring is essential when utilizing Tactical for compliance purposes.","title":"Is Tactical RMM Compliant with Privacy Laws?"},{"location":"faq/#linuxmacos-agents","text":"Why do I see? Missing code signing token 400: Bad Request You must have a paid code signing certificate while Linux/macOS support is in the post-alpha/beta: Code signing makes these installs easy and is a benefit offered to code signing sponsors. So become a sponsor and enjoy the easy life DIYer can read thru the code and... DIY. This is primarily for 2 reasons: As this has been a sponsorship goal it seems only fair that those who contributed to make this a reality get early access to easy agent installs. We're looking for good bug reports from active users to get these agent into production ready code.","title":"Linux/macOS Agents"},{"location":"faq/#who-is-amidaware-inc","text":"The Legal entity behind Tactical RMM.","title":"Who is Amidaware Inc?"},{"location":"faq/#how-do-i-move-an-agent-to-another-clientsite","text":"Right click on the agent > Edit agent. Then select the new site from the dropdown.","title":"How do I move an agent to another client/site?"},{"location":"faq/#is-it-possible-to-use-xxx-with-tactical-rmm","text":"While it may be possible to use XXX, we have not configured it and therefore it is Unsupported . We cannot help you configure XXX as it pertains to your environment .","title":"Is it possible to use XXX with Tactical RMM"},{"location":"faq/#is-it-possible-to-use-xxx-proxy-server-with-tactical-rmm","text":"If you wish to stray from the easy install of a standard install in a VPS, you need to have the knowledge on how to troubleshoot your own custom environment. The most common reasons you're running a proxy are: Because you only have a single public IP and you already have something on Port 443. Workaround : Get another public IP from your ISP. Because you want to monitor traffic for security reasons: You're a Networking Wizard . There are some implementations that others have done, but be aware it is Unsupported and if you're requesting help in Discord please let us know in advance.","title":"Is it possible to use XXX proxy server with Tactical RMM"},{"location":"faq/#i-want-to-use-a-different-port-other-than-443","text":"I want to use a different port for Tactical RMM because my public IP on 443 is currently being used by something else. PAT (aka Port Address Translation) That is not possible at this time. Your options are: Run in a VPS Get another Public IP from your ISP Use another proxy server in an unsupported configuration Run TRMM in a SDWAN like Netmaker/Zerotier/Tailscale/Sunbird etc","title":"I want to use a different port other than 443"},{"location":"faq/#how-do-i-do-x-feature-in-the-web-ui","text":"A lot of features in the web UI are hidden behind right-click menus. Almost everything has a right click menu so if you don't see something, try right clicking on it.","title":"How do I do X feature in the web UI?"},{"location":"faq/#can-i-run-tactical-rmm-locally-behind-nat-without-exposing-my-rmm-server-to-the-internet","text":"Yes, you will just need to setup local DNS for the 3 subdomains, either by editing host files on all your agents or through a local DNS server. Similarly asked: Can I use onsite DNS servers (I don\u2019t want my server accessible from the internet). Yes, you can use (only) internal DNS (if you want) for api, mesh and rmm domains. You don't have to put these records in your public DNS servers. The Let's Encrypt DNS TXT wildcard cert request process does not require any inbound connection from the internet (port forwarding etc) to be enabled. This does not expose your RMM server to the internet in any way.","title":"Can I run Tactical RMM locally behind NAT without exposing my RMM server to the internet?"},{"location":"faq/#i-forgot-my-username-to-login-to-the-web-ui-how-can-i-find-it","text":"Do the following as the tactical user which will list all user accounts: tactical@trmm:~$ /rmm/api/env/bin/python /rmm/api/tacticalrmm/manage.py shell Python 3 .11.3 ( main, Apr 9 2023 , 04 :41:05 ) [ GCC 10 .2.1 20210110 ] on linux Type \"help\" , \"copyright\" , \"credits\" or \"license\" for more information. ( InteractiveConsole ) >>> from accounts.models import User >>> User.objects.exclude ( is_installer_user = True ) .filter ( agent__isnull = True )","title":"I forgot my username to login to the web UI, how can I find it?"},{"location":"faq/#how-do-i-make-another-superuser-for-logging-into-rmm","text":"cd /rmm/api/tacticalrmm/ source ../env/bin/activate python manage.py createsuperuser","title":"How do I make another superuser for logging into rmm."},{"location":"faq/#i-am-locked-out-of-the-web-ui-how-do-i-reset-my-password","text":"SSH into your server and run: /rmm/api/env/bin/python /rmm/api/tacticalrmm/manage.py reset_password <username>","title":"I am locked out of the web UI. How do I reset my password?"},{"location":"faq/#how-do-i-reset-password-or-2-factor-token","text":"","title":"How do I reset password or 2 factor token?"},{"location":"faq/#from-trmm-admin-gui","text":"From the web UI, click Settings > User Administration and then right-click on a user:","title":"From TRMM Admin GUI"},{"location":"faq/#from-ssh","text":"Login with SSH using your install ID (eg tactical ) and Reset Password OR Reset 2FA token for a TRMM user standard docker /rmm/api/env/bin/python /rmm/api/tacticalrmm/manage.py reset_2fa <username> docker exec -it trmm-backend /bin/bash Then simply log out of the web UI and next time the user logs in they will be redirected to the 2FA setup page which will present a barcode to be scanned with the Authenticator app.","title":"From SSH"},{"location":"faq/#how-do-i-recover-my-meshcentral-login-credentials","text":"From Tactical's web UI: Settings > Global Settings > MeshCentral Copy the username, then ssh into the server and run: cd /meshcentral/ sudo systemctl stop meshcentral.service node node_modules/meshcentral --resetaccount <username> --pass <newpassword> sudo systemctl start meshcentral.service to reset Mesh password for user. Warning Resetting the default admin in mesh will break agent installs if you don't also update the mesh connection into in Settings > General > Meshcentral and make sure it's working","title":"How do I recover my MeshCentral login credentials?"},{"location":"faq/#dns-cant-find-record","text":"Q. My DNS isn\u2019t working. A. Make sure it\u2019s correctly formatted, as most DNS providers add in the domain automatically.","title":"DNS can't find record"},{"location":"faq/#license-faq","text":"If you're not certain if your business use case is allowed by the license please open a ticket and let us know how you're planning on using it.","title":"License FAQ"},{"location":"faq/#can-i-password-protect-the-uninstalling-of-the-trmm-agent","text":"From the client / agent side: Installing and uninstalling software is part of system administration. Administrators can install / uninstall. Users cannot. Configure your system appropriately. From the TRMM Admin panel: Use Permissions Manager to restrict your techs permissions. To hide Tactical RMM from the Control Panel's Program and Features, use the following PowerShell command: Set-ItemProperty -Path 'HKLM:\\SOFTWARE\\WOW6432Node\\Microsoft\\Windows\\CurrentVersion\\Uninstall\\{0D34D278-5FAF-4159-A4A0-4E2D2C08139D}_is1' -Name 'SystemComponent' -Value 1 -Type DWord To undo the changes and make Tactical RMM visible again in the Control Panel, use the following PowerShell command: Remove-ItemProperty -Path 'HKLM:\\SOFTWARE\\WOW6432Node\\Microsoft\\Windows\\CurrentVersion\\Uninstall\\{0D34D278-5FAF-4159-A4A0-4E2D2C08139D}_is1' -Name 'SystemComponent' Alternative: Check out some scripts","title":"Can I password protect the uninstalling of the TRMM agent?"},{"location":"faq/#i-want-to-move-andor-migrate-my-server-how-do-i-do-it","text":"","title":"I want to move and/or migrate my server? How do I do it?"},{"location":"faq/#changing-a-public-ip-or-private-lan-ip-address","text":"TRMM doesn't care about that. TRMM uses DNS, and only the 3 configured DNS names used during install. Make them right, and you'll be fine (with a backup/restore script if necessary)","title":"Changing a public IP or private LAN IP address?"},{"location":"faq/#are-you-keeping-the-same-dns-names","text":"Use the backup and restore process. Note It's best practice to make sure you're running the latest version before running the backup script, and make sure you have the latest backup script. It does change.","title":"Are you keeping the same DNS names?"},{"location":"faq/#are-you-wanting-to-change-the-dns-names-on-the-server","text":"We warned you you should choose the right DNS names during install. There is no supported way to do this because of the complexities involved. We do offer a paid migration service, please open a ticket for pricing. If you want to try it yourself, your best bet is to use another service outside of TRMM to uninstall and reinstall your agents to a new TRMM server. Then you'll need to migrate all your automation policies, alert policies, patch policies, custom scripts, reports, users, user permissions, user settings, custom fields, api keys, key store items, email configuration, sms configuration etc from your old TRMM server to the new one manually.","title":"Are you wanting to change the DNS names on the server?"},{"location":"faq/#if-you-received-this-link","text":"You have asked for assistance in Discord or Github, and you have not provided enough information . Please provide the following information by submitting this , or copy/pasting this text and answering the questions: Install type (Standard/Docker) and amount of RAM on server? Did you deviate IN ANY WAY from these Standard server install instructions https://docs.tacticalrmm.com/install_server/ ? Did you deviate IN ANY WAY from these Docker server install instructions https://docs.tacticalrmm.com/install_docker/ ? Where is the server (VPS/onprem)? New/old install? Rough age of TRMM server (days/weeks/months)? Server Install Specific questions: What OS/version is TRMM installed on. Using a real domain? Did letsencrypt finalize and work? Have you looked at the troubleshooting steps to see if something there is appropriate to you situation? Test DNS from an agent etc. https://docs.tacticalrmm.com/troubleshooting/ Run the Server Troubleshooting Script and DM the person (from @Support) that is working with you https://docs.tacticalrmm.com/troubleshooting/#server-troubleshooting-script What kind of ssl certs? Let's Encrypt, or purchased. Check Expiry date of your certificates in the browser (at https://rmm.example.com/ ) Network Troubleshooting Are you using a proxy? Are you a wizard? See https://docs.tacticalrmm.com/unsupported_guidelines/ If so, what's in the network between agent and server? Agent Troubleshooting Is there ANY 3rd party Antivirus installed on the computer? Is there any network based filtering/AV filtering? Asking yourself questions like: When did it go from working to broken? What changed during that time? This will help you. We can not help you until we understand your setup. Just posting an error log is not enough information. You can help yourself by running this and this that will test your server and and tell you common problems. If you would like us to do it for you please contact support .","title":"If you received this link"},{"location":"faq/#should-i-use-a-check-or-a-task","text":"Checks Run every 2-1440 mins (1 day max) Results are naturally graphed, and not logged to the agents \"History\" tab Tasks Is run using the Windows Task Scheduler on the agent. Although multiple times/day can be scheduled it's complicated and will clutter up your \"History\" tab. Best for periodic script runs that run daily/weekly/monthly/onboarding/once","title":"Should I use a Check or a Task?"},{"location":"faq/#is-tactical-rmm-vulnerable-to-log4j","text":"No.","title":"Is Tactical RMM vulnerable to Log4j"},{"location":"faq/#terminology","text":"Code Signing: A windows .exe cryptographic signing process that can't be forged. The only want to reliably whitelist your TRMM agent is to have a Code signed agent that you can give the signers public key to your security software to whitelist. Mac/Linux Pre-Compiled binaries: Are provided by Amidaware so you can install agents on Mac and Linux. This requires sponsorship . If you want to test Mac/Linux agents please contact support and open a ticket to request a 7 day hosted trial.","title":"Terminology"},{"location":"guide_gettingstarted/","text":"Getting Started Guide \u00b6 Install the server, choose the best path Post Install \u00b6 Setup Email Alerts Setup SMS Alerts Create a Default Alert Template and assign (either Global, or using Automation Policies) Set Server Preferences Under Global Settings > General Review User Settings Set Retention Policies under Under Global Settings > Retention Read thru the FAQ Setup AV exclusions in the appropriate Anti-virus products for your managed base Setup Automation Policies \u00b6 Default Profile for workstations Settings menu > Global Settings > General Default Profile for servers Settings menu > Global Settings > General Decide on Windows Updates policy Create Onboarding Tasks and apply according to how you want to manage them. Multiple Users \u00b6 Setup Permission Manager Settings menu > Permission Manager Add users to Permission Groups Settings menu > User Administration Every 75 days \u00b6 TRMM Server OS updates Reboot TRMM server Renew LetsEncrypt Certs Update TRMM Check your backups. Especially scheduled ones and make sure you're running the latest ./backup.sh (You're reading the release notes at every update, right?) Bi-annually \u00b6 Clean up old agents Don't do these things \u00b6 Your Tactical NoNo List Clone agents with TRMM agent installed. Make your master image with no TRMM agent installed, script the install for first time boot after imaging. Do in place distro upgrades or move vms to new hardware, instead use Backup and Restore scripts to move the server to new vm's Run install.sh or restore.sh more than once. They're one-shot scripts to be ran on clean VMs only. Use TRMMs powers for Evil. Just don't, make better choices!","title":"Getting Started Guide"},{"location":"guide_gettingstarted/#getting-started-guide","text":"Install the server, choose the best path","title":"Getting Started Guide"},{"location":"guide_gettingstarted/#post-install","text":"Setup Email Alerts Setup SMS Alerts Create a Default Alert Template and assign (either Global, or using Automation Policies) Set Server Preferences Under Global Settings > General Review User Settings Set Retention Policies under Under Global Settings > Retention Read thru the FAQ Setup AV exclusions in the appropriate Anti-virus products for your managed base","title":"Post Install"},{"location":"guide_gettingstarted/#setup-automation-policies","text":"Default Profile for workstations Settings menu > Global Settings > General Default Profile for servers Settings menu > Global Settings > General Decide on Windows Updates policy Create Onboarding Tasks and apply according to how you want to manage them.","title":"Setup Automation Policies"},{"location":"guide_gettingstarted/#multiple-users","text":"Setup Permission Manager Settings menu > Permission Manager Add users to Permission Groups Settings menu > User Administration","title":"Multiple Users"},{"location":"guide_gettingstarted/#every-75-days","text":"TRMM Server OS updates Reboot TRMM server Renew LetsEncrypt Certs Update TRMM Check your backups. Especially scheduled ones and make sure you're running the latest ./backup.sh (You're reading the release notes at every update, right?)","title":"Every 75 days"},{"location":"guide_gettingstarted/#bi-annually","text":"Clean up old agents","title":"Bi-annually"},{"location":"guide_gettingstarted/#dont-do-these-things","text":"Your Tactical NoNo List Clone agents with TRMM agent installed. Make your master image with no TRMM agent installed, script the install for first time boot after imaging. Do in place distro upgrades or move vms to new hardware, instead use Backup and Restore scripts to move the server to new vm's Run install.sh or restore.sh more than once. They're one-shot scripts to be ran on clean VMs only. Use TRMMs powers for Evil. Just don't, make better choices!","title":"Don't do these things"},{"location":"howitallworks/","text":"How It All Works \u00b6 Understanding TRMM \u00b6 Anything you configure: scripts, tasks, patching, etc is queued and scheduled on the server to do something. Everything that is queued, happens immediately when agents are online. The agent gets a NATS command, the server tells it to do xyz and it does it. When agents are not connected to the server nothing happens. The Windows Task Scheduler says do x at some time, what it's asked to do is get x command from the server. If the server is offline, nothing happens. If an agent comes online, every x interval (Windows Update, pending tasks etc) check and see if there is something for me to do that I missed while I was offline. When that time occurs (eg agent sees if it needs to update itself at 35 minutes past every hour Update Agents ) it'll get requested on the online agent. That's the simplified general rule for everything TRMM. Image Source Still need graphics for: 1. Agent installer steps 2. Agent checks / tasks and how they work on the workstation/interact with server Server \u00b6 Has a Postgres database located here: Django Admin Description A web interface for the Postgres database All Tactical RMM dependencies are listed here . A complete list of all packages used by Tactical RMM are listed here . Outbound Firewall Rules \u00b6 If you have strict outbound firewall rules these are the outbound rules needed for all functionality: Regular Use \u00b6 Access to Github for downloading and installing TRMM, and checking if new TRMM version is available to show in the admin web panel. Access to nginx.org to install Access to mongodb.org to install Access to python.org to install Access to postgresql.org to install Whatever servers Let's Encrypt uses for DNS-01 challenges Cloudflare is for the licensing servers. Server Without Code Signing Key \u00b6 No additional rules needed. Server With Code Signing Key \u00b6 No additional rules needed. System Services \u00b6 This lists the system services used by the server. Quick server health inspection cd /rmm/api/tacticalrmm/ source ../env/bin/activate for i in active reserved scheduled stats ; do celery -A tacticalrmm inspect $i ; done Nginx Web Server \u00b6 Nginx is the web server for the rmm , api , and mesh domains. All sites redirect port 80 (HTTP) to port 443 (HTTPS). nginx configuration (a.k.a. sites available) nginx configuration docs rmm.example.com api.example.com mesh.example.com default This serves the frontend website that you interact with. Config: /etc/nginx/sites-enabled/frontend.conf root: /var/www/rmm/dist Access log: /var/log/nginx/frontend-access.log Error log: /var/log/nginx/frontend-error.log TLS certificate: /etc/letsencrypt/live/example.com/fullchain.pem This serves the TRMM API for the frontend and agents. Config: /etc/nginx/sites-enabled/rmm.conf roots: /rmm/api/tacticalrmm/static/ /rmm/api/tacticalrmm/tacticalrmm/private/ Upstreams: unix://rmm/api/tacticalrmm/tacticalrmm.sock unix://rmm/daphne.sock Access log: /rmm/api/tacticalrmm/tacticalrmm/private/log/access.log Error log: /rmm/api/tacticalrmm/tacticalrmm/private/log/error.log TLS certificate: /etc/letsencrypt/live/example.com/fullchain.pem This serves MeshCentral for remote access. Config: /etc/nginx/sites-enabled/meshcentral.conf Upstream: http://127.0.0.1:4430/ Access log: /var/log/nginx/access.log (uses default) Error log: /var/log/nginx/error.log (uses default) TLS certificate: /etc/letsencrypt/live/example.com/fullchain.pem This is the default site installed with nginx. This listens on port 80 only. Config: /etc/nginx/sites-enabled/default root: /var/www/rmm/dist Access log: /var/log/nginx/access.log (uses default) Error log: /var/log/nginx/error.log (uses default) systemd config status commands standard docker Status: systemctl status --full nginx.service Stop: systemctl stop nginx.service Start: systemctl start nginx.service Restart: systemctl restart nginx.service Restart: systemctl reload nginx.service reloads the config without restarting Test config: nginx -t Listening process: ss -tulnp | grep nginx Service: nginx.service Address: 0.0.0.0 Port: 443 Exec: /usr/sbin/nginx -g 'daemon on; master_process on;' Version: 1.18.0 From the docker host view container status - docker ps --filter \"name=trmm-nginx\" View logs: docker compose logs tactical-nginx \"tail\" logs: docker compose logs tactical-nginx | tail Shell access: docker exec -it trmm-nginx /bin/bash Tactical RMM (Django uWSGI) Service \u00b6 Built on the Django framework, the Tactical RMM service is the heart of the system by serving the API for the frontend and agents. uWSGI config uWSGI docs status commands standard docker Status: systemctl status --full rmm.service Stop: systemctl stop rmm.service Start: systemctl start rmm.service Restart: systemctl restart rmm.service journalctl: \"tail\" the logs: journalctl --identifier uwsgi --follow View the logs: journalctl --identifier uwsgi --since \"30 minutes ago\" | less Debug logs for 5xx errors will be located in /rmm/api/tacticalrmm/tacticalrmm/private/log Service: rmm.service Socket: /rmm/api/tacticalrmm/tacticalrmm.sock uWSGI config: /rmm/api/tacticalrmm/app.ini Log: None Journal identifier: uwsgi Version: 2.0.18 From the docker host view container status - docker ps --filter \"name=trmm-backend\" View logs: docker compose logs tactical-backend \"tail\" logs: docker compose logs tactical-backend | tail Shell access: docker exec -it trmm-backend /bin/bash Daphne: Django Channels Daemon \u00b6 Daphne is the official ASGI HTTP / WebSocket server maintained by the Channels project . Daphne config Django Channels configuration docs status commands standard docker Status: systemctl status --full daphne.service Stop: systemctl stop daphne.service Start: systemctl start daphne.service Restart: systemctl restart daphne.service journalctl (this provides only system start/stop logs, not the actual logs): \"tail\" the logs: journalctl --identifier daphne --follow View the logs: journalctl --identifier daphne --since \"30 minutes ago\" | less Service: daphne.service Socket: /rmm/daphne.sock Exec: /rmm/api/env/bin/daphne -u /rmm/daphne.sock tacticalrmm.asgi:application Config: /rmm/api/tacticalrmm/tacticalrmm/local_settings.py Log: /rmm/api/tacticalrmm/tacticalrmm/private/log/trmm_debug.log From the docker host view container status - docker ps --filter \"name=trmm-websockets\" View logs: docker compose logs tactical-websockets \"tail\" logs: docker compose logs tactical-websockets | tail Shell access: docker exec -it trmm-websockets /bin/bash NATS Server Service \u00b6 NATS is a messaging bus for \"live\" communication between the agent and server. NATS provides the framework for the server to push commands to the agent and receive information back. NATS config NATS server configuration docs status commands standard docker Status: systemctl status --full nats.service Stop: systemctl stop nats.service Start: systemctl start nats.service Restart: systemctl restart nats.service Reload: systemctl reload nats.service reloads the config without restarting journalctl: \"tail\" the logs: journalctl --identifier nats-server --follow View the logs: journalctl --identifier nats-server --since \"30 minutes ago\" | less Listening process: ss -tulnp | grep nats-server Checking for NATS or websocket problems sudo journalctl --no-pager -u nats and sudo journalctl --no-pager -u nats-api Service: nats.service Address: 0.0.0.0 Port: 4222 (standard), 9235 (websocket) Exec: /usr/local/bin/nats-server --config /rmm/api/tacticalrmm/nats-rmm.conf Config: /rmm/api/tacticalrmm/nats-rmm.conf TLS: /etc/letsencrypt/live/example.com/fullchain.pem Log: None Version: v2.3.3 Get into bash in your docker with: docker exec -it trmm-nats /bin/bash Log: nats-api -log debug Shell access: docker exec -it trmm-nats /bin/bash NATS API Service \u00b6 NATS API config status commands standard docker Status: systemctl status --full nats-api.service Stop: systemctl stop nats-api.service Start: systemctl start nats-api.service Restart: systemctl restart nats-api.service journalctl: This application does not appear to log anything. Service: nats-api.service Exec: /usr/local/bin/nats-api --config /rmm/api/tacticalrmm/nats-api.conf Config: /rmm/api/tacticalrmm/nats-api.conf TLS: /etc/letsencrypt/live/example.com/fullchain.pem Log: None Get into bash in your docker with: docker exec -it trmm-nats /bin/bash Log: nats-api -log debug Celery Service \u00b6 Celery is a task queue focused on real-time processing and is responsible for scheduling tasks to be sent to agents. Log located at /var/log/celery Celery config Celery docs Celery configuration docs status commands standard docker Status: systemctl status --full celery.service Stop: systemctl stop celery.service Start: systemctl start celery.service Restart: systemctl restart celery.service journalctl: Celery executes sh causing the systemd identifier to be sh , thus mixing the celery and celerybeat logs together. \"tail\" the logs: journalctl --identifier sh --follow View the logs: journalctl --identifier sh --since \"30 minutes ago\" | less Tail logs: tail -F /var/log/celery/w*-*.log Service: celery.service Exec: /bin/sh -c '${CELERY_BIN} -A $CELERY_APP multi start $CELERYD_NODES --pidfile=${CELERYD_PID_FILE} --logfile=${CELERYD_LOG_FILE} --loglevel=\"${CELERYD_LOG_LEVEL}\" $CELERYD_OPTS' Config: /etc/conf.d/celery.conf Log: /var/log/celery/w*-*.log From the docker host view container status - docker ps --filter \"name=trmm-celery\" View logs: docker compose logs tactical-celery \"tail\" logs: docker compose logs tactical-celery | tail Shell access: docker exec -it trmm-celery /bin/bash Celery Beat Service \u00b6 Celery Beat is a scheduler. It kicks off tasks at regular intervals, that are then executed by available worker nodes in the cluster. Celery Beat config Celery beat docs status commands standard docker Status: systemctl status --full celerybeat.service Stop: systemctl stop celerybeat.service Start: systemctl start celerybeat.service Restart: systemctl restart celerybeat.service journalctl: Celery executes sh causing the systemd identifier to be sh , thus mixing the celery and celerybeat logs together. \"tail\" the logs: journalctl --identifier sh --follow View the logs: journalctl --identifier sh --since \"30 minutes ago\" | less Tail logs: tail -F /var/log/celery/beat.log Service: celerybeat.service Exec: /bin/sh -c '${CELERY_BIN} -A ${CELERY_APP} beat --pidfile=${CELERYBEAT_PID_FILE} --logfile=${CELERYBEAT_LOG_FILE} --loglevel=${CELERYD_LOG_LEVEL}' Config: /etc/redis/redis.conf Log: /var/log/celery/beat.log From the docker host view container status - docker ps --filter \"name=trmm-celerybeat\" View logs: docker compose logs tactical-celerybeat \"tail\" logs: docker compose logs tactical-celerybeat | tail Shell access: docker exec -it trmm-celerybeat /bin/bash Redis Service \u00b6 Redis is an in-memory data structure store used as a database, cache, and message broker for Django / Celery. Log located at /var/log/redis Redis config Redis docs status commands standard docker Status: systemctl status --full redis-server.service Stop: systemctl stop redis-server.service Start: systemctl start redis-server.service Restart: systemctl restart redis-server.service Tail logs: tail -F /var/log/redis/redis-server.log Service: redis-server.service Log: /var/log/redis/redis-server.log From the docker host view container status - docker ps --filter \"name=trmm-redis\" View logs: docker compose logs tactical-redis \"tail\" logs: docker compose logs tactical-redis | tail Shell access: docker exec -it trmm-redis /bin/bash MeshCentral \u00b6 MeshCentral is used for \"Take Control\" (connecting to machine for remote access), and 2 screens of the \"Remote Background\" (Terminal, and File Browser). Config file location: /meshcentral/meshcentral-data/config.json Customize with care. Info Mesh usernames are CaSe sEnSiTive . Tactical will make sure it's all lower case to avoid sync problems. MeshCentral MeshCentral docs status commands docker Debugging Status: systemctl status --full meshcentral Stop: systemctl stop meshcentral Start: systemctl start meshcentral Restart: systemctl restart meshcentral From the docker host view container status - docker ps --filter \"name=trmm-meshcentral\" View logs: docker compose logs tactical-meshcentral \"tail\" logs: docker compose logs tactical-meshcentral | tail Shell access: docker exec -it trmm-meshcentral /bin/bash Open either \"Take Control\" or \"Remote Background\" to get mesh login token. Open https://mesh.example.com to open native mesh admin interface. Left-side \"My Server\" > Choose \"Console\" > type agentstats To view detailed logging goto \"Trace\" > click Tracing button and choose categories. If you run sudo systemctl status --full --no-pager meshcentral and you don't see Active: active (running) since ... You can manually run meshcentral using this command to see the full output with errors. sudo systemctl stop meshcentral cd /meshcentral/ /usr/bin/node node_modules/meshcentral MeshCentral Agent \u00b6 Get Mesh Agent Version info with this command. Should match server version. \"C:\\Program Files\\Mesh Agent\\MeshAgent.exe\" -info\" Compare the hash with the tags in the repo at https://github.com/Ylianst/MeshAgent/tags . Checks / tasks / agent data uses regular http to Nginx. Agent status uses NATS websockets. Other Dependencies \u00b6 Django - Framework to enable the server to interact with browser. Django dependencies future==0.18.2 loguru==0.5.3 msgpack==1.0.2 packaging==20.9 psycopg2-binary==2.9.1 pycparser==2.20 pycryptodome==3.10.1 pyotp==2.6.0 pyparsing==2.4.7 pytz==2021.1 qrcode - Creating QR codes for 2FA. qrcode dependencies requests==2.25.1 six==1.16.0 sqlparse==0.4.1 Twilio - Python SMS notification integration. twilio dependencies urllib3==1.26.5 uWSGI==2.0.19.1 validators==0.18.2 vine==5.0.0 websockets==9.1 zipp==3.4.1 Windows Agent \u00b6 Found in %programfiles%\\TacticalAgent The Tactical RMM agent runs under the SYSTEM security context. When scripts / checks execute, they are: Transferred from the server via NATS. Saved to a randomly created file in C:\\ProgramData\\TacticalRMM . Executed. Return info is captured and returned to the server via NATS. File in C:\\ProgramData\\TacticalRMM is removed automatically after execution / timeout. Command Parameters for scripts stay in memory Also \"Send Command\" stay in memory as well. Having said that...Windows logs all things PowerShell: Event Viewer > Microsoft > Windows > PowerShell > Operational Log so be careful with fancy API calls and auth token using agents for execution. Warning Remember: Auth tokens are Username/Password/2FA verification all rolled into a single chunk of text! RunAsUser functionality \u00b6 Now that we know the agent runs under the SYSTEM security context and what that means, there is an option to \"RunAsUser\" (Windows only). There are multiple things to understand and consider. TRMMs native \"RunAsUser\" is only supported on workstations and non-RDP/terminal services servers. The user has to be logged in, if the computer is still sitting at the Login screen there will be no active user to discover, and fail. If you're using fast user switching, it is the active user that will be discovered and used. There are two ways to do RunAsUser with tactical in relation to scripting. The Tactical RMM \"RunAsUser\" checkbox associated with the script, and all code will be run under the actively logged in user only with their security permissions. The user access token that will be used is the limited user access token . You will not be able to do any admin level stuff because TRMM's RunAsUser doesn't have a UAC elevation capability to call and request a 2nd access token with admin privileges. Using the PowerShell \"RunAsUser\" 3rd party module Outbound Firewall Rules \u00b6 If you have strict firewall rules these are the only outbound rules from the agent needed for all functionality: All agents have to be able to connect outbound to TRMM server on the 3 domain names on port 443. The agent uses https://icanhazip.tacticalrmm.io/ to get public IP info. If this site is down for whatever reason, the agent will fallback to https://icanhazip.com and then https://ifconfig.co/ip Unsigned Agents \u00b6 Unsigned agents require access to: https://github.com/amidaware/rmmagent/releases/* for downloading / updating agents. Signed Agents \u00b6 Signed agents require access to: https://agents.tacticalrmm.com for downloading / updating agents. Agent Installation Process \u00b6 Copies temp files to C:\\ProgramData\\TacticalRMM folder. INNO setup installs app into %ProgramFiles%\\TacticalAgent\\ folder. Agent Update Process \u00b6 Downloads latest tacticalagent-vx.x.x.exe to %PROGRAMDATA\\TacticalRMM% . Executes the file (INNO setup exe). Log file C:\\ProgramData\\TacticalRMM\\tacticalagent_update_vX.X.X.txt is created. Tactical Agent Debugging \u00b6 Choose your method: Windows Automatically Windows Manually Linux Mac If the Tactical agent is connecting to your server, you can use the Community scripts: TacticalRMM - TRMM Agent enable Debug Mode TacticalRMM - TRMM Agent disable Debug Mode and TacticalRMM - Get Agent Logs Open CMD as admin on the problem computer and stop the agent services: net stop tacticalrmm Run the tacticalrmm service manually with debug logging: \"C:\\Program Files\\TacticalAgent\\tacticalrmm.exe\" -m rpc -log debug -logto stdout Note There's a Community script that will collect your agent log called TacticalRMM - Get Agent Logs . As root user, edit: vi /etc/systemd/system/tacticalagent.service Change ExecStart=/usr/local/bin/tacticalagent -m svc to ExecStart=/usr/local/bin/tacticalagent -m svc -log debug then systemctl daemon-reload systemctl restart tacticalagent.service In terminal window: sudo launchtl list | grep -e mesh -e tacticalagent Mesh Agent Recovery \u00b6 Use Agents right click menu > Agent recovery > Mesh Agent Tactical Agent Recovery \u00b6 Use Agents right click menu > Agent recovery > Tactical Agent ...OR MeshCentral is online From Local Machine Connect to Terminal (Admin Shell) Run net stop tacticalrmm net start tacticalrmm Check if Tactical RMM agent is online. Start / Restart Tactical RMM service from either services.msc or from Admin Command prompt: net stop tacticalrmm net start tacticalrmm Open C:\\Program Files\\TacticalAgent\\agent.log to look for issues. Windows Update Management \u00b6 The current Tactical RMM Windows Update process is relatively simple atm. As of right now, it is in the top 3 big items to be reworked. TLDR: Tactical RMM Based Patching Recommendation \u00b6 Use the Automation Policy > Patch Policy to apply it to machines. The Other category is poorly named by Microsoft, those are the regular monthly updates and should be auto-approved. Be patient, and things will be patched (based on the policy). Trying to immediately approve patches to many machines OR block specific patches is a slow and manual process. Note If you want more control of Windows patching right now, look into a script-based implementation of PSWindowsUpdate . Be aware : When you install the Tactical RMM Agent on a Windows computer it sets this: HKEY_LOCAL_MACHINE\\SOFTWARE\\Policies\\Microsoft\\Windows\\WindowsUpdate\\AU AUOptions (REG_DWORD): 1: Keep my computer up to date is disabled in Automatic Updates. If you want to resume normal Windows patching and disable Tactical RMM updating functions, you should run this . Where does it get updates from? TRMM gets the list of Windows updates using this Microsoft API: https://docs.microsoft.com/en-us/windows/win32/api/_wua/ The Tactical RMM server updates an agent's patch list every 8 hours based on the patch policy to check for what to update, and what's installed. Note Currently if the agent is not online at the time the patch policy is set to install, there is no \"install as soon as it comes online\". Tip Trying to get reboots to happen at specific times after Windows update? Set your Reboot After Installation to: Never Then create a task that reboots at your preferred date/time Log Files \u00b6 You can find 3 sets of detailed logs at /rmm/api/tacticalrmm/tacticalrmm/private/log . error.log Nginx log for all errors on all TRMM URL's: rmm, api and mesh tail -f /rmm/api/tacticalrmm/tacticalrmm/private/log/error.log access.log Nginx log for auditing access on all URL's: rmm, api and mesh ( this is a large file, and should be cleaned periodically ) tail -f /rmm/api/tacticalrmm/tacticalrmm/private/log/access.log django_debug.log created by Django webapp tail -f /rmm/api/tacticalrmm/tacticalrmm/private/log/django_debug.log Failed / Successful Admin logins \u00b6 These are logged in /rmm/api/tacticalrmm/tacticalrmm/private/log/access.log Successful Login 10.0.0.18 - - [21/May/2025:00:01:43 -0400] \"POST /v2/checkcreds/ HTTP/1.1\" 200 13 \"https://rmm.example.com/\" \"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/136.0.0.0 Safari/537.36\" Failed Login 10.0.8.62 - - [21/May/2025:00:01:13 -0400] \"POST /v2/checkcreds/ HTTP/1.1\" 400 17 \"https://rmm.example.com/\" \"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/136.0.0.0 Safari/537.36\" Field Description 10.0.0.18 Client IP address - Unused (RFC 1413 identity) - Unused (authenticated user ID) [21/May/2025:00:01:43 -0400] Timestamp (local time with timezone offset) \"POST /v2/checkcreds/ HTTP/1.1\" HTTP request method, path, and version 200 HTTP status code (200 = OK/success) (400 = Failed) 13 Response size in bytes (body only) \"https://rmm.example.com/\" Referer URL (origin of the request) \"Mozilla/5.0 (Windows NT 10.0;...) User-Agent string (browser and OS info) Fail2Ban uses this to limit password guessing","title":"How it all Works"},{"location":"howitallworks/#how-it-all-works","text":"","title":"How It All Works"},{"location":"howitallworks/#understanding-trmm","text":"Anything you configure: scripts, tasks, patching, etc is queued and scheduled on the server to do something. Everything that is queued, happens immediately when agents are online. The agent gets a NATS command, the server tells it to do xyz and it does it. When agents are not connected to the server nothing happens. The Windows Task Scheduler says do x at some time, what it's asked to do is get x command from the server. If the server is offline, nothing happens. If an agent comes online, every x interval (Windows Update, pending tasks etc) check and see if there is something for me to do that I missed while I was offline. When that time occurs (eg agent sees if it needs to update itself at 35 minutes past every hour Update Agents ) it'll get requested on the online agent. That's the simplified general rule for everything TRMM. Image Source Still need graphics for: 1. Agent installer steps 2. Agent checks / tasks and how they work on the workstation/interact with server","title":"Understanding TRMM"},{"location":"howitallworks/#server","text":"Has a Postgres database located here: Django Admin Description A web interface for the Postgres database All Tactical RMM dependencies are listed here . A complete list of all packages used by Tactical RMM are listed here .","title":"Server"},{"location":"howitallworks/#outbound-firewall-rules","text":"If you have strict outbound firewall rules these are the outbound rules needed for all functionality:","title":"Outbound Firewall Rules"},{"location":"howitallworks/#regular-use","text":"Access to Github for downloading and installing TRMM, and checking if new TRMM version is available to show in the admin web panel. Access to nginx.org to install Access to mongodb.org to install Access to python.org to install Access to postgresql.org to install Whatever servers Let's Encrypt uses for DNS-01 challenges Cloudflare is for the licensing servers.","title":"Regular Use"},{"location":"howitallworks/#server-without-code-signing-key","text":"No additional rules needed.","title":"Server Without Code Signing Key"},{"location":"howitallworks/#server-with-code-signing-key","text":"No additional rules needed.","title":"Server With Code Signing Key"},{"location":"howitallworks/#system-services","text":"This lists the system services used by the server. Quick server health inspection cd /rmm/api/tacticalrmm/ source ../env/bin/activate for i in active reserved scheduled stats ; do celery -A tacticalrmm inspect $i ; done","title":"System Services"},{"location":"howitallworks/#nginx-web-server","text":"Nginx is the web server for the rmm , api , and mesh domains. All sites redirect port 80 (HTTP) to port 443 (HTTPS). nginx configuration (a.k.a. sites available) nginx configuration docs rmm.example.com api.example.com mesh.example.com default This serves the frontend website that you interact with. Config: /etc/nginx/sites-enabled/frontend.conf root: /var/www/rmm/dist Access log: /var/log/nginx/frontend-access.log Error log: /var/log/nginx/frontend-error.log TLS certificate: /etc/letsencrypt/live/example.com/fullchain.pem This serves the TRMM API for the frontend and agents. Config: /etc/nginx/sites-enabled/rmm.conf roots: /rmm/api/tacticalrmm/static/ /rmm/api/tacticalrmm/tacticalrmm/private/ Upstreams: unix://rmm/api/tacticalrmm/tacticalrmm.sock unix://rmm/daphne.sock Access log: /rmm/api/tacticalrmm/tacticalrmm/private/log/access.log Error log: /rmm/api/tacticalrmm/tacticalrmm/private/log/error.log TLS certificate: /etc/letsencrypt/live/example.com/fullchain.pem This serves MeshCentral for remote access. Config: /etc/nginx/sites-enabled/meshcentral.conf Upstream: http://127.0.0.1:4430/ Access log: /var/log/nginx/access.log (uses default) Error log: /var/log/nginx/error.log (uses default) TLS certificate: /etc/letsencrypt/live/example.com/fullchain.pem This is the default site installed with nginx. This listens on port 80 only. Config: /etc/nginx/sites-enabled/default root: /var/www/rmm/dist Access log: /var/log/nginx/access.log (uses default) Error log: /var/log/nginx/error.log (uses default) systemd config status commands standard docker Status: systemctl status --full nginx.service Stop: systemctl stop nginx.service Start: systemctl start nginx.service Restart: systemctl restart nginx.service Restart: systemctl reload nginx.service reloads the config without restarting Test config: nginx -t Listening process: ss -tulnp | grep nginx Service: nginx.service Address: 0.0.0.0 Port: 443 Exec: /usr/sbin/nginx -g 'daemon on; master_process on;' Version: 1.18.0 From the docker host view container status - docker ps --filter \"name=trmm-nginx\" View logs: docker compose logs tactical-nginx \"tail\" logs: docker compose logs tactical-nginx | tail Shell access: docker exec -it trmm-nginx /bin/bash","title":"Nginx Web Server"},{"location":"howitallworks/#tactical-rmm-django-uwsgi-service","text":"Built on the Django framework, the Tactical RMM service is the heart of the system by serving the API for the frontend and agents. uWSGI config uWSGI docs status commands standard docker Status: systemctl status --full rmm.service Stop: systemctl stop rmm.service Start: systemctl start rmm.service Restart: systemctl restart rmm.service journalctl: \"tail\" the logs: journalctl --identifier uwsgi --follow View the logs: journalctl --identifier uwsgi --since \"30 minutes ago\" | less Debug logs for 5xx errors will be located in /rmm/api/tacticalrmm/tacticalrmm/private/log Service: rmm.service Socket: /rmm/api/tacticalrmm/tacticalrmm.sock uWSGI config: /rmm/api/tacticalrmm/app.ini Log: None Journal identifier: uwsgi Version: 2.0.18 From the docker host view container status - docker ps --filter \"name=trmm-backend\" View logs: docker compose logs tactical-backend \"tail\" logs: docker compose logs tactical-backend | tail Shell access: docker exec -it trmm-backend /bin/bash","title":"Tactical RMM (Django uWSGI) Service"},{"location":"howitallworks/#daphne-django-channels-daemon","text":"Daphne is the official ASGI HTTP / WebSocket server maintained by the Channels project . Daphne config Django Channels configuration docs status commands standard docker Status: systemctl status --full daphne.service Stop: systemctl stop daphne.service Start: systemctl start daphne.service Restart: systemctl restart daphne.service journalctl (this provides only system start/stop logs, not the actual logs): \"tail\" the logs: journalctl --identifier daphne --follow View the logs: journalctl --identifier daphne --since \"30 minutes ago\" | less Service: daphne.service Socket: /rmm/daphne.sock Exec: /rmm/api/env/bin/daphne -u /rmm/daphne.sock tacticalrmm.asgi:application Config: /rmm/api/tacticalrmm/tacticalrmm/local_settings.py Log: /rmm/api/tacticalrmm/tacticalrmm/private/log/trmm_debug.log From the docker host view container status - docker ps --filter \"name=trmm-websockets\" View logs: docker compose logs tactical-websockets \"tail\" logs: docker compose logs tactical-websockets | tail Shell access: docker exec -it trmm-websockets /bin/bash","title":"Daphne: Django Channels Daemon"},{"location":"howitallworks/#nats-server-service","text":"NATS is a messaging bus for \"live\" communication between the agent and server. NATS provides the framework for the server to push commands to the agent and receive information back. NATS config NATS server configuration docs status commands standard docker Status: systemctl status --full nats.service Stop: systemctl stop nats.service Start: systemctl start nats.service Restart: systemctl restart nats.service Reload: systemctl reload nats.service reloads the config without restarting journalctl: \"tail\" the logs: journalctl --identifier nats-server --follow View the logs: journalctl --identifier nats-server --since \"30 minutes ago\" | less Listening process: ss -tulnp | grep nats-server Checking for NATS or websocket problems sudo journalctl --no-pager -u nats and sudo journalctl --no-pager -u nats-api Service: nats.service Address: 0.0.0.0 Port: 4222 (standard), 9235 (websocket) Exec: /usr/local/bin/nats-server --config /rmm/api/tacticalrmm/nats-rmm.conf Config: /rmm/api/tacticalrmm/nats-rmm.conf TLS: /etc/letsencrypt/live/example.com/fullchain.pem Log: None Version: v2.3.3 Get into bash in your docker with: docker exec -it trmm-nats /bin/bash Log: nats-api -log debug Shell access: docker exec -it trmm-nats /bin/bash","title":"NATS Server Service"},{"location":"howitallworks/#nats-api-service","text":"NATS API config status commands standard docker Status: systemctl status --full nats-api.service Stop: systemctl stop nats-api.service Start: systemctl start nats-api.service Restart: systemctl restart nats-api.service journalctl: This application does not appear to log anything. Service: nats-api.service Exec: /usr/local/bin/nats-api --config /rmm/api/tacticalrmm/nats-api.conf Config: /rmm/api/tacticalrmm/nats-api.conf TLS: /etc/letsencrypt/live/example.com/fullchain.pem Log: None Get into bash in your docker with: docker exec -it trmm-nats /bin/bash Log: nats-api -log debug","title":"NATS API Service"},{"location":"howitallworks/#celery-service","text":"Celery is a task queue focused on real-time processing and is responsible for scheduling tasks to be sent to agents. Log located at /var/log/celery Celery config Celery docs Celery configuration docs status commands standard docker Status: systemctl status --full celery.service Stop: systemctl stop celery.service Start: systemctl start celery.service Restart: systemctl restart celery.service journalctl: Celery executes sh causing the systemd identifier to be sh , thus mixing the celery and celerybeat logs together. \"tail\" the logs: journalctl --identifier sh --follow View the logs: journalctl --identifier sh --since \"30 minutes ago\" | less Tail logs: tail -F /var/log/celery/w*-*.log Service: celery.service Exec: /bin/sh -c '${CELERY_BIN} -A $CELERY_APP multi start $CELERYD_NODES --pidfile=${CELERYD_PID_FILE} --logfile=${CELERYD_LOG_FILE} --loglevel=\"${CELERYD_LOG_LEVEL}\" $CELERYD_OPTS' Config: /etc/conf.d/celery.conf Log: /var/log/celery/w*-*.log From the docker host view container status - docker ps --filter \"name=trmm-celery\" View logs: docker compose logs tactical-celery \"tail\" logs: docker compose logs tactical-celery | tail Shell access: docker exec -it trmm-celery /bin/bash","title":"Celery Service"},{"location":"howitallworks/#celery-beat-service","text":"Celery Beat is a scheduler. It kicks off tasks at regular intervals, that are then executed by available worker nodes in the cluster. Celery Beat config Celery beat docs status commands standard docker Status: systemctl status --full celerybeat.service Stop: systemctl stop celerybeat.service Start: systemctl start celerybeat.service Restart: systemctl restart celerybeat.service journalctl: Celery executes sh causing the systemd identifier to be sh , thus mixing the celery and celerybeat logs together. \"tail\" the logs: journalctl --identifier sh --follow View the logs: journalctl --identifier sh --since \"30 minutes ago\" | less Tail logs: tail -F /var/log/celery/beat.log Service: celerybeat.service Exec: /bin/sh -c '${CELERY_BIN} -A ${CELERY_APP} beat --pidfile=${CELERYBEAT_PID_FILE} --logfile=${CELERYBEAT_LOG_FILE} --loglevel=${CELERYD_LOG_LEVEL}' Config: /etc/redis/redis.conf Log: /var/log/celery/beat.log From the docker host view container status - docker ps --filter \"name=trmm-celerybeat\" View logs: docker compose logs tactical-celerybeat \"tail\" logs: docker compose logs tactical-celerybeat | tail Shell access: docker exec -it trmm-celerybeat /bin/bash","title":"Celery Beat Service"},{"location":"howitallworks/#redis-service","text":"Redis is an in-memory data structure store used as a database, cache, and message broker for Django / Celery. Log located at /var/log/redis Redis config Redis docs status commands standard docker Status: systemctl status --full redis-server.service Stop: systemctl stop redis-server.service Start: systemctl start redis-server.service Restart: systemctl restart redis-server.service Tail logs: tail -F /var/log/redis/redis-server.log Service: redis-server.service Log: /var/log/redis/redis-server.log From the docker host view container status - docker ps --filter \"name=trmm-redis\" View logs: docker compose logs tactical-redis \"tail\" logs: docker compose logs tactical-redis | tail Shell access: docker exec -it trmm-redis /bin/bash","title":"Redis Service"},{"location":"howitallworks/#meshcentral","text":"MeshCentral is used for \"Take Control\" (connecting to machine for remote access), and 2 screens of the \"Remote Background\" (Terminal, and File Browser). Config file location: /meshcentral/meshcentral-data/config.json Customize with care. Info Mesh usernames are CaSe sEnSiTive . Tactical will make sure it's all lower case to avoid sync problems. MeshCentral MeshCentral docs status commands docker Debugging Status: systemctl status --full meshcentral Stop: systemctl stop meshcentral Start: systemctl start meshcentral Restart: systemctl restart meshcentral From the docker host view container status - docker ps --filter \"name=trmm-meshcentral\" View logs: docker compose logs tactical-meshcentral \"tail\" logs: docker compose logs tactical-meshcentral | tail Shell access: docker exec -it trmm-meshcentral /bin/bash Open either \"Take Control\" or \"Remote Background\" to get mesh login token. Open https://mesh.example.com to open native mesh admin interface. Left-side \"My Server\" > Choose \"Console\" > type agentstats To view detailed logging goto \"Trace\" > click Tracing button and choose categories. If you run sudo systemctl status --full --no-pager meshcentral and you don't see Active: active (running) since ... You can manually run meshcentral using this command to see the full output with errors. sudo systemctl stop meshcentral cd /meshcentral/ /usr/bin/node node_modules/meshcentral","title":"MeshCentral"},{"location":"howitallworks/#meshcentral-agent","text":"Get Mesh Agent Version info with this command. Should match server version. \"C:\\Program Files\\Mesh Agent\\MeshAgent.exe\" -info\" Compare the hash with the tags in the repo at https://github.com/Ylianst/MeshAgent/tags . Checks / tasks / agent data uses regular http to Nginx. Agent status uses NATS websockets.","title":"MeshCentral Agent"},{"location":"howitallworks/#other-dependencies","text":"Django - Framework to enable the server to interact with browser. Django dependencies future==0.18.2 loguru==0.5.3 msgpack==1.0.2 packaging==20.9 psycopg2-binary==2.9.1 pycparser==2.20 pycryptodome==3.10.1 pyotp==2.6.0 pyparsing==2.4.7 pytz==2021.1 qrcode - Creating QR codes for 2FA. qrcode dependencies requests==2.25.1 six==1.16.0 sqlparse==0.4.1 Twilio - Python SMS notification integration. twilio dependencies urllib3==1.26.5 uWSGI==2.0.19.1 validators==0.18.2 vine==5.0.0 websockets==9.1 zipp==3.4.1","title":"Other Dependencies"},{"location":"howitallworks/#windows-agent","text":"Found in %programfiles%\\TacticalAgent The Tactical RMM agent runs under the SYSTEM security context. When scripts / checks execute, they are: Transferred from the server via NATS. Saved to a randomly created file in C:\\ProgramData\\TacticalRMM . Executed. Return info is captured and returned to the server via NATS. File in C:\\ProgramData\\TacticalRMM is removed automatically after execution / timeout. Command Parameters for scripts stay in memory Also \"Send Command\" stay in memory as well. Having said that...Windows logs all things PowerShell: Event Viewer > Microsoft > Windows > PowerShell > Operational Log so be careful with fancy API calls and auth token using agents for execution. Warning Remember: Auth tokens are Username/Password/2FA verification all rolled into a single chunk of text!","title":"Windows Agent"},{"location":"howitallworks/#runasuser-functionality","text":"Now that we know the agent runs under the SYSTEM security context and what that means, there is an option to \"RunAsUser\" (Windows only). There are multiple things to understand and consider. TRMMs native \"RunAsUser\" is only supported on workstations and non-RDP/terminal services servers. The user has to be logged in, if the computer is still sitting at the Login screen there will be no active user to discover, and fail. If you're using fast user switching, it is the active user that will be discovered and used. There are two ways to do RunAsUser with tactical in relation to scripting. The Tactical RMM \"RunAsUser\" checkbox associated with the script, and all code will be run under the actively logged in user only with their security permissions. The user access token that will be used is the limited user access token . You will not be able to do any admin level stuff because TRMM's RunAsUser doesn't have a UAC elevation capability to call and request a 2nd access token with admin privileges. Using the PowerShell \"RunAsUser\" 3rd party module","title":"RunAsUser functionality"},{"location":"howitallworks/#outbound-firewall-rules_1","text":"If you have strict firewall rules these are the only outbound rules from the agent needed for all functionality: All agents have to be able to connect outbound to TRMM server on the 3 domain names on port 443. The agent uses https://icanhazip.tacticalrmm.io/ to get public IP info. If this site is down for whatever reason, the agent will fallback to https://icanhazip.com and then https://ifconfig.co/ip","title":"Outbound Firewall Rules"},{"location":"howitallworks/#unsigned-agents","text":"Unsigned agents require access to: https://github.com/amidaware/rmmagent/releases/* for downloading / updating agents.","title":"Unsigned Agents"},{"location":"howitallworks/#signed-agents","text":"Signed agents require access to: https://agents.tacticalrmm.com for downloading / updating agents.","title":"Signed Agents"},{"location":"howitallworks/#agent-installation-process","text":"Copies temp files to C:\\ProgramData\\TacticalRMM folder. INNO setup installs app into %ProgramFiles%\\TacticalAgent\\ folder.","title":"Agent Installation Process"},{"location":"howitallworks/#agent-update-process","text":"Downloads latest tacticalagent-vx.x.x.exe to %PROGRAMDATA\\TacticalRMM% . Executes the file (INNO setup exe). Log file C:\\ProgramData\\TacticalRMM\\tacticalagent_update_vX.X.X.txt is created.","title":"Agent Update Process"},{"location":"howitallworks/#tactical-agent-debugging","text":"Choose your method: Windows Automatically Windows Manually Linux Mac If the Tactical agent is connecting to your server, you can use the Community scripts: TacticalRMM - TRMM Agent enable Debug Mode TacticalRMM - TRMM Agent disable Debug Mode and TacticalRMM - Get Agent Logs Open CMD as admin on the problem computer and stop the agent services: net stop tacticalrmm Run the tacticalrmm service manually with debug logging: \"C:\\Program Files\\TacticalAgent\\tacticalrmm.exe\" -m rpc -log debug -logto stdout Note There's a Community script that will collect your agent log called TacticalRMM - Get Agent Logs . As root user, edit: vi /etc/systemd/system/tacticalagent.service Change ExecStart=/usr/local/bin/tacticalagent -m svc to ExecStart=/usr/local/bin/tacticalagent -m svc -log debug then systemctl daemon-reload systemctl restart tacticalagent.service In terminal window: sudo launchtl list | grep -e mesh -e tacticalagent","title":"Tactical Agent Debugging"},{"location":"howitallworks/#mesh-agent-recovery","text":"Use Agents right click menu > Agent recovery > Mesh Agent","title":"Mesh Agent Recovery"},{"location":"howitallworks/#tactical-agent-recovery","text":"Use Agents right click menu > Agent recovery > Tactical Agent ...OR MeshCentral is online From Local Machine Connect to Terminal (Admin Shell) Run net stop tacticalrmm net start tacticalrmm Check if Tactical RMM agent is online. Start / Restart Tactical RMM service from either services.msc or from Admin Command prompt: net stop tacticalrmm net start tacticalrmm Open C:\\Program Files\\TacticalAgent\\agent.log to look for issues.","title":"Tactical Agent Recovery"},{"location":"howitallworks/#windows-update-management","text":"The current Tactical RMM Windows Update process is relatively simple atm. As of right now, it is in the top 3 big items to be reworked.","title":"Windows Update Management"},{"location":"howitallworks/#tldr-tactical-rmm-based-patching-recommendation","text":"Use the Automation Policy > Patch Policy to apply it to machines. The Other category is poorly named by Microsoft, those are the regular monthly updates and should be auto-approved. Be patient, and things will be patched (based on the policy). Trying to immediately approve patches to many machines OR block specific patches is a slow and manual process. Note If you want more control of Windows patching right now, look into a script-based implementation of PSWindowsUpdate . Be aware : When you install the Tactical RMM Agent on a Windows computer it sets this: HKEY_LOCAL_MACHINE\\SOFTWARE\\Policies\\Microsoft\\Windows\\WindowsUpdate\\AU AUOptions (REG_DWORD): 1: Keep my computer up to date is disabled in Automatic Updates. If you want to resume normal Windows patching and disable Tactical RMM updating functions, you should run this . Where does it get updates from? TRMM gets the list of Windows updates using this Microsoft API: https://docs.microsoft.com/en-us/windows/win32/api/_wua/ The Tactical RMM server updates an agent's patch list every 8 hours based on the patch policy to check for what to update, and what's installed. Note Currently if the agent is not online at the time the patch policy is set to install, there is no \"install as soon as it comes online\". Tip Trying to get reboots to happen at specific times after Windows update? Set your Reboot After Installation to: Never Then create a task that reboots at your preferred date/time","title":"TLDR: Tactical RMM Based Patching Recommendation"},{"location":"howitallworks/#log-files","text":"You can find 3 sets of detailed logs at /rmm/api/tacticalrmm/tacticalrmm/private/log . error.log Nginx log for all errors on all TRMM URL's: rmm, api and mesh tail -f /rmm/api/tacticalrmm/tacticalrmm/private/log/error.log access.log Nginx log for auditing access on all URL's: rmm, api and mesh ( this is a large file, and should be cleaned periodically ) tail -f /rmm/api/tacticalrmm/tacticalrmm/private/log/access.log django_debug.log created by Django webapp tail -f /rmm/api/tacticalrmm/tacticalrmm/private/log/django_debug.log","title":"Log Files"},{"location":"howitallworks/#failed-successful-admin-logins","text":"These are logged in /rmm/api/tacticalrmm/tacticalrmm/private/log/access.log Successful Login 10.0.0.18 - - [21/May/2025:00:01:43 -0400] \"POST /v2/checkcreds/ HTTP/1.1\" 200 13 \"https://rmm.example.com/\" \"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/136.0.0.0 Safari/537.36\" Failed Login 10.0.8.62 - - [21/May/2025:00:01:13 -0400] \"POST /v2/checkcreds/ HTTP/1.1\" 400 17 \"https://rmm.example.com/\" \"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/136.0.0.0 Safari/537.36\" Field Description 10.0.0.18 Client IP address - Unused (RFC 1413 identity) - Unused (authenticated user ID) [21/May/2025:00:01:43 -0400] Timestamp (local time with timezone offset) \"POST /v2/checkcreds/ HTTP/1.1\" HTTP request method, path, and version 200 HTTP status code (200 = OK/success) (400 = Failed) 13 Response size in bytes (body only) \"https://rmm.example.com/\" Referer URL (origin of the request) \"Mozilla/5.0 (Windows NT 10.0;...) User-Agent string (browser and OS info) Fail2Ban uses this to limit password guessing","title":"Failed / Successful Admin logins"},{"location":"install_agent/","text":"Installing a Windows Agent \u00b6 Warning You must add antivirus exclusions for the tactical agent. AV will usually flag the agent as a virus, since it technically is one due to the nature of this software. Adding the following exclusions will make sure everything works, including agent update: #Windows Defender Exclusions for Tactical Add-MpPreference -ExclusionPath \"C:\\Program Files\\Mesh Agent\\*\" Add-MpPreference -ExclusionPath \"C:\\Program Files\\TacticalAgent\\*\" Add-MpPreference -ExclusionPath \"C:\\ProgramData\\TacticalRMM\\*\" Add-MpPreference -ExclusionPath \"C:\\Windows\\Temp\\is-*.tmp\\tacticalagent*\" Add-MpPreference -ExclusionProcess \"C:\\Program Files\\TacticalAgent\\tacticalrmm.exe\" Add-MpPreference -ExclusionProcess \"C:\\ProgramData\\TacticalRMM\\tacticalagent*\" Add-MpPreference -ExclusionProcess \"C:\\Windows\\Temp\\is-*.tmp\\tacticalagent*\" See here for other screenshot examples . UI \u00b6 Click Agents > Install Agent . You can also right click on a site > Install Agent . This will automatically fill in the client / site dropdown for you. Manual \u00b6 The 'Manual' installation method requires you to first download the Inno Setup installer and call it using command line args. This is useful for scripting the installation using Group Policy or some other batch deployment method. This or the Powershell method are also the preferred method of installing if you don't want this to happen. Dynamically Generated Executable \u00b6 The dynamically generated exe is a standalone binary which is simply a wrapper around the Manual install method, using a single exe / command without the need to pass any command line flags to the installer. All it does is download the Inno Setup installer and call it using predefined command line args that you choose from the web UI. It \"bakes\" the command line args into the executable. Please note that using this method can result in this . PowerShell \u00b6 The PowerShell method is also a wrapper around the Manual install method and functionally identical to the dynamically generated EXE installer but in powershell format instead of EXE format. Tip You can reuse the installer for any of the deployment methods, you don't need to constantly create a new installer for each new agent. The installer will be valid for however long you specify the token expiry time when generating an agent. Using a Deployment Link \u00b6 The main benefit of this method is that the executable is generated only whenever the deployment download link is accessed, whereas with the other methods it's generated right away and the agent's version is hardcoded into the exe. Using a deployment link will allow you to not worry about installing using an older version of an agent, which will fail to install if you have updated your RMM to a version that is not compatible with an older installer you might have lying around. The deployment link method uses the dynamic EXE method behind the scenes. To create a deployment, from the web UI click Agents > Manage Deployments . Tip Create a client / site named \"Default\" and create a deployment for it with a very long expiry to have a generic installer that can be deployed anytime at any client / site. You can then move the agent into the correct client / site from the web UI after it's been installed. Copy / paste the download link from the deployment into your browser. It will take a few seconds to dynamically generate the executable and then your browser will automatically download the exe. Optional Installer Args \u00b6 The following optional arguments can be passed to any of the installation method executables: --log debug Will print very verbose logging during agent install. Useful for troubleshooting agent install. --silent This will not popup any message boxes during install, including any error messages or the \"Installation was successful\" message box that pops up at the end of a successful install. --proxy \"http://proxyserver:port\" Use a http proxy. --meshdir \"C:\\Program Files\\Your Company Name\\Mesh Agent\" Specify the full path to the directory containing MeshAgent.exe if using custom agent branding for your MeshCentral instance. --nomesh Do not install MeshCentral agent during Tactical agent install. Note: Take Control, Remote Terminal and File Browser will not work. You can get full command line options from ( --help ). Scripting Agent Installation \u00b6 If you want to deploy the TRMM agent using AD, Intune, Mesh, TeamViewer, Group Policy GPO, etc, this is a sample CMD script for deploying Tactical. Install Scripts batch file powershell msi Note You will need to replace deployment url with your custom deployment URL: @ echo off REM Setup deployment URL set \"DeploymentURL=\" set \"Name=\" for /f \"usebackq tokens=* delims=\" %% # in ( `wmic service where \"name like 'tacticalrmm'\" get Name /Format:Value` ) do ( for /f \"tokens=* delims=\" %% g in ( \" %% #\" ) do set \"%%g\" ) if not defined Name ( echo Tactical RMM not found, installing now. if not exist c:\\ProgramData\\TacticalRMM\\temp md c:\\ProgramData\\TacticalRMM\\temp powershell Set-ExecutionPolicy -ExecutionPolicy Unrestricted powershell Add-MpPreference -ExclusionPath \"C:\\Program Files\\TacticalAgent\\*\" powershell Add-MpPreference -ExclusionPath \"C:\\Program Files\\Mesh Agent\\*\" powershell Add-MpPreference -ExclusionPath C:\\ProgramData\\TacticalRMM\\* cd c:\\ProgramData\\TacticalRMM\\temp powershell Invoke-WebRequest \" %DeploymentURL% \" -Outfile tactical.exe REM \"C:\\Program Files\\TacticalAgent\\unins000.exe\" /VERYSILENT tactical.exe rem exit /b 1 ) else ( echo Tactical RMM already installed Exiting Exit 0 ) # Update variables $deploymenturl = \"<deployment URL>\" $agentstoinstall = 1 # Replace with the number of agents to install if greater than 20 # Do not modify below here $randomSleepTime = if ( $agentstoinstall -gt 1 ) { Get-Random -Minimum 1 -Maximum (( $agentstoinstall + 1 ) * 2 ) } else { 1 } Start-Sleep -Seconds $randomSleepTime Invoke-WebRequest $deploymenturl -OutFile ( New-Item -Path \"c:\\ProgramData\\TacticalRMM\\temp\\trmminstall.exe\" -Force ) $proc = Start-Process \"c:\\ProgramData\\TacticalRMM\\temp\\trmminstall.exe\" -ArgumentList '-silent' -PassThru Wait-Process -InputObject $proc if ( $proc . ExitCode -ne 0 ) { Write-Warning \"$proc exited with status code $( $proc . ExitCode ) \" } Remove-Item -Path \"c:\\ProgramData\\TacticalRMM\\temp\\trmminstall.exe\" -Force Use Agents menu > Manage Deployments Generate a deployment link with an expiry date set to very far in the future, then access the link to download the executable. Create the msi Apply via GPO software deployment to the appropriate machines Script for Full Agent Uninstall \u00b6 You can always use this to silently uninstall the agent on workstations: Choose your method: Windows Automatically Mac linux \"C:\\Program Files\\TacticalAgent\\unins000.exe\" /VERYSILENT Run: https://github.com/amidaware/tacticalrmm/blob/develop/api/tacticalrmm/core/mac_uninstall.sh Download: https://raw.githubusercontent.com/amidaware/tacticalrmm/develop/api/tacticalrmm/core/agent_linux.sh Run: ./agent_linux.sh uninstall Reinstalling Mesh and Reconnecting to TRMM \u00b6 Run this from Send Command : \"C:\\Program Files\\Mesh Agent\\meshagent.exe\" -fullinstall Then use Agent Recovery > Mesh Agent , and choose Recover : Stuck at \"Downloading mesh agent...\"? \u00b6 Make sure TRMM can connect to Mesh. Run: /rmm/api/env/bin/python /rmm/api/tacticalrmm/manage.py check_mesh If there's an error, make sure you have it setup correctly . Install Linux Agent (beta) \u00b6 To install: 1. Go to rmm.yourdomain.com and login. 2. Click on Agents > Install Agent. 3. Choose the Client, Site, Server or Workstation and Architecture (change expiry if required) as well as Linux. 4. Click Download. 5. If downloaded on the Linux machine you want to add as an agent (otherwise copy to machine using WinSCP or similar) open terminal. 6. cd to the folder you have downloaded the script to. 7. Run chmod +x rmm-clientname-sitename-type.sh 8. Run sudo ./rmm-clientname-sitename-type.sh and wait for script to complete. If you changed the expiry time you could upload the script to any accessible server and deploy to multiple devices. -- debug Will print very verbose logging during agent install. Useful for troubleshooting agent install. Linux Deployment Link \u00b6 Currently there are no deploy links for Linux agents however you could use the following method if uploaded somewhere (website etc). An example deployment script would be (note there's an install token in that script, so delete it when done if you're concerned): wget scripturl chmod +x rmm.sh ./rmm.sh Mac Agent Permissions \u00b6 macOS 15+ Sequoia macOS 14 Sonoma and earlier Enable Screen Sharing under settings. Top switch is the only item needed for TRMM access. Do not enable anything else. Warning Enabling Anyone may request permission to control screen and VNC viewers may control screen with password will enable Mac-proprietary VNC options that will make TRMM's VNC implementation fail. Note This enabled the native VNC client on MacOS. If you don't limit in the Allow access for to Only theses users make certain you don't have other users or users without passwords. Step 1: Open System Preferences Click on the Apple logo in the top-left corner of your screen. Select System Preferences from the dropdown menu. Step 2: Navigate to Security & Privacy In the System Preferences window, click on Security & Privacy. At the top of the Security & Privacy window, click the Privacy tab. Step 3: Grant Accessibility Permissions In the list on the left, scroll down and select Accessibility. If the padlock in the bottom-left corner is locked, click it and enter your password to make changes. Click the plus (+) button under the list on the right side. Navigate to and add tacticalagent from the /opt/tacticalagent/ folder and meshagent in the /opt/tacticalmesh/ folder. Ensure both are checked in the list to grant them Accessibility Permissions. Step 4: Grant Screen Recording Permissions In the list on the left, find and select Screen Recording. Unlock the padlock if necessary as described above. Click the plus (+) button and add meshagent from the /opt/tacticalmesh/ folder, or check the boxes next to them if they're already listed. A prompt may appear asking you to quit Meshcentral. Please do so to enable the permissions. Step 5: Grant Full Disk Access In the list on the left, scroll down and select Full Disk Access. Unlock the padlock if necessary as described above. Click the plus (+) button and add tacticalagent from the /opt/tacticalagent/ folder and meshagent from the /opt/tacticalmesh/ folder, or check the boxes next to them if they're already listed. Finalizing the Setup Restart Your Applications: Quit and restart Tactical RMM and Meshcentral for the changes to take effect. Restart Your Mac: If the applications do not recognize the new permissions, a system restart may be necessary.","title":"Agent Installation"},{"location":"install_agent/#installing-a-windows-agent","text":"Warning You must add antivirus exclusions for the tactical agent. AV will usually flag the agent as a virus, since it technically is one due to the nature of this software. Adding the following exclusions will make sure everything works, including agent update: #Windows Defender Exclusions for Tactical Add-MpPreference -ExclusionPath \"C:\\Program Files\\Mesh Agent\\*\" Add-MpPreference -ExclusionPath \"C:\\Program Files\\TacticalAgent\\*\" Add-MpPreference -ExclusionPath \"C:\\ProgramData\\TacticalRMM\\*\" Add-MpPreference -ExclusionPath \"C:\\Windows\\Temp\\is-*.tmp\\tacticalagent*\" Add-MpPreference -ExclusionProcess \"C:\\Program Files\\TacticalAgent\\tacticalrmm.exe\" Add-MpPreference -ExclusionProcess \"C:\\ProgramData\\TacticalRMM\\tacticalagent*\" Add-MpPreference -ExclusionProcess \"C:\\Windows\\Temp\\is-*.tmp\\tacticalagent*\" See here for other screenshot examples .","title":"Installing a Windows Agent"},{"location":"install_agent/#ui","text":"Click Agents > Install Agent . You can also right click on a site > Install Agent . This will automatically fill in the client / site dropdown for you.","title":"UI"},{"location":"install_agent/#manual","text":"The 'Manual' installation method requires you to first download the Inno Setup installer and call it using command line args. This is useful for scripting the installation using Group Policy or some other batch deployment method. This or the Powershell method are also the preferred method of installing if you don't want this to happen.","title":"Manual"},{"location":"install_agent/#dynamically-generated-executable","text":"The dynamically generated exe is a standalone binary which is simply a wrapper around the Manual install method, using a single exe / command without the need to pass any command line flags to the installer. All it does is download the Inno Setup installer and call it using predefined command line args that you choose from the web UI. It \"bakes\" the command line args into the executable. Please note that using this method can result in this .","title":"Dynamically Generated Executable"},{"location":"install_agent/#powershell","text":"The PowerShell method is also a wrapper around the Manual install method and functionally identical to the dynamically generated EXE installer but in powershell format instead of EXE format. Tip You can reuse the installer for any of the deployment methods, you don't need to constantly create a new installer for each new agent. The installer will be valid for however long you specify the token expiry time when generating an agent.","title":"PowerShell"},{"location":"install_agent/#using-a-deployment-link","text":"The main benefit of this method is that the executable is generated only whenever the deployment download link is accessed, whereas with the other methods it's generated right away and the agent's version is hardcoded into the exe. Using a deployment link will allow you to not worry about installing using an older version of an agent, which will fail to install if you have updated your RMM to a version that is not compatible with an older installer you might have lying around. The deployment link method uses the dynamic EXE method behind the scenes. To create a deployment, from the web UI click Agents > Manage Deployments . Tip Create a client / site named \"Default\" and create a deployment for it with a very long expiry to have a generic installer that can be deployed anytime at any client / site. You can then move the agent into the correct client / site from the web UI after it's been installed. Copy / paste the download link from the deployment into your browser. It will take a few seconds to dynamically generate the executable and then your browser will automatically download the exe.","title":"Using a Deployment Link"},{"location":"install_agent/#optional-installer-args","text":"The following optional arguments can be passed to any of the installation method executables: --log debug Will print very verbose logging during agent install. Useful for troubleshooting agent install. --silent This will not popup any message boxes during install, including any error messages or the \"Installation was successful\" message box that pops up at the end of a successful install. --proxy \"http://proxyserver:port\" Use a http proxy. --meshdir \"C:\\Program Files\\Your Company Name\\Mesh Agent\" Specify the full path to the directory containing MeshAgent.exe if using custom agent branding for your MeshCentral instance. --nomesh Do not install MeshCentral agent during Tactical agent install. Note: Take Control, Remote Terminal and File Browser will not work. You can get full command line options from ( --help ).","title":"Optional Installer Args"},{"location":"install_agent/#scripting-agent-installation","text":"If you want to deploy the TRMM agent using AD, Intune, Mesh, TeamViewer, Group Policy GPO, etc, this is a sample CMD script for deploying Tactical. Install Scripts batch file powershell msi Note You will need to replace deployment url with your custom deployment URL: @ echo off REM Setup deployment URL set \"DeploymentURL=\" set \"Name=\" for /f \"usebackq tokens=* delims=\" %% # in ( `wmic service where \"name like 'tacticalrmm'\" get Name /Format:Value` ) do ( for /f \"tokens=* delims=\" %% g in ( \" %% #\" ) do set \"%%g\" ) if not defined Name ( echo Tactical RMM not found, installing now. if not exist c:\\ProgramData\\TacticalRMM\\temp md c:\\ProgramData\\TacticalRMM\\temp powershell Set-ExecutionPolicy -ExecutionPolicy Unrestricted powershell Add-MpPreference -ExclusionPath \"C:\\Program Files\\TacticalAgent\\*\" powershell Add-MpPreference -ExclusionPath \"C:\\Program Files\\Mesh Agent\\*\" powershell Add-MpPreference -ExclusionPath C:\\ProgramData\\TacticalRMM\\* cd c:\\ProgramData\\TacticalRMM\\temp powershell Invoke-WebRequest \" %DeploymentURL% \" -Outfile tactical.exe REM \"C:\\Program Files\\TacticalAgent\\unins000.exe\" /VERYSILENT tactical.exe rem exit /b 1 ) else ( echo Tactical RMM already installed Exiting Exit 0 ) # Update variables $deploymenturl = \"<deployment URL>\" $agentstoinstall = 1 # Replace with the number of agents to install if greater than 20 # Do not modify below here $randomSleepTime = if ( $agentstoinstall -gt 1 ) { Get-Random -Minimum 1 -Maximum (( $agentstoinstall + 1 ) * 2 ) } else { 1 } Start-Sleep -Seconds $randomSleepTime Invoke-WebRequest $deploymenturl -OutFile ( New-Item -Path \"c:\\ProgramData\\TacticalRMM\\temp\\trmminstall.exe\" -Force ) $proc = Start-Process \"c:\\ProgramData\\TacticalRMM\\temp\\trmminstall.exe\" -ArgumentList '-silent' -PassThru Wait-Process -InputObject $proc if ( $proc . ExitCode -ne 0 ) { Write-Warning \"$proc exited with status code $( $proc . ExitCode ) \" } Remove-Item -Path \"c:\\ProgramData\\TacticalRMM\\temp\\trmminstall.exe\" -Force Use Agents menu > Manage Deployments Generate a deployment link with an expiry date set to very far in the future, then access the link to download the executable. Create the msi Apply via GPO software deployment to the appropriate machines","title":"Scripting Agent Installation"},{"location":"install_agent/#script-for-full-agent-uninstall","text":"You can always use this to silently uninstall the agent on workstations: Choose your method: Windows Automatically Mac linux \"C:\\Program Files\\TacticalAgent\\unins000.exe\" /VERYSILENT Run: https://github.com/amidaware/tacticalrmm/blob/develop/api/tacticalrmm/core/mac_uninstall.sh Download: https://raw.githubusercontent.com/amidaware/tacticalrmm/develop/api/tacticalrmm/core/agent_linux.sh Run: ./agent_linux.sh uninstall","title":"Script for Full Agent Uninstall"},{"location":"install_agent/#reinstalling-mesh-and-reconnecting-to-trmm","text":"Run this from Send Command : \"C:\\Program Files\\Mesh Agent\\meshagent.exe\" -fullinstall Then use Agent Recovery > Mesh Agent , and choose Recover :","title":"Reinstalling Mesh and Reconnecting to TRMM"},{"location":"install_agent/#stuck-at-downloading-mesh-agent","text":"Make sure TRMM can connect to Mesh. Run: /rmm/api/env/bin/python /rmm/api/tacticalrmm/manage.py check_mesh If there's an error, make sure you have it setup correctly .","title":"Stuck at \"Downloading mesh agent...\"?"},{"location":"install_agent/#install-linux-agent-beta","text":"To install: 1. Go to rmm.yourdomain.com and login. 2. Click on Agents > Install Agent. 3. Choose the Client, Site, Server or Workstation and Architecture (change expiry if required) as well as Linux. 4. Click Download. 5. If downloaded on the Linux machine you want to add as an agent (otherwise copy to machine using WinSCP or similar) open terminal. 6. cd to the folder you have downloaded the script to. 7. Run chmod +x rmm-clientname-sitename-type.sh 8. Run sudo ./rmm-clientname-sitename-type.sh and wait for script to complete. If you changed the expiry time you could upload the script to any accessible server and deploy to multiple devices. -- debug Will print very verbose logging during agent install. Useful for troubleshooting agent install.","title":"Install Linux Agent (beta)"},{"location":"install_agent/#linux-deployment-link","text":"Currently there are no deploy links for Linux agents however you could use the following method if uploaded somewhere (website etc). An example deployment script would be (note there's an install token in that script, so delete it when done if you're concerned): wget scripturl chmod +x rmm.sh ./rmm.sh","title":"Linux Deployment Link"},{"location":"install_agent/#mac-agent-permissions","text":"macOS 15+ Sequoia macOS 14 Sonoma and earlier Enable Screen Sharing under settings. Top switch is the only item needed for TRMM access. Do not enable anything else. Warning Enabling Anyone may request permission to control screen and VNC viewers may control screen with password will enable Mac-proprietary VNC options that will make TRMM's VNC implementation fail. Note This enabled the native VNC client on MacOS. If you don't limit in the Allow access for to Only theses users make certain you don't have other users or users without passwords. Step 1: Open System Preferences Click on the Apple logo in the top-left corner of your screen. Select System Preferences from the dropdown menu. Step 2: Navigate to Security & Privacy In the System Preferences window, click on Security & Privacy. At the top of the Security & Privacy window, click the Privacy tab. Step 3: Grant Accessibility Permissions In the list on the left, scroll down and select Accessibility. If the padlock in the bottom-left corner is locked, click it and enter your password to make changes. Click the plus (+) button under the list on the right side. Navigate to and add tacticalagent from the /opt/tacticalagent/ folder and meshagent in the /opt/tacticalmesh/ folder. Ensure both are checked in the list to grant them Accessibility Permissions. Step 4: Grant Screen Recording Permissions In the list on the left, find and select Screen Recording. Unlock the padlock if necessary as described above. Click the plus (+) button and add meshagent from the /opt/tacticalmesh/ folder, or check the boxes next to them if they're already listed. A prompt may appear asking you to quit Meshcentral. Please do so to enable the permissions. Step 5: Grant Full Disk Access In the list on the left, scroll down and select Full Disk Access. Unlock the padlock if necessary as described above. Click the plus (+) button and add tacticalagent from the /opt/tacticalagent/ folder and meshagent from the /opt/tacticalmesh/ folder, or check the boxes next to them if they're already listed. Finalizing the Setup Restart Your Applications: Quit and restart Tactical RMM and Meshcentral for the changes to take effect. Restart Your Mac: If the applications do not recognize the new permissions, a system restart may be necessary.","title":"Mac Agent Permissions"},{"location":"install_considerations/","text":"Install Considerations \u00b6 Exclamation Paid Hosted TRMM is available! Stop reading now and open a ticket for pricing . There's pluses and minuses to each install type (Standard vs Docker which is currently unsupported ). Be aware that: There is no migration script. Once you've installed with one type there is no \"conversion\". You'll be installing a new server and migrating agents manually if you decide to go another way. Warning Tactical RMM does not support changing DNS names, so choose your names wisely. If you need to change your DNS name later a paid migration is possible. Debian vs Ubuntu \u00b6 Base RAM Usage OS 80MB Clean install of Debian 300MB Clean install of Ubuntu Because of RAM usage alone, we recommend Debian 12. Traditional Install - Officially supported \u00b6 It's a VM/machine. One storage device to backup if you want to do VM based backups. You have a backup and restore script. Much easier to troubleshoot when things go wrong. Faster performance / easier to fine tune and customize to your needs. Docker Install \u00b6 Docker is more complicated in concept: has volumes and images. Backup/restore is via Docker methods only. Docker has container replication/mirroring options for redundancy/multiple servers. NOT officially supported and NOT recommended for production use at the moment unless you are very comfortable managing/troubleshooting docker. Azure VMs \u00b6 Azure ranks their VM's in Series https://azure.microsoft.com/en-us/pricing/details/virtual-machines/series/ . Tactical RMM will run poorly in CPU limited VMs. So DO NOT use Series A or Series B VMs. You will need at least a Series F or better. Also, make sure there is no IO throttling / IOPS limits for the VM. The same applies for other big cloud providers that throttle low end VMs. Larger Installs \u00b6 If you're having more than 200 agents, that's a larger install. You're probably also a business and making (and saving?) money with Tactical RMM, you're supporting the project right? You should be aware of server defaults like Default script run time: 120 seconds Imagine you have 10 check, on 500 computers, running every 120 seconds. For checks alone, that's 5000 writes every 120 seconds, or 3.6 million database entries created every 24hrs. Default retention on check history is 30 days, so your check history database is probably averaging 108,000,000 records before regular data purges. That's a lot of write-wear on your SSD-based storage layer. Do you really need your Disk Space check running more than 1-2 times a day? Probably not. Also consider staggering the times of all your checks, so that each check is naturally spreading the load on your server at more random intervals instead of focusing all checks at exactly the same time. So in Summary: Please support the project, we do need it! Adjust script default run intervals Don't have checks (and tasks) all run at the same time If you have questions please open a ticket to discuss looking at your server and configuration, load testing, and giving recommendations.","title":"Install Considerations"},{"location":"install_considerations/#install-considerations","text":"Exclamation Paid Hosted TRMM is available! Stop reading now and open a ticket for pricing . There's pluses and minuses to each install type (Standard vs Docker which is currently unsupported ). Be aware that: There is no migration script. Once you've installed with one type there is no \"conversion\". You'll be installing a new server and migrating agents manually if you decide to go another way. Warning Tactical RMM does not support changing DNS names, so choose your names wisely. If you need to change your DNS name later a paid migration is possible.","title":"Install Considerations"},{"location":"install_considerations/#debian-vs-ubuntu","text":"Base RAM Usage OS 80MB Clean install of Debian 300MB Clean install of Ubuntu Because of RAM usage alone, we recommend Debian 12.","title":"Debian vs Ubuntu"},{"location":"install_considerations/#traditional-install-officially-supported","text":"It's a VM/machine. One storage device to backup if you want to do VM based backups. You have a backup and restore script. Much easier to troubleshoot when things go wrong. Faster performance / easier to fine tune and customize to your needs.","title":"Traditional Install - Officially supported"},{"location":"install_considerations/#docker-install","text":"Docker is more complicated in concept: has volumes and images. Backup/restore is via Docker methods only. Docker has container replication/mirroring options for redundancy/multiple servers. NOT officially supported and NOT recommended for production use at the moment unless you are very comfortable managing/troubleshooting docker.","title":"Docker Install"},{"location":"install_considerations/#azure-vms","text":"Azure ranks their VM's in Series https://azure.microsoft.com/en-us/pricing/details/virtual-machines/series/ . Tactical RMM will run poorly in CPU limited VMs. So DO NOT use Series A or Series B VMs. You will need at least a Series F or better. Also, make sure there is no IO throttling / IOPS limits for the VM. The same applies for other big cloud providers that throttle low end VMs.","title":"Azure VMs"},{"location":"install_considerations/#larger-installs","text":"If you're having more than 200 agents, that's a larger install. You're probably also a business and making (and saving?) money with Tactical RMM, you're supporting the project right? You should be aware of server defaults like Default script run time: 120 seconds Imagine you have 10 check, on 500 computers, running every 120 seconds. For checks alone, that's 5000 writes every 120 seconds, or 3.6 million database entries created every 24hrs. Default retention on check history is 30 days, so your check history database is probably averaging 108,000,000 records before regular data purges. That's a lot of write-wear on your SSD-based storage layer. Do you really need your Disk Space check running more than 1-2 times a day? Probably not. Also consider staggering the times of all your checks, so that each check is naturally spreading the load on your server at more random intervals instead of focusing all checks at exactly the same time. So in Summary: Please support the project, we do need it! Adjust script default run intervals Don't have checks (and tasks) all run at the same time If you have questions please open a ticket to discuss looking at your server and configuration, load testing, and giving recommendations.","title":"Larger Installs"},{"location":"install_docker/","text":"Docker Setup \u00b6 Danger Docker is not officially supported at the moment and not recommended for production use unless you are an advanced docker user and very comfortable managing and troubleshooting docker. Please read the docker install considerations before continuing. Install Docker \u00b6 Install docker. Please keep in mind that the docker package is usually called docker.io in debian based distros including ubuntu Create the DNS A records \u00b6 Warning All 3 domain names have to be at the same subdomain level because you only get one LetsEncrypt wildcard cert, and it'll only apply to that level of DNS name. We'll be using example.com as our domain for this example. Info The RMM uses 3 different sites. The Vue frontend e.g. rmm.example.com which is where you'll be accessing your RMM from the browser, the REST backend e.g. api.example.com and MeshCentral e.g. mesh.example.com Get the public IP of your server with curl https://icanhazip.tacticalrmm.io Open the DNS manager of wherever the domain you purchased is hosted. Create 3 A records: rmm , api and mesh and point them to the public IP of your server: Acquire Let's Encrypt wildcard certs with Certbot \u00b6 Warning If the Let's Encrypt wildcard certificates are not provided, a self-signed certificate will be generated and most agent functions won't work. 1 ) Install Certbot sudo apt-get install certbot 2 ) Generate the wildcard Let's Encrypt certificates We're using the DNS-01 challenge method . 3 ) Deploy the TXT record in your DNS manager Warning TXT records can take anywhere from 1 minute to a few hours to propagate depending on your DNS provider. You should verify the TXT record has been deployed first before pressing Enter. A quick way to check is with the following command: dig -t txt _acme-challenge.example.com or test using: https://viewdns.info/dnsrecord/ Enter: _acme-challenge.example.com 4 ) Request ncrypt wildcard cert sudo certbot certonly --manual -d *.example.com --agree-tos --no-bootstrap --preferred-challenges dns Note Replace example.com with your root domain. Configure DNS and firewall \u00b6 You will need to add DNS entries so that the three subdomains resolve to the IP of the docker host. There is a reverse proxy running that will route the hostnames to the correct container. On the host, you will need to ensure the firewall is open on TCP port 443. Setting up the environment \u00b6 Get the docker-compose and .env.example file on the host you which to install on wget https://raw.githubusercontent.com/amidaware/tacticalrmm/master/docker/docker-compose.yml wget https://raw.githubusercontent.com/amidaware/tacticalrmm/master/docker/.env.example mv .env.example .env Change the values in .env to match your environment. When supplying certificates through Let's Encrypt, see the section below about base64 encoding the certificate files. Base64 encoding certificates to pass as env variables \u00b6 Use the below command to add the the correct values to the .env. Running this command multiple times will add redundant entries, so those will need to be removed. Let's Encrypt certs paths are below. Replace ${rootdomain} with your own. public key /etc/letsencrypt/live/${rootdomain}/fullchain.pem private key /etc/letsencrypt/live/${rootdomain}/privkey.pem echo \"CERT_PUB_KEY= $( sudo base64 -w 0 /path/to/pub/key ) \" >> .env echo \"CERT_PRIV_KEY= $( sudo base64 -w 0 /path/to/priv/key ) \" >> .env Starting the environment \u00b6 Run the below command to start the environment: docker compose up -d Removing the -d will start the containers in the foreground and is useful for debugging. If you get a error saying you don't have permission you can add yourself to the docker group with: sudo usermod -aG docker [user] You may need to log out and back in for it to take full effect. Login \u00b6 Navigate to https://rmm.example.com and login with the username/password you created during install. Once logged in, you will be redirected to the initial setup page. Create your first client/site and choose the default timezone. Note About Backups \u00b6 The backup script does not work with docker. To backup your install use standard docker backup/restore processes. Or, you can look at larseberhardt/TRMM-Docker-Backup-Script .","title":"Docker Install"},{"location":"install_docker/#docker-setup","text":"Danger Docker is not officially supported at the moment and not recommended for production use unless you are an advanced docker user and very comfortable managing and troubleshooting docker. Please read the docker install considerations before continuing.","title":"Docker Setup"},{"location":"install_docker/#install-docker","text":"Install docker. Please keep in mind that the docker package is usually called docker.io in debian based distros including ubuntu","title":"Install Docker"},{"location":"install_docker/#create-the-dns-a-records","text":"Warning All 3 domain names have to be at the same subdomain level because you only get one LetsEncrypt wildcard cert, and it'll only apply to that level of DNS name. We'll be using example.com as our domain for this example. Info The RMM uses 3 different sites. The Vue frontend e.g. rmm.example.com which is where you'll be accessing your RMM from the browser, the REST backend e.g. api.example.com and MeshCentral e.g. mesh.example.com Get the public IP of your server with curl https://icanhazip.tacticalrmm.io Open the DNS manager of wherever the domain you purchased is hosted. Create 3 A records: rmm , api and mesh and point them to the public IP of your server:","title":"Create the DNS A records"},{"location":"install_docker/#acquire-lets-encrypt-wildcard-certs-with-certbot","text":"Warning If the Let's Encrypt wildcard certificates are not provided, a self-signed certificate will be generated and most agent functions won't work. 1 ) Install Certbot sudo apt-get install certbot 2 ) Generate the wildcard Let's Encrypt certificates We're using the DNS-01 challenge method . 3 ) Deploy the TXT record in your DNS manager Warning TXT records can take anywhere from 1 minute to a few hours to propagate depending on your DNS provider. You should verify the TXT record has been deployed first before pressing Enter. A quick way to check is with the following command: dig -t txt _acme-challenge.example.com or test using: https://viewdns.info/dnsrecord/ Enter: _acme-challenge.example.com 4 ) Request ncrypt wildcard cert sudo certbot certonly --manual -d *.example.com --agree-tos --no-bootstrap --preferred-challenges dns Note Replace example.com with your root domain.","title":"Acquire Let's Encrypt wildcard certs with Certbot"},{"location":"install_docker/#configure-dns-and-firewall","text":"You will need to add DNS entries so that the three subdomains resolve to the IP of the docker host. There is a reverse proxy running that will route the hostnames to the correct container. On the host, you will need to ensure the firewall is open on TCP port 443.","title":"Configure DNS and firewall"},{"location":"install_docker/#setting-up-the-environment","text":"Get the docker-compose and .env.example file on the host you which to install on wget https://raw.githubusercontent.com/amidaware/tacticalrmm/master/docker/docker-compose.yml wget https://raw.githubusercontent.com/amidaware/tacticalrmm/master/docker/.env.example mv .env.example .env Change the values in .env to match your environment. When supplying certificates through Let's Encrypt, see the section below about base64 encoding the certificate files.","title":"Setting up the environment"},{"location":"install_docker/#base64-encoding-certificates-to-pass-as-env-variables","text":"Use the below command to add the the correct values to the .env. Running this command multiple times will add redundant entries, so those will need to be removed. Let's Encrypt certs paths are below. Replace ${rootdomain} with your own. public key /etc/letsencrypt/live/${rootdomain}/fullchain.pem private key /etc/letsencrypt/live/${rootdomain}/privkey.pem echo \"CERT_PUB_KEY= $( sudo base64 -w 0 /path/to/pub/key ) \" >> .env echo \"CERT_PRIV_KEY= $( sudo base64 -w 0 /path/to/priv/key ) \" >> .env","title":"Base64 encoding certificates to pass as env variables"},{"location":"install_docker/#starting-the-environment","text":"Run the below command to start the environment: docker compose up -d Removing the -d will start the containers in the foreground and is useful for debugging. If you get a error saying you don't have permission you can add yourself to the docker group with: sudo usermod -aG docker [user] You may need to log out and back in for it to take full effect.","title":"Starting the environment"},{"location":"install_docker/#login","text":"Navigate to https://rmm.example.com and login with the username/password you created during install. Once logged in, you will be redirected to the initial setup page. Create your first client/site and choose the default timezone.","title":"Login"},{"location":"install_docker/#note-about-backups","text":"The backup script does not work with docker. To backup your install use standard docker backup/restore processes. Or, you can look at larseberhardt/TRMM-Docker-Backup-Script .","title":"Note About Backups"},{"location":"install_server/","text":"Installation \u00b6 General Information Option 1: Easy Install on a VPS Option 2: Install behind NAT Router Option 3: Installs by Network Wizards Update Regularly General Information \u00b6 Paid Hosting Available: Auto-maintained/updated servers with Code Signing for you. Get in touch to find out what we can do for you! System Requirements \u00b6 A fresh Linux VM running either Debian 11, Debian 12 or Ubuntu 22.04 LTS with at least 4GB RAM on x64 or aarch64 (arm64) architecture. Warning The provided install script assumes a fresh server with no software installed on it. Attempting to run it on an existing server with other services will break things and the install will fail. Danger The installation script configures a production-grade reverse proxy using Nginx, which manages TLS termination and appropriately routes all requests to the correct backends. Consequently, there's no need for an additional proxy in front of your instance, as it will lead to complications. If you opt to use another reverse proxy (e.g., NPM, HAproxy) in conjunction with the existing Nginx reverse proxy (which is essential for TRMM to function correctly) you must address potential challenges arising from double proxying, and you should NOT expect your install to function properly out of the box. Be advised, configurations involving a secondary reverse proxy will be considered \"unsupported.\" This designation is not to deter modifications but stems from the development team's capacity constraints. Their primary focus remains on enhancing the core software, and they cannot support an endless variety of setups. Check unsupported proxies and unsupported guidelines for more info. Note The install script has been tested on the following public cloud providers: Oracle Cloud Free Tier (arm64), DigitalOcean, Linode, Vultr, Hetzner (highly recommended), AWS, Google Cloud and Azure, as well as behind NAT on Hyper-V, ESXi and Proxmox (CT's on Proxmox are unsupported , only use VMs). Note CPU: 1 core is fine for < 200 agents with limited checks/tasks. Disk space and speed are dependent on your use case. Of course faster is better SSD/NVMe. Space is dependent on how long you're keeping historical data, how many checks/script runs and their output size. 50GB should be fine for < 12months of history on < 200 agents with < 30 checks/tasks run at reasonable time intervals. Tip Enable logging of your terminal output. A good Windows SSH client is MobaXTerm . It'll automatically log everything so if you need it later (like install logs because you have a 50x error trying to login after) they'll be easy to grab and share with support. It has an integrated SCP client too! Install Requirements \u00b6 A TOTP based authenticator app. Some popular ones are Google Authenticator, Authy, and Microsoft Authenticator. Warning Per RFC 1304 special chars in domain names are not allowed (like _ ). Only a-z 0-9 and the hyphen (-) Avoid sub-sub domains greater than 4. (Best: rmm.example.com Good: rmm.corp.example.com Bad: rmm.corp.xyz.example.com) Country TLDs like co.uk count as one layer. Option 1: Easy Install on a VPS \u00b6 Install on a VPS: DigitalOcean, Linode, Vultr, Hetzner (highly recommended), AWS, Google Cloud and Azure to name a few. Step 1 - Run Updates on OS \u00b6 SSH into the server as root . Install the pre-reqs and apply the latest updates: apt update apt install -y wget curl sudo ufw apt -y upgrade If a new kernel is installed, reboot the server with the reboot command. Step 2 - Create a User \u00b6 Create a user named tactical to run the RMM and add it to the sudoers group. useradd -m -G sudo -s /bin/bash tactical passwd tactical Step 3 - Setup the firewall (optional but highly recommended) \u00b6 Info Skip this step if your VM is not publicly exposed to the world e.g. running behind NAT. You should setup the firewall rules in your router instead. Port 443 TCP: For agents and tech login to rmm and mesh. Port 22 TCP: For SSH, server administration only ufw default deny incoming ufw default allow outgoing ufw allow https Info SSH (port 22 TCP) is only required for you to remotely login and do basic server administration for your RMM. It is not needed for any agent communication. SSH Firewall Rule Restrict SSH Allow all SSH Allow SSH from only allowed IP's ( highly recommended) ufw allow proto tcp from X.X.X.X to any port 22 ufw allow proto tcp from X.X.X.X to any port 22 Allow SSH from everywhere ( not recommended) ufw allow ssh Enable and activate the firewall: ufw enable && ufw reload Note You should/will never login to the server as root again unless something has gone horribly wrong, and you're working with the developers. Step 4 - Create DNS A records \u00b6 Warning All 3 domain names MUST be at the same subdomain level because you only get one LetsEncrypt wildcard cert, and it'll only apply to that level of DNS name. We'll be using example.com as our domain for this example. Info The RMM uses 3 different sites. The Vue frontend e.g. rmm.example.com which is where you'll be accessing your RMM from the browser, the REST backend e.g. api.example.com and MeshCentral e.g. mesh.example.com rmm. api. and mesh. are what we recommend, but you can use whatever you want if they're already in use. Get the public IP of your server with curl https://icanhazip.tacticalrmm.io Open the DNS manager of wherever the domain you purchased is hosted. Create 3 A records: rmm , api and mesh and point them to the public IP of your server: Step 5 - Run the install script \u00b6 Switch to the tactical user: su - tactical Tip If you can snapshot do that now so you can quickly restore to this point again and re-run the install in case something goes wrong with the install script. Download and run the install script: wget https://raw.githubusercontent.com/amidaware/tacticalrmm/master/install.sh chmod +x install.sh ./install.sh Info Already have your own SSL certificate? Call the install script with the --use-own-cert flag, like this: ./install.sh --use-own-cert Ensure your cert and private key exist on the server as the install script will prompt you for the locations of these 2 files. Also ensure that it is a legitimate, trusted certificate and includes the full chain for proper validation. Do not use this option with self-signed certs. Danger You can install with the --insecure switch to use any DNS name you want. Self signed certs will be generated for all the DNS names, and all SSL certificate chain validation will be disabled in TRMM. ./install.sh --insecure Requirements : You MUST open all 3 subdomains in your web browser and accept the security warning for each site BEFORE LOGIN or you will get \"Backend is offline (network error)\" errors. \u2705 Quick install for easy test driving \u2705 No public DNS name needed. Use irulez.local or any DNS name you want. \u2705 No cert renewals \u274c All agent communication is vulnerable to MITM compromise and can be hacked. \u274c You can't convert from an --insecure to trusted cert install without reinstalling all your agents \u274c Can't use Agent install Deployment links. Manual installation method only \u274c Restore does not work Answer the initial questions when prompted. Replace example.com with your domain. Step 6 - Deploy the TXT record in your DNS manager for Let's Encrypt wildcard certs \u00b6 Skip this step if using your own certs or using self-signed certs. Warning TXT records can take anywhere from 1 minute to a few hours to propagate depending on your DNS provider. You should verify the TXT record has been deployed first before pressing Enter. A quick way to check is with the following command: dig -t txt _acme-challenge.example.com (not from the TRMM server) or test using: https://viewdns.info/dnsrecord/ Enter: _acme-challenge.example.com Create a login for the RMM web UI: A bunch of URLS / usernames / passwords will be printed out at the end of the install script. Save these somewhere safe. Recover them if you didn't Step 7 - Login \u00b6 Navigate to https://rmm.example.com and login with the username/password you created during install. Once logged in, you will be redirected to the initial setup page. Create your first client/site and choose the default timezone. You're Done Update Regularly Option 2: Install Behind NAT Router \u00b6 Install in your local network using: Dedicated hardware, Hyper-V, Proxmox or ESXi. All been tested and work fine. Do everything from Option 1: Easy Install If You Only Have Agents on the Private Network / Subnet \u00b6 Make sure your local DNS server (or agents hosts file) have your Tactical RMM server IP addresses for the 3 domain names: rmm , api and mesh Agents Exist Outside the Private Network / Subnet - Setup Port Forwarding \u00b6 If you have agents outside your local network: Make sure the public DNS servers have A records for the 3 Tactical RMM server domain names: rmm , api and mesh Login to your router / NAT device. Set your TRMM server as a static IP (Using a DHCP reservation is usually safer). Port forward TCP 443 to your TRMM servers private IP address. Note https://portforward.com/ can help with Port Forwarding setup You're Done Update Regularly Option 3: Installs by Network Wizards \u00b6 Use the scripts above. Requirements \u00b6 TLD domain name which is internet resolvable (this is for a LetsEncrypt DNS wildcard request during the install script validated by DNS txt record ). Test using: https://viewdns.info/dnsrecord/ or https://dnschecker.org/ . Enter: _acme-challenge.example.com as TXT Agents need to be able to connect to your server via DNS lookup (hosts file, local DNS, smoke signals etc.). Test from agent: ping rmm.example.com . Should result in the IP of your Tactical RMM server. Test from agent: ping api.example.com . Should result in the IP of your Tactical RMM server. Test from agent: ping mesh.example.com . Should result in the IP of your Tactical RMM server. Note Did you notice #2 doesn't need to be something publicly available? That's it. You're a wizard, you know how to satisfy these 2 items. You'll probably enjoy browsing thru the Unsupported section of the docs. Update Regularly \u00b6 We've said it before, we'll say it again. We recommend regular updates. Every 2-3 months. Do it when you update your SSL certs. Install Video Walkthrus \u00b6","title":"Traditional Install"},{"location":"install_server/#installation","text":"General Information Option 1: Easy Install on a VPS Option 2: Install behind NAT Router Option 3: Installs by Network Wizards Update Regularly","title":"Installation"},{"location":"install_server/#general-information","text":"Paid Hosting Available: Auto-maintained/updated servers with Code Signing for you. Get in touch to find out what we can do for you!","title":"General Information"},{"location":"install_server/#system-requirements","text":"A fresh Linux VM running either Debian 11, Debian 12 or Ubuntu 22.04 LTS with at least 4GB RAM on x64 or aarch64 (arm64) architecture. Warning The provided install script assumes a fresh server with no software installed on it. Attempting to run it on an existing server with other services will break things and the install will fail. Danger The installation script configures a production-grade reverse proxy using Nginx, which manages TLS termination and appropriately routes all requests to the correct backends. Consequently, there's no need for an additional proxy in front of your instance, as it will lead to complications. If you opt to use another reverse proxy (e.g., NPM, HAproxy) in conjunction with the existing Nginx reverse proxy (which is essential for TRMM to function correctly) you must address potential challenges arising from double proxying, and you should NOT expect your install to function properly out of the box. Be advised, configurations involving a secondary reverse proxy will be considered \"unsupported.\" This designation is not to deter modifications but stems from the development team's capacity constraints. Their primary focus remains on enhancing the core software, and they cannot support an endless variety of setups. Check unsupported proxies and unsupported guidelines for more info. Note The install script has been tested on the following public cloud providers: Oracle Cloud Free Tier (arm64), DigitalOcean, Linode, Vultr, Hetzner (highly recommended), AWS, Google Cloud and Azure, as well as behind NAT on Hyper-V, ESXi and Proxmox (CT's on Proxmox are unsupported , only use VMs). Note CPU: 1 core is fine for < 200 agents with limited checks/tasks. Disk space and speed are dependent on your use case. Of course faster is better SSD/NVMe. Space is dependent on how long you're keeping historical data, how many checks/script runs and their output size. 50GB should be fine for < 12months of history on < 200 agents with < 30 checks/tasks run at reasonable time intervals. Tip Enable logging of your terminal output. A good Windows SSH client is MobaXTerm . It'll automatically log everything so if you need it later (like install logs because you have a 50x error trying to login after) they'll be easy to grab and share with support. It has an integrated SCP client too!","title":"System Requirements"},{"location":"install_server/#install-requirements","text":"A TOTP based authenticator app. Some popular ones are Google Authenticator, Authy, and Microsoft Authenticator. Warning Per RFC 1304 special chars in domain names are not allowed (like _ ). Only a-z 0-9 and the hyphen (-) Avoid sub-sub domains greater than 4. (Best: rmm.example.com Good: rmm.corp.example.com Bad: rmm.corp.xyz.example.com) Country TLDs like co.uk count as one layer.","title":"Install Requirements"},{"location":"install_server/#option-1-easy-install-on-a-vps","text":"Install on a VPS: DigitalOcean, Linode, Vultr, Hetzner (highly recommended), AWS, Google Cloud and Azure to name a few.","title":"Option 1: Easy Install on a VPS"},{"location":"install_server/#step-1-run-updates-on-os","text":"SSH into the server as root . Install the pre-reqs and apply the latest updates: apt update apt install -y wget curl sudo ufw apt -y upgrade If a new kernel is installed, reboot the server with the reboot command.","title":"Step 1 - Run Updates on OS"},{"location":"install_server/#step-2-create-a-user","text":"Create a user named tactical to run the RMM and add it to the sudoers group. useradd -m -G sudo -s /bin/bash tactical passwd tactical","title":"Step 2 - Create a User"},{"location":"install_server/#step-3-setup-the-firewall-optional-but-highly-recommended","text":"Info Skip this step if your VM is not publicly exposed to the world e.g. running behind NAT. You should setup the firewall rules in your router instead. Port 443 TCP: For agents and tech login to rmm and mesh. Port 22 TCP: For SSH, server administration only ufw default deny incoming ufw default allow outgoing ufw allow https Info SSH (port 22 TCP) is only required for you to remotely login and do basic server administration for your RMM. It is not needed for any agent communication. SSH Firewall Rule Restrict SSH Allow all SSH Allow SSH from only allowed IP's ( highly recommended) ufw allow proto tcp from X.X.X.X to any port 22 ufw allow proto tcp from X.X.X.X to any port 22 Allow SSH from everywhere ( not recommended) ufw allow ssh Enable and activate the firewall: ufw enable && ufw reload Note You should/will never login to the server as root again unless something has gone horribly wrong, and you're working with the developers.","title":"Step 3 - Setup the firewall (optional but highly recommended)"},{"location":"install_server/#step-4-create-dns-a-records","text":"Warning All 3 domain names MUST be at the same subdomain level because you only get one LetsEncrypt wildcard cert, and it'll only apply to that level of DNS name. We'll be using example.com as our domain for this example. Info The RMM uses 3 different sites. The Vue frontend e.g. rmm.example.com which is where you'll be accessing your RMM from the browser, the REST backend e.g. api.example.com and MeshCentral e.g. mesh.example.com rmm. api. and mesh. are what we recommend, but you can use whatever you want if they're already in use. Get the public IP of your server with curl https://icanhazip.tacticalrmm.io Open the DNS manager of wherever the domain you purchased is hosted. Create 3 A records: rmm , api and mesh and point them to the public IP of your server:","title":"Step 4 - Create DNS A records"},{"location":"install_server/#step-5-run-the-install-script","text":"Switch to the tactical user: su - tactical Tip If you can snapshot do that now so you can quickly restore to this point again and re-run the install in case something goes wrong with the install script. Download and run the install script: wget https://raw.githubusercontent.com/amidaware/tacticalrmm/master/install.sh chmod +x install.sh ./install.sh Info Already have your own SSL certificate? Call the install script with the --use-own-cert flag, like this: ./install.sh --use-own-cert Ensure your cert and private key exist on the server as the install script will prompt you for the locations of these 2 files. Also ensure that it is a legitimate, trusted certificate and includes the full chain for proper validation. Do not use this option with self-signed certs. Danger You can install with the --insecure switch to use any DNS name you want. Self signed certs will be generated for all the DNS names, and all SSL certificate chain validation will be disabled in TRMM. ./install.sh --insecure Requirements : You MUST open all 3 subdomains in your web browser and accept the security warning for each site BEFORE LOGIN or you will get \"Backend is offline (network error)\" errors. \u2705 Quick install for easy test driving \u2705 No public DNS name needed. Use irulez.local or any DNS name you want. \u2705 No cert renewals \u274c All agent communication is vulnerable to MITM compromise and can be hacked. \u274c You can't convert from an --insecure to trusted cert install without reinstalling all your agents \u274c Can't use Agent install Deployment links. Manual installation method only \u274c Restore does not work Answer the initial questions when prompted. Replace example.com with your domain.","title":"Step 5 - Run the install script"},{"location":"install_server/#step-6-deploy-the-txt-record-in-your-dns-manager-for-lets-encrypt-wildcard-certs","text":"Skip this step if using your own certs or using self-signed certs. Warning TXT records can take anywhere from 1 minute to a few hours to propagate depending on your DNS provider. You should verify the TXT record has been deployed first before pressing Enter. A quick way to check is with the following command: dig -t txt _acme-challenge.example.com (not from the TRMM server) or test using: https://viewdns.info/dnsrecord/ Enter: _acme-challenge.example.com Create a login for the RMM web UI: A bunch of URLS / usernames / passwords will be printed out at the end of the install script. Save these somewhere safe. Recover them if you didn't","title":"Step 6 - Deploy the TXT record in your DNS manager for Let's Encrypt wildcard certs"},{"location":"install_server/#step-7-login","text":"Navigate to https://rmm.example.com and login with the username/password you created during install. Once logged in, you will be redirected to the initial setup page. Create your first client/site and choose the default timezone. You're Done Update Regularly","title":"Step 7 - Login"},{"location":"install_server/#option-2-install-behind-nat-router","text":"Install in your local network using: Dedicated hardware, Hyper-V, Proxmox or ESXi. All been tested and work fine. Do everything from Option 1: Easy Install","title":"Option 2: Install Behind NAT Router"},{"location":"install_server/#if-you-only-have-agents-on-the-private-network-subnet","text":"Make sure your local DNS server (or agents hosts file) have your Tactical RMM server IP addresses for the 3 domain names: rmm , api and mesh","title":"If You Only Have Agents on the Private Network / Subnet"},{"location":"install_server/#agents-exist-outside-the-private-network-subnet-setup-port-forwarding","text":"If you have agents outside your local network: Make sure the public DNS servers have A records for the 3 Tactical RMM server domain names: rmm , api and mesh Login to your router / NAT device. Set your TRMM server as a static IP (Using a DHCP reservation is usually safer). Port forward TCP 443 to your TRMM servers private IP address. Note https://portforward.com/ can help with Port Forwarding setup You're Done Update Regularly","title":"Agents Exist Outside the Private Network / Subnet - Setup Port Forwarding"},{"location":"install_server/#option-3-installs-by-network-wizards","text":"Use the scripts above.","title":"Option 3: Installs by Network Wizards"},{"location":"install_server/#requirements","text":"TLD domain name which is internet resolvable (this is for a LetsEncrypt DNS wildcard request during the install script validated by DNS txt record ). Test using: https://viewdns.info/dnsrecord/ or https://dnschecker.org/ . Enter: _acme-challenge.example.com as TXT Agents need to be able to connect to your server via DNS lookup (hosts file, local DNS, smoke signals etc.). Test from agent: ping rmm.example.com . Should result in the IP of your Tactical RMM server. Test from agent: ping api.example.com . Should result in the IP of your Tactical RMM server. Test from agent: ping mesh.example.com . Should result in the IP of your Tactical RMM server. Note Did you notice #2 doesn't need to be something publicly available? That's it. You're a wizard, you know how to satisfy these 2 items. You'll probably enjoy browsing thru the Unsupported section of the docs.","title":"Requirements"},{"location":"install_server/#update-regularly","text":"We've said it before, we'll say it again. We recommend regular updates. Every 2-3 months. Do it when you update your SSL certs.","title":"Update Regularly"},{"location":"install_server/#install-video-walkthrus","text":"","title":"Install Video Walkthrus"},{"location":"license/","text":"Tactical RMM License Version 1.0 \u00b6 Text of license:\u2003\u2003\u2003Copyright \u00a9 2022 AmidaWare LLC. All rights reserved. \u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003 Amending the text of this license is not permitted. Trade Mark:\u2003\u2003\u2003\u2003\"Tactical RMM\" is a trade mark of AmidaWare LLC. Licensor:\u2003\u2003\u2003\u2003\u2003 AmidaWare LLC of 1968 S Coast Hwy PMB 3847 Laguna Beach, CA, USA. Licensed Software:\u2003 The software known as Tactical RMM Version v0.12.0 (and all subsequent releases and versions) and the Tactical RMM Agent v2.0.0 (and all subsequent releases and versions). 1. Preamble \u00b6 The Licensed Software is designed to facilitate the remote monitoring and management (RMM) of networks, systems, servers, computers and other devices. The Licensed Software is made available primarily for use by organisations and managed service providers for monitoring and management purposes. The Tactical RMM License is not an open-source software license. This license contains certain restrictions on the use of the Licensed Software. For example the functionality of the Licensed Software may not be made available as part of a SaaS (Software-as-a-Service) service or product to provide a commercial or for-profit service without the express prior permission of the Licensor. 2. License Grant \u00b6 Permission is hereby granted, free of charge, on a non-exclusive basis, to copy, modify, create derivative works and use the Licensed Software in source and binary forms subject to the following terms and conditions. No additional rights will be implied under this license. The hosting and use of the Licensed Software to monitor and manage in-house networks/systems and/or customer networks/systems is permitted. This license does not allow the functionality of the Licensed Software (whether in whole or in part) or a modified version of the Licensed Software or a derivative work to be used or otherwise made available as part of any other commercial or for-profit service, including, without limitation, any of the following: * a service allowing third parties to interact remotely through a computer network; * as part of a SaaS service or product; * as part of the provision of a managed hosting service or product; * the offering of installation and/or configuration services; * the offer for sale, distribution or sale of any service or product (whether or not branded as Tactical RMM). The prior written approval of AmidaWare LLC must be obtained for all commercial use and/or for-profit service use of the (i) Licensed Software (whether in whole or in part), (ii) a modified version of the Licensed Software and/or (iii) a derivative work. The terms of this license apply to all copies of the Licensed Software (including modified versions) and derivative works. All use of the Licensed Software must immediately cease if use breaches the terms of this license. 3. Derivative Works \u00b6 If a derivative work is created which is based on or otherwise incorporates all or any part of the Licensed Software, and the derivative work is made available to any other person, the complete corresponding machine readable source code (including all changes made to the Licensed Software) must accompany the derivative work and be made publicly available online. 4. Copyright Notice \u00b6 The following copyright notice shall be included in all copies of the Licensed Software: \u2003\u2003\u2003Copyright \u00a9 2022 AmidaWare LLC. \u2003\u2003\u2003Licensed under the Tactical RMM License Version 1.0 (the \u201cLicense\u201d). \u2003\u2003\u2003You may only use the Licensed Software in accordance with the License. \u2003\u2003\u2003A copy of the License is available at: https://license.tacticalrmm.com 5. Disclaimer of Warranty \u00b6 THE LICENSED SOFTWARE IS PROVIDED \"AS IS\". TO THE FULLEST EXTENT PERMISSIBLE AT LAW ALL CONDITIONS, WARRANTIES OR OTHER TERMS OF ANY KIND WHICH MIGHT HAVE EFFECT OR BE IMPLIED OR INCORPORATED, WHETHER BY STATUTE, COMMON LAW OR OTHERWISE ARE HEREBY EXCLUDED, INCLUDING THE CONDITIONS, WARRANTIES OR OTHER TERMS AS TO SATISFACTORY QUALITY AND/OR MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE, THE USE OF REASONABLE SKILL AND CARE AND NON-INFRINGEMENT. 6. Limits of Liability \u00b6 THE FOLLOWING EXCLUSIONS SHALL APPLY TO THE FULLEST EXTENT PERMISSIBLE AT LAW. NEITHER THE AUTHORS NOR THE COPYRIGHT HOLDERS SHALL IN ANY CIRCUMSTANCES HAVE ANY LIABILITY FOR ANY CLAIM, LOSSES, DAMAGES OR OTHER LIABILITY, WHETHER THE SAME ARE SUFFERED DIRECTLY OR INDIRECTLY OR ARE IMMEDIATE OR CONSEQUENTIAL, AND WHETHER THE SAME ARISE IN CONTRACT, TORT OR DELICT (INCLUDING NEGLIGENCE) OR OTHERWISE HOWSOEVER ARISING FROM, OUT OF OR IN CONNECTION WITH THE LICENSED SOFTWARE OR THE USE OR INABILITY TO USE THE LICENSED SOFTWARE OR OTHER DEALINGS IN THE LICENSED SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH LOSS OR DAMAGE. THE FOREGOING EXCLUSIONS SHALL INCLUDE, WITHOUT LIMITATION, LIABILITY FOR ANY LOSSES OR DAMAGES WHICH FALL WITHIN ANY OF THE FOLLOWING CATEGORIES: SPECIAL, EXEMPLARY, OR INCIDENTAL LOSS OR DAMAGE, LOSS OF PROFITS, LOSS OF ANTICIPATED SAVINGS, LOSS OF BUSINESS OPPORTUNITY, LOSS OF GOODWILL, AND LOSS OR CORRUPTION OF DATA. 7. Termination \u00b6 This license shall terminate with immediate effect if there is a material breach of any of its terms. 8. No partnership, agency or joint venture \u00b6 Nothing in this license agreement is intended to, or shall be deemed to, establish any partnership or joint venture or any relationship of agency between AmidaWare LLC and any other person. 9. No endorsement \u00b6 The names of the authors and/or the copyright holders must not be used to promote or endorse any products or services which are in any way derived from the Licensed Software without prior written consent. 10. Trademarks \u00b6 No permission is granted to use the trademark \u201cTactical RMM\u201d or any other trade name, trademark, service mark or product name of AmidaWare LLC except to the extent necessary to comply with the notice requirements in Section 4 (Copyright Notice). 11. Entire agreement \u00b6 This license contains the whole agreement relating to its subject matter. 12. Severance \u00b6 If any provision or part-provision of this license is or becomes invalid, illegal or unenforceable, it shall be deemed deleted, but that shall not affect the validity and enforceability of the rest of this license. 13. Acceptance of these terms \u00b6 The terms and conditions of this license are accepted by copying, downloading, installing, redistributing, or otherwise using the Licensed Software.","title":"License"},{"location":"license/#tactical-rmm-license-version-10","text":"Text of license:\u2003\u2003\u2003Copyright \u00a9 2022 AmidaWare LLC. All rights reserved. \u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003 Amending the text of this license is not permitted. Trade Mark:\u2003\u2003\u2003\u2003\"Tactical RMM\" is a trade mark of AmidaWare LLC. Licensor:\u2003\u2003\u2003\u2003\u2003 AmidaWare LLC of 1968 S Coast Hwy PMB 3847 Laguna Beach, CA, USA. Licensed Software:\u2003 The software known as Tactical RMM Version v0.12.0 (and all subsequent releases and versions) and the Tactical RMM Agent v2.0.0 (and all subsequent releases and versions).","title":"Tactical RMM License Version 1.0"},{"location":"license/#1-preamble","text":"The Licensed Software is designed to facilitate the remote monitoring and management (RMM) of networks, systems, servers, computers and other devices. The Licensed Software is made available primarily for use by organisations and managed service providers for monitoring and management purposes. The Tactical RMM License is not an open-source software license. This license contains certain restrictions on the use of the Licensed Software. For example the functionality of the Licensed Software may not be made available as part of a SaaS (Software-as-a-Service) service or product to provide a commercial or for-profit service without the express prior permission of the Licensor.","title":"1. Preamble"},{"location":"license/#2-license-grant","text":"Permission is hereby granted, free of charge, on a non-exclusive basis, to copy, modify, create derivative works and use the Licensed Software in source and binary forms subject to the following terms and conditions. No additional rights will be implied under this license. The hosting and use of the Licensed Software to monitor and manage in-house networks/systems and/or customer networks/systems is permitted. This license does not allow the functionality of the Licensed Software (whether in whole or in part) or a modified version of the Licensed Software or a derivative work to be used or otherwise made available as part of any other commercial or for-profit service, including, without limitation, any of the following: * a service allowing third parties to interact remotely through a computer network; * as part of a SaaS service or product; * as part of the provision of a managed hosting service or product; * the offering of installation and/or configuration services; * the offer for sale, distribution or sale of any service or product (whether or not branded as Tactical RMM). The prior written approval of AmidaWare LLC must be obtained for all commercial use and/or for-profit service use of the (i) Licensed Software (whether in whole or in part), (ii) a modified version of the Licensed Software and/or (iii) a derivative work. The terms of this license apply to all copies of the Licensed Software (including modified versions) and derivative works. All use of the Licensed Software must immediately cease if use breaches the terms of this license.","title":"2. License Grant"},{"location":"license/#3-derivative-works","text":"If a derivative work is created which is based on or otherwise incorporates all or any part of the Licensed Software, and the derivative work is made available to any other person, the complete corresponding machine readable source code (including all changes made to the Licensed Software) must accompany the derivative work and be made publicly available online.","title":"3. Derivative Works"},{"location":"license/#4-copyright-notice","text":"The following copyright notice shall be included in all copies of the Licensed Software: \u2003\u2003\u2003Copyright \u00a9 2022 AmidaWare LLC. \u2003\u2003\u2003Licensed under the Tactical RMM License Version 1.0 (the \u201cLicense\u201d). \u2003\u2003\u2003You may only use the Licensed Software in accordance with the License. \u2003\u2003\u2003A copy of the License is available at: https://license.tacticalrmm.com","title":"4. Copyright Notice"},{"location":"license/#5-disclaimer-of-warranty","text":"THE LICENSED SOFTWARE IS PROVIDED \"AS IS\". TO THE FULLEST EXTENT PERMISSIBLE AT LAW ALL CONDITIONS, WARRANTIES OR OTHER TERMS OF ANY KIND WHICH MIGHT HAVE EFFECT OR BE IMPLIED OR INCORPORATED, WHETHER BY STATUTE, COMMON LAW OR OTHERWISE ARE HEREBY EXCLUDED, INCLUDING THE CONDITIONS, WARRANTIES OR OTHER TERMS AS TO SATISFACTORY QUALITY AND/OR MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE, THE USE OF REASONABLE SKILL AND CARE AND NON-INFRINGEMENT.","title":"5. Disclaimer of Warranty"},{"location":"license/#6-limits-of-liability","text":"THE FOLLOWING EXCLUSIONS SHALL APPLY TO THE FULLEST EXTENT PERMISSIBLE AT LAW. NEITHER THE AUTHORS NOR THE COPYRIGHT HOLDERS SHALL IN ANY CIRCUMSTANCES HAVE ANY LIABILITY FOR ANY CLAIM, LOSSES, DAMAGES OR OTHER LIABILITY, WHETHER THE SAME ARE SUFFERED DIRECTLY OR INDIRECTLY OR ARE IMMEDIATE OR CONSEQUENTIAL, AND WHETHER THE SAME ARISE IN CONTRACT, TORT OR DELICT (INCLUDING NEGLIGENCE) OR OTHERWISE HOWSOEVER ARISING FROM, OUT OF OR IN CONNECTION WITH THE LICENSED SOFTWARE OR THE USE OR INABILITY TO USE THE LICENSED SOFTWARE OR OTHER DEALINGS IN THE LICENSED SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH LOSS OR DAMAGE. THE FOREGOING EXCLUSIONS SHALL INCLUDE, WITHOUT LIMITATION, LIABILITY FOR ANY LOSSES OR DAMAGES WHICH FALL WITHIN ANY OF THE FOLLOWING CATEGORIES: SPECIAL, EXEMPLARY, OR INCIDENTAL LOSS OR DAMAGE, LOSS OF PROFITS, LOSS OF ANTICIPATED SAVINGS, LOSS OF BUSINESS OPPORTUNITY, LOSS OF GOODWILL, AND LOSS OR CORRUPTION OF DATA.","title":"6. Limits of Liability"},{"location":"license/#7-termination","text":"This license shall terminate with immediate effect if there is a material breach of any of its terms.","title":"7. Termination"},{"location":"license/#8-no-partnership-agency-or-joint-venture","text":"Nothing in this license agreement is intended to, or shall be deemed to, establish any partnership or joint venture or any relationship of agency between AmidaWare LLC and any other person.","title":"8. No partnership, agency or joint venture"},{"location":"license/#9-no-endorsement","text":"The names of the authors and/or the copyright holders must not be used to promote or endorse any products or services which are in any way derived from the Licensed Software without prior written consent.","title":"9. No endorsement"},{"location":"license/#10-trademarks","text":"No permission is granted to use the trademark \u201cTactical RMM\u201d or any other trade name, trademark, service mark or product name of AmidaWare LLC except to the extent necessary to comply with the notice requirements in Section 4 (Copyright Notice).","title":"10. Trademarks"},{"location":"license/#11-entire-agreement","text":"This license contains the whole agreement relating to its subject matter.","title":"11. Entire agreement"},{"location":"license/#12-severance","text":"If any provision or part-provision of this license is or becomes invalid, illegal or unenforceable, it shall be deemed deleted, but that shall not affect the validity and enforceability of the rest of this license.","title":"12. Severance"},{"location":"license/#13-acceptance-of-these-terms","text":"The terms and conditions of this license are accepted by copying, downloading, installing, redistributing, or otherwise using the Licensed Software.","title":"13. Acceptance of these terms"},{"location":"management_cmds/","text":"Management Commands \u00b6 To run any of the management commands first login to your server as the user used to install TRMM (eg su - tactical ) and activate the python virtual env: Activate python virtual env standard docker Dev Docker cd /rmm/api/tacticalrmm source ../env/bin/activate docker exec -it trmm-backend /bin/bash /opt/venv/bin/python /opt/tactical/api/manage.py shell docker exec -it trmm-api-dev env/bin/python manage.py shell Bulk Delete Agents (Last Check-In, Agent Version, Site, or Client) \u00b6 If you want to remove old agents based on time, age, or location or for client offboarding - it\u2019s a best practice to first test the removal. python manage.py bulk_delete_agents --days 60 python manage.py bulk_delete_agents --agentver 1 .5.0 python manage.py bulk_delete_agents --site examplesite python manage.py bulk_delete_agents --client exampleclient python manage.py bulk_delete_agents --hostname examplehostname Then run the deletion: python manage.py bulk_delete_agents --days 60 --delete python manage.py bulk_delete_agents --agentver 1 .5.0 --delete python manage.py bulk_delete_agents --site examplesite --delete python manage.py bulk_delete_agents --client exampleclient --delete python manage.py bulk_delete_agents --hostname examplehostname --delete Note You must specify at least one of --days, --agentver, --site, --client, or --hostname. You can combine multiple parameters (e.g., --site examplesite --days 90) to narrow down agents further. Without the --delete flag, the command will only list agents that match. With the --delete flag, the agents will be uninstalled and deleted. Example Bash one-liner to delete multiple agents at once by hostname, hosts.txt file should contain one hostname per line. for i in $( cat hosts.txt ) ; do python manage.py bulk_delete_agents --hostname $i --delete ; done Reset a Users Password \u00b6 python manage.py reset_password <username> Reset a User's 2FA Token \u00b6 python manage.py reset_2fa <username> Delete a User \u00b6 python manage . py shell from accounts.models import User User . objects . get ( username = \"changeme\" ) . delete () Find All Agents That Have X Software Installed \u00b6 python manage.py find_software \"adobe\" Find All Agents That Have X Windows Service and Show the Service Status \u00b6 python manage.py find_services \"quickbooks\" Set a Specific Windows Update to not Install \u00b6 python manage . py shell from winupdate.models import WinUpdate WinUpdate . objects . filter ( kb = \"KB5007186\" ) . update ( action = \"ignore\" , date_installed = None ) Show Outdated Online Agents \u00b6 python manage.py show_outdated_agents Log Out All Active Web Sessions \u00b6 python manage.py delete_tokens Reset All Auth Tokens for Install Agents and Web Sessions \u00b6 python manage . py shell from knox.models import AuthToken AuthToken . objects . all () . delete () Check for Orphaned Tasks on All Agents and Remove Them \u00b6 python manage.py remove_orphaned_tasks Get a url to login to mesh as the mesh superuser \u00b6 python manage.py get_mesh_login_url Create a MeshCentral Agent Invite Link \u00b6 python manage.py get_mesh_exe_url Bulk Update Agent Offline / Overdue Time \u00b6 Change offline time on all agents to 5 minutes: python manage.py bulk_change_checkin --offline --all 5 Change offline time on all agents in site named Example Site to 2 minutes: python manage.py bulk_change_checkin --offline --site \"Example Site\" 2 Change offline time on all agents in client named Example Client to 12 minutes: python manage.py bulk_change_checkin --offline --client \"Example Client\" 12 Change overdue time on all agents to 10 minutes: python manage.py bulk_change_checkin --overdue --all 10 Change overdue time on all agents in site named Example Site to 4 minutes: python manage.py bulk_change_checkin --overdue --site \"Example Site\" 4 Change overdue time on all agents in client named Example Client to 14 minutes: python manage.py bulk_change_checkin --overdue --client \"Example Client\" 14 Tip You can cron it on the server to run every 30mins with something like */30 * * * * /rmm/api/env/bin/python /rmm/api/tacticalrmm/manage.py bulk_change_checkin --overdue --all 10 > /dev/null 2 > & 1 Script based functions \u00b6 Delete agents by client and site name by API","title":"Management Commands"},{"location":"management_cmds/#management-commands","text":"To run any of the management commands first login to your server as the user used to install TRMM (eg su - tactical ) and activate the python virtual env: Activate python virtual env standard docker Dev Docker cd /rmm/api/tacticalrmm source ../env/bin/activate docker exec -it trmm-backend /bin/bash /opt/venv/bin/python /opt/tactical/api/manage.py shell docker exec -it trmm-api-dev env/bin/python manage.py shell","title":"Management Commands"},{"location":"management_cmds/#bulk-delete-agents-last-check-in-agent-version-site-or-client","text":"If you want to remove old agents based on time, age, or location or for client offboarding - it\u2019s a best practice to first test the removal. python manage.py bulk_delete_agents --days 60 python manage.py bulk_delete_agents --agentver 1 .5.0 python manage.py bulk_delete_agents --site examplesite python manage.py bulk_delete_agents --client exampleclient python manage.py bulk_delete_agents --hostname examplehostname Then run the deletion: python manage.py bulk_delete_agents --days 60 --delete python manage.py bulk_delete_agents --agentver 1 .5.0 --delete python manage.py bulk_delete_agents --site examplesite --delete python manage.py bulk_delete_agents --client exampleclient --delete python manage.py bulk_delete_agents --hostname examplehostname --delete Note You must specify at least one of --days, --agentver, --site, --client, or --hostname. You can combine multiple parameters (e.g., --site examplesite --days 90) to narrow down agents further. Without the --delete flag, the command will only list agents that match. With the --delete flag, the agents will be uninstalled and deleted. Example Bash one-liner to delete multiple agents at once by hostname, hosts.txt file should contain one hostname per line. for i in $( cat hosts.txt ) ; do python manage.py bulk_delete_agents --hostname $i --delete ; done","title":"Bulk Delete Agents (Last Check-In, Agent Version, Site, or Client)"},{"location":"management_cmds/#reset-a-users-password","text":"python manage.py reset_password <username>","title":"Reset a Users Password"},{"location":"management_cmds/#reset-a-users-2fa-token","text":"python manage.py reset_2fa <username>","title":"Reset a User's 2FA Token"},{"location":"management_cmds/#delete-a-user","text":"python manage . py shell from accounts.models import User User . objects . get ( username = \"changeme\" ) . delete ()","title":"Delete a User"},{"location":"management_cmds/#find-all-agents-that-have-x-software-installed","text":"python manage.py find_software \"adobe\"","title":"Find All Agents That Have X Software Installed"},{"location":"management_cmds/#find-all-agents-that-have-x-windows-service-and-show-the-service-status","text":"python manage.py find_services \"quickbooks\"","title":"Find All Agents That Have X Windows Service and Show the Service Status"},{"location":"management_cmds/#set-a-specific-windows-update-to-not-install","text":"python manage . py shell from winupdate.models import WinUpdate WinUpdate . objects . filter ( kb = \"KB5007186\" ) . update ( action = \"ignore\" , date_installed = None )","title":"Set a Specific Windows Update to not Install"},{"location":"management_cmds/#show-outdated-online-agents","text":"python manage.py show_outdated_agents","title":"Show Outdated Online Agents"},{"location":"management_cmds/#log-out-all-active-web-sessions","text":"python manage.py delete_tokens","title":"Log Out All Active Web Sessions"},{"location":"management_cmds/#reset-all-auth-tokens-for-install-agents-and-web-sessions","text":"python manage . py shell from knox.models import AuthToken AuthToken . objects . all () . delete ()","title":"Reset All Auth Tokens for Install Agents and Web Sessions"},{"location":"management_cmds/#check-for-orphaned-tasks-on-all-agents-and-remove-them","text":"python manage.py remove_orphaned_tasks","title":"Check for Orphaned Tasks on All Agents and Remove Them"},{"location":"management_cmds/#get-a-url-to-login-to-mesh-as-the-mesh-superuser","text":"python manage.py get_mesh_login_url","title":"Get a url to login to mesh as the mesh superuser"},{"location":"management_cmds/#create-a-meshcentral-agent-invite-link","text":"python manage.py get_mesh_exe_url","title":"Create a MeshCentral Agent Invite Link"},{"location":"management_cmds/#bulk-update-agent-offline-overdue-time","text":"Change offline time on all agents to 5 minutes: python manage.py bulk_change_checkin --offline --all 5 Change offline time on all agents in site named Example Site to 2 minutes: python manage.py bulk_change_checkin --offline --site \"Example Site\" 2 Change offline time on all agents in client named Example Client to 12 minutes: python manage.py bulk_change_checkin --offline --client \"Example Client\" 12 Change overdue time on all agents to 10 minutes: python manage.py bulk_change_checkin --overdue --all 10 Change overdue time on all agents in site named Example Site to 4 minutes: python manage.py bulk_change_checkin --overdue --site \"Example Site\" 4 Change overdue time on all agents in client named Example Client to 14 minutes: python manage.py bulk_change_checkin --overdue --client \"Example Client\" 14 Tip You can cron it on the server to run every 30mins with something like */30 * * * * /rmm/api/env/bin/python /rmm/api/tacticalrmm/manage.py bulk_change_checkin --overdue --all 10 > /dev/null 2 > & 1","title":"Bulk Update Agent Offline / Overdue Time"},{"location":"management_cmds/#script-based-functions","text":"Delete agents by client and site name by API","title":"Script based functions"},{"location":"mesh_integration/","text":"MeshCentral Integration \u00b6 Overview \u00b6 Tactical RMM integrates with MeshCentral for the following 3 functions: Take Control. Real time shell. Real time file browser. Note MeshCentral has issues with Firefox, use a Chromium-based browser. It should be noted that Tactical RMM and MeshCentral are 2 completely separate products and can run independently of each other. They do not even have to run on the same box, however when you install Tactical RMM it simply installs MeshCentral for you with some pre-configured settings to allow integration. It is highly recommended to use the MeshCentral instance that Tactical installs, since it allows the developers more control over it and to ensure things don't break. How does it work? \u00b6 Please watch this video to fully understand how mesh integrations and permissions sync work. MeshCentral has an embedding feature that allows integration into existing products. See Section 14 - Embedding MeshCentral in the MeshCentral User Guide for a detailed explanation of how this works. The Tactical RMM agent keeps track of your Mesh agents, and periodically interacts with them to synchronize the Mesh agent's unique ID with the Tactical RMM database. When you do a take control / terminal / file browser on an agent using the Tactical UI, behind the scenes, Tactical generates a login token for MeshCentral's website and then \"wraps\" MeshCentral's UI in an iframe for that specific agent only, using it's unique ID to know what agent to render in the iframe. Customize Take Control Username \u00b6 If you've enabled any of the remote control options such as \"Notify user\", \"Prompt for consent\" and \"Show connection toolbar\" and you'd like to change the name that users see, make sure the user has a First and/or Last name set TRMM (Settings > User Administration). If you would also like your company name to show, you can set your company name in TRMM > Settings > Global Settings > MeshCentral. Turn off the sync feature \u00b6 If you're having issues with the new MeshCentral sync feature added in TRMM v0.18.0 you can simply disable it to revert back to the previous behavior prior to this release, although you're probably just looking for way to get the old mesh interface back : From TRMM's web interface go to Settings > Global Settings > MeshCentral Un-check the \"Sync Mesh Perms with TRMM\" checkbox, and click Yes to the \"are you sure\" prompt. Click \"Save\" Toggle a full permissions re-sync \u00b6 From TRMM's web interface go to Settings > Global Settings > MeshCentral Un-check the \"Sync Mesh Perms with TRMM\" checkbox, and click Yes to the \"are you sure\" prompt. Click \"Save\" Re-open the same settings window and check the same checkbox, click yes to the prompt, and Save. Wait a few minutes for the sync to fully complete in the background. Video Get a url to login to mesh as the mesh superuser \u00b6 This will generate a url that will log you into meshcentral as the superuser, the same way it used to be prior to TRMM Release 0.18.0 You should open this in a different browser than the one you're using for TRMM, or open in an incognito window. /rmm/api/env/bin/python /rmm/api/tacticalrmm/manage.py get_mesh_login_url Modifying the Internal Mesh Port Configuration \u00b6 By default, Tactical RMM configures the Mesh service to listen on the internal port 4430. Should there be a need to modify this default port within the Nginx or Mesh configuration, it is imperative to update Tactical RMM with the new port information. To accomplish this, the following entry must be added to the file /rmm/api/tacticalrmm/tacticalrmm/local_settings.py : MESH_PORT = < new_port_number > Replace <new_port_number> with the actual port number you have configured. For example, if the new port number is 1234, the entry should be as follows: MESH_PORT = 1234 Then, restart your entire server for changes to take effect. Running your own existing or separate MeshCentral server? \u00b6 We do testing to make sure everything works with the version found here (look for MESH_VER). Installation instructions for using your own MeshCentral server: Run standard installation. After installation is complete, disable meshcentral sudo systemctl disable --now meshcentral . In TRMM Web UI go to Settings > Global Settings > MeshCentral and update values from your existing mesh (make sure to use a mesh superuser). Username MUST be all lowercase. Mesh Token find with this Add USE_EXTERNAL_MESH = True to /rmm/api/tacticalrmm/tacticalrmm/local_settings.py Restart TRMM server. Info Mesh usernames are CaSe sEnSiTive Take Control Connect vs RDP Connect \u00b6 When using Take Control from Tactical RMM you are using the Desktop function in MeshCentral Connect button: Right-click the button for options. About the same a VNC, but it's not compatible with VNC. The original VNC protocol did not use JPEG, instead it uses RLE encoding or ZRLE. MeshCentral's remote desktop only uses JPEG (or WEBP in some cases) because browsers can decode JPEG easily. The MeshAgent will split the desktop into 32x32 pixel tiles and see if any of the tiles have changed. If a group of tiles change since the last frame, a JPEG is sent to update the area. RDP Connect button: Is a browser based RDP client. It connects to the native RDP in versions of Windows that support inbound RDP connects. Pro, Workstation, Enterprise, Server, Terminal Server, RDS Server etc. You must enable RDP in Windows to be able to connect to it, it's not enabled by default (or enable when installing agent if supported). Note It does not work for Windows Home because Home doesn't support incoming RDP connections. Remote Terminal how it works \u00b6 For the remote terminal, we launch a shell on the remote system and pipe VT100 terminal emulation to/from the browser. On the browser, we use XTermJS to view the terminal session. MeshCentral Options \u00b6 There are MANY MeshCentral options that you can configure. Here are some you might want to investigate: allowHighQualityDesktop desktopMultiplex userAllowedIP agentAllowedIP tlsOffload (for proxy users) maxInvalid2fa Using Tactical RMM Without MeshCentral \u00b6 Install Tactical RMM normally. Then, to disable the MeshCentral Server on the TRMM server run: sudo systemctl disable --now meshcentral mongod Then when installing an agent, make sure to pass the -nomesh flag to the installer Fixing missing agents in TRMM or Mesh \u00b6 Fixing Missing agent Agent Missing in Mesh Agent Missing in TRMM From the Script Library run: TacticalRMM - Install Mesh Agent if it's not installed Then from trmm web ui right click agent > agent recovery > mesh agent Use mesh to run the trmm agent installer with the --nomesh flag. Then from trmm web ui right click agent > agent recovery > mesh agent OMG MeshCentral isn't maintained anymore! \u00b6 MeshCentral is still actively being maintained , the lead devs had jobs in which they were paid by a corporation to develop MeshCentral, they now have got other jobs which means they are supporting and developing MeshCentral in their free time (like alot of other projects) this means development is slower but not that it isn't maintained anymore. If this changes or it becomes necessary to fix something that breaks or packages needing updated we are prepared to begin maintaining our own fork. The features of MeshCentral that TRMM uses are only the 3 items above and are extremely mature.","title":"MeshCentral Integration"},{"location":"mesh_integration/#meshcentral-integration","text":"","title":"MeshCentral Integration"},{"location":"mesh_integration/#overview","text":"Tactical RMM integrates with MeshCentral for the following 3 functions: Take Control. Real time shell. Real time file browser. Note MeshCentral has issues with Firefox, use a Chromium-based browser. It should be noted that Tactical RMM and MeshCentral are 2 completely separate products and can run independently of each other. They do not even have to run on the same box, however when you install Tactical RMM it simply installs MeshCentral for you with some pre-configured settings to allow integration. It is highly recommended to use the MeshCentral instance that Tactical installs, since it allows the developers more control over it and to ensure things don't break.","title":"Overview"},{"location":"mesh_integration/#how-does-it-work","text":"Please watch this video to fully understand how mesh integrations and permissions sync work. MeshCentral has an embedding feature that allows integration into existing products. See Section 14 - Embedding MeshCentral in the MeshCentral User Guide for a detailed explanation of how this works. The Tactical RMM agent keeps track of your Mesh agents, and periodically interacts with them to synchronize the Mesh agent's unique ID with the Tactical RMM database. When you do a take control / terminal / file browser on an agent using the Tactical UI, behind the scenes, Tactical generates a login token for MeshCentral's website and then \"wraps\" MeshCentral's UI in an iframe for that specific agent only, using it's unique ID to know what agent to render in the iframe.","title":"How does it work?"},{"location":"mesh_integration/#customize-take-control-username","text":"If you've enabled any of the remote control options such as \"Notify user\", \"Prompt for consent\" and \"Show connection toolbar\" and you'd like to change the name that users see, make sure the user has a First and/or Last name set TRMM (Settings > User Administration). If you would also like your company name to show, you can set your company name in TRMM > Settings > Global Settings > MeshCentral.","title":"Customize Take Control Username"},{"location":"mesh_integration/#turn-off-the-sync-feature","text":"If you're having issues with the new MeshCentral sync feature added in TRMM v0.18.0 you can simply disable it to revert back to the previous behavior prior to this release, although you're probably just looking for way to get the old mesh interface back : From TRMM's web interface go to Settings > Global Settings > MeshCentral Un-check the \"Sync Mesh Perms with TRMM\" checkbox, and click Yes to the \"are you sure\" prompt. Click \"Save\"","title":"Turn off the sync feature"},{"location":"mesh_integration/#toggle-a-full-permissions-re-sync","text":"From TRMM's web interface go to Settings > Global Settings > MeshCentral Un-check the \"Sync Mesh Perms with TRMM\" checkbox, and click Yes to the \"are you sure\" prompt. Click \"Save\" Re-open the same settings window and check the same checkbox, click yes to the prompt, and Save. Wait a few minutes for the sync to fully complete in the background. Video","title":"Toggle a full permissions re-sync"},{"location":"mesh_integration/#get-a-url-to-login-to-mesh-as-the-mesh-superuser","text":"This will generate a url that will log you into meshcentral as the superuser, the same way it used to be prior to TRMM Release 0.18.0 You should open this in a different browser than the one you're using for TRMM, or open in an incognito window. /rmm/api/env/bin/python /rmm/api/tacticalrmm/manage.py get_mesh_login_url","title":"Get a url to login to mesh as the mesh superuser"},{"location":"mesh_integration/#modifying-the-internal-mesh-port-configuration","text":"By default, Tactical RMM configures the Mesh service to listen on the internal port 4430. Should there be a need to modify this default port within the Nginx or Mesh configuration, it is imperative to update Tactical RMM with the new port information. To accomplish this, the following entry must be added to the file /rmm/api/tacticalrmm/tacticalrmm/local_settings.py : MESH_PORT = < new_port_number > Replace <new_port_number> with the actual port number you have configured. For example, if the new port number is 1234, the entry should be as follows: MESH_PORT = 1234 Then, restart your entire server for changes to take effect.","title":"Modifying the Internal Mesh Port Configuration"},{"location":"mesh_integration/#running-your-own-existing-or-separate-meshcentral-server","text":"We do testing to make sure everything works with the version found here (look for MESH_VER). Installation instructions for using your own MeshCentral server: Run standard installation. After installation is complete, disable meshcentral sudo systemctl disable --now meshcentral . In TRMM Web UI go to Settings > Global Settings > MeshCentral and update values from your existing mesh (make sure to use a mesh superuser). Username MUST be all lowercase. Mesh Token find with this Add USE_EXTERNAL_MESH = True to /rmm/api/tacticalrmm/tacticalrmm/local_settings.py Restart TRMM server. Info Mesh usernames are CaSe sEnSiTive","title":"Running your own existing or separate MeshCentral server?"},{"location":"mesh_integration/#take-control-connect-vs-rdp-connect","text":"When using Take Control from Tactical RMM you are using the Desktop function in MeshCentral Connect button: Right-click the button for options. About the same a VNC, but it's not compatible with VNC. The original VNC protocol did not use JPEG, instead it uses RLE encoding or ZRLE. MeshCentral's remote desktop only uses JPEG (or WEBP in some cases) because browsers can decode JPEG easily. The MeshAgent will split the desktop into 32x32 pixel tiles and see if any of the tiles have changed. If a group of tiles change since the last frame, a JPEG is sent to update the area. RDP Connect button: Is a browser based RDP client. It connects to the native RDP in versions of Windows that support inbound RDP connects. Pro, Workstation, Enterprise, Server, Terminal Server, RDS Server etc. You must enable RDP in Windows to be able to connect to it, it's not enabled by default (or enable when installing agent if supported). Note It does not work for Windows Home because Home doesn't support incoming RDP connections.","title":"Take Control Connect vs RDP Connect"},{"location":"mesh_integration/#remote-terminal-how-it-works","text":"For the remote terminal, we launch a shell on the remote system and pipe VT100 terminal emulation to/from the browser. On the browser, we use XTermJS to view the terminal session.","title":"Remote Terminal how it works"},{"location":"mesh_integration/#meshcentral-options","text":"There are MANY MeshCentral options that you can configure. Here are some you might want to investigate: allowHighQualityDesktop desktopMultiplex userAllowedIP agentAllowedIP tlsOffload (for proxy users) maxInvalid2fa","title":"MeshCentral Options"},{"location":"mesh_integration/#using-tactical-rmm-without-meshcentral","text":"Install Tactical RMM normally. Then, to disable the MeshCentral Server on the TRMM server run: sudo systemctl disable --now meshcentral mongod Then when installing an agent, make sure to pass the -nomesh flag to the installer","title":"Using Tactical RMM Without MeshCentral"},{"location":"mesh_integration/#fixing-missing-agents-in-trmm-or-mesh","text":"Fixing Missing agent Agent Missing in Mesh Agent Missing in TRMM From the Script Library run: TacticalRMM - Install Mesh Agent if it's not installed Then from trmm web ui right click agent > agent recovery > mesh agent Use mesh to run the trmm agent installer with the --nomesh flag. Then from trmm web ui right click agent > agent recovery > mesh agent","title":"Fixing missing agents in TRMM or Mesh"},{"location":"mesh_integration/#omg-meshcentral-isnt-maintained-anymore","text":"MeshCentral is still actively being maintained , the lead devs had jobs in which they were paid by a corporation to develop MeshCentral, they now have got other jobs which means they are supporting and developing MeshCentral in their free time (like alot of other projects) this means development is slower but not that it isn't maintained anymore. If this changes or it becomes necessary to fix something that breaks or packages needing updated we are prepared to begin maintaining our own fork. The features of MeshCentral that TRMM uses are only the 3 items above and are extremely mature.","title":"OMG MeshCentral isn't maintained anymore!"},{"location":"restore/","text":"Restore \u00b6 Warning This script will only run on a freshly installed \u201cempty\u201d server with no TRMM installed or TRMM failed install. Plan accordingly (aka snapshot back to pre- restore.sh run or re-setup a new fresh VPS). Info The restore script will only restore to a different physical or virtual server. It cannot be used to restore to a different domain/subdomain. If you would like to restore to a different domain/subdomain, commercial support offers a paid domain name migration service. If the purpose of your restore is to migrate your instance from one machine to another e.g. to upgrade your install to a newer OS and/or different arch, then it is recommended to leave both the old and new instances up and running until all your agents have successfully migrated to the new instance. You can use the old instance to forcefully migrate stubborn agents that are still attached to it (see instructions below). Setup the new server \u00b6 Follow the same instructions as a fresh install but stop when you reach the 'Run the install script' section (you'll be using the restore script instead of install). Tip Take a snapshot of your vm if possible so you can get back to this point if something doesn't work right and you have to try the restore again. Change DNS A records \u00b6 Open the DNS manager of wherever your domain is hosted. Update the 3 A records rmm , api and mesh and point them to the public IP of your new server. Run the restore script \u00b6 Switch to the tactical user (if you used a custom username, it must match the install you're coming from): su - tactical Copy the backup tarball you created during backup to the new server (eg in your tactical users home folder). Download the restore script: wget -N https://raw.githubusercontent.com/amidaware/tacticalrmm/master/restore.sh chmod +x restore.sh Call the restore script, passing it the backup tarball as the first argument: ./restore.sh rmm-backup-XXXXXXXXX.tar Note: the section below is only applicable if you are migrating to a new instance while still keeping the old instance. If you used the same VM to restore then you are done. Once the restore has completed, log into your OLD instance and from the Web UI do Tools > Recover All Agents . Info You will most probably have to add entries to your host file (on the machine you're trying to access the web UI from) for your subdomains to access the old instance, since you'll already have updated DNS to point to the new server. What this will do is restart both the tacticalagent and meshagent services on any stubborn agents that are still connected to the old instance, which should be enough to get them connected to the new instance. Restore Testing \u00b6 If you want to validate your backups the best way to do that is to: Run the standard Restore to a new temp VM as above . Run sudo systemctl stop celery celerybeat to stop the restored test VM from sending agent offline false alerts. Change the hosts file on your computer so that only your computer overrides regular DNS and allows you to login and test your test restore. Add the server ip and names in one line like this 192.168.55.5 rmm.example.com api.example.com mesh.example.com . Login and test things, see agents, policies, agent history etc. Undo hosts file entry and delete test VM","title":"Restore"},{"location":"restore/#restore","text":"Warning This script will only run on a freshly installed \u201cempty\u201d server with no TRMM installed or TRMM failed install. Plan accordingly (aka snapshot back to pre- restore.sh run or re-setup a new fresh VPS). Info The restore script will only restore to a different physical or virtual server. It cannot be used to restore to a different domain/subdomain. If you would like to restore to a different domain/subdomain, commercial support offers a paid domain name migration service. If the purpose of your restore is to migrate your instance from one machine to another e.g. to upgrade your install to a newer OS and/or different arch, then it is recommended to leave both the old and new instances up and running until all your agents have successfully migrated to the new instance. You can use the old instance to forcefully migrate stubborn agents that are still attached to it (see instructions below).","title":"Restore"},{"location":"restore/#setup-the-new-server","text":"Follow the same instructions as a fresh install but stop when you reach the 'Run the install script' section (you'll be using the restore script instead of install). Tip Take a snapshot of your vm if possible so you can get back to this point if something doesn't work right and you have to try the restore again.","title":"Setup the new server"},{"location":"restore/#change-dns-a-records","text":"Open the DNS manager of wherever your domain is hosted. Update the 3 A records rmm , api and mesh and point them to the public IP of your new server.","title":"Change DNS A records"},{"location":"restore/#run-the-restore-script","text":"Switch to the tactical user (if you used a custom username, it must match the install you're coming from): su - tactical Copy the backup tarball you created during backup to the new server (eg in your tactical users home folder). Download the restore script: wget -N https://raw.githubusercontent.com/amidaware/tacticalrmm/master/restore.sh chmod +x restore.sh Call the restore script, passing it the backup tarball as the first argument: ./restore.sh rmm-backup-XXXXXXXXX.tar Note: the section below is only applicable if you are migrating to a new instance while still keeping the old instance. If you used the same VM to restore then you are done. Once the restore has completed, log into your OLD instance and from the Web UI do Tools > Recover All Agents . Info You will most probably have to add entries to your host file (on the machine you're trying to access the web UI from) for your subdomains to access the old instance, since you'll already have updated DNS to point to the new server. What this will do is restart both the tacticalagent and meshagent services on any stubborn agents that are still connected to the old instance, which should be enough to get them connected to the new instance.","title":"Run the restore script"},{"location":"restore/#restore-testing","text":"If you want to validate your backups the best way to do that is to: Run the standard Restore to a new temp VM as above . Run sudo systemctl stop celery celerybeat to stop the restored test VM from sending agent offline false alerts. Change the hosts file on your computer so that only your computer overrides regular DNS and allows you to login and test your test restore. Add the server ip and names in one line like this 192.168.55.5 rmm.example.com api.example.com mesh.example.com . Login and test things, see agents, policies, agent history etc. Undo hosts file entry and delete test VM","title":"Restore Testing"},{"location":"roadmap/","text":"Roadmap \u00b6 This roadmap provides a directional view of upcoming work. It is not exhaustive, and scope, sequencing, and timing may change. We also ship fixes and enhancements continuously in parallel with the items listed below. Next Release White Labeling - Comprehensive white labeling solution allowing full customization of branding and UI elements. Background Registry Editor Future Releases Windows Update Rework - Complete overhaul of the Windows Update management system for better reliability and performance. Tagging/Groups Bulk Edit Agents customizable columns in the agent list Internationalization support // Auto-populate GitHub issue data document.addEventListener('DOMContentLoaded', function() { const issueLinks = document.querySelectorAll('a[href*=\"github.com\"][href*=\"/issues/\"]'); issueLinks.forEach(async (link) => { const url = link.href; const match = url.match(/github\\.com\\/([^\\/]+)\\/([^\\/]+)\\/issues\\/(\\d+)/); if (match) { const [, owner, repo, issueNumber] = match; // Skip placeholder issues if (issueNumber === 'XXX') { return; } try { const response = await fetch(`https://api.github.com/repos/${owner}/${repo}/issues/${issueNumber}`); if (response.ok) { const issue = await response.json(); // Update link text with issue title link.textContent = issue.title; // Replace the list item with a custom issue box const li = link.closest('li'); if (li) { // Remove any existing meta const existingMeta = li.querySelector('.issue-box'); if (existingMeta) { existingMeta.remove(); } // Hide the default bullet point li.style.listStyle = 'none'; li.style.marginLeft = '0'; const issueBox = document.createElement('div'); issueBox.className = 'issue-box'; // Check for custom description after the link let description = 'No description available'; const listItemText = li.textContent; const dashIndex = listItemText.indexOf(' - '); if (dashIndex > -1) { // Use custom description provided after the dash description = listItemText.substring(dashIndex + 3).trim(); } else if (issue.body && issue.body.trim()) { // Auto-extract from GitHub issue const body = issue.body.trim(); // Look for \"Describe the bug\" section with more flexible regex const bugDescMatch = body.match(/Describe the bug\\s*\\r?\\n([^]*?)(?:\\r?\\n\\r?\\n|$)/i); if (bugDescMatch && bugDescMatch[1]) { description = bugDescMatch[1].trim(); // Take first sentence or up to 200 chars const firstSentence = description.split(/[.!?]+/)[0]; if (firstSentence && firstSentence.length > 20) { description = firstSentence + '.'; } if (description.length > 200) { description = description.substring(0, 200) + '...'; } } else { // More aggressive fallback - look for descriptive content const lines = body.split(/\\r?\\n/); let foundDesc = false; for (let i = 0; i < lines.length; i++) { const line = lines[i].trim(); // Skip empty lines and known headers if (!line || line.match(/^(Server Info|Installation Method|Agent Info|Describe the bug)/i)) { if (line.match(/Describe the bug/i)) { // Found the header, get the next non-empty line for (let j = i + 1; j < lines.length; j++) { const nextLine = lines[j].trim(); if (nextLine && nextLine.length > 30) { description = nextLine; foundDesc = true; break; } } } continue; } // Look for a substantial line that looks like a description if (!foundDesc && line.length > 50 && !line.includes(':') && !line.startsWith('-')) { description = line; break; } } if (description.length > 200) { description = description.substring(0, 200) + '...'; } } // Remove markdown formatting for display description = description.replace(/[#*`\\[\\]]/g, '').replace(/\\s+/g, ' ').trim(); } // Get reactions and comments const thumbsUp = issue.reactions ? (issue.reactions['+1'] || 0) : 0; const comments = issue.comments || 0; issueBox.innerHTML = ` <div class=\"issue-header\"> <div class=\"issue-title\"><a href=\"${issue.html_url}\" target=\"_blank\">${issue.title}</a></div> <span class=\"issue-number\">#${issueNumber}</span> </div> <div class=\"issue-description\">${description}</div> <div class=\"issue-footer\"> <div class=\"issue-stats-left\"> <span class=\"thumbs-up\">\ud83d\udc4d ${thumbsUp}</span> <span class=\"issue-state ${issue.state}\">${issue.state}</span> </div> <div class=\"issue-stats-right\"> <span class=\"comments\">\ud83d\udcac ${comments}</span> </div> </div> `; // Replace the link with the issue box li.innerHTML = ''; li.appendChild(issueBox); } } else { } } catch (error) { } } }); }); /* Create a grid layout for release sections */ .roadmap-grid { display: grid; grid-template-columns: 1fr 1fr; gap: 0.25rem; /* Reduced from 0.5rem */ margin-top: 0.5rem; /* Reduced from 1rem */ } .roadmap-section { background: var(--md-default-bg-color); border: 1px solid var(--md-default-fg-color--lightest); border-radius: 8px; padding: 0.5rem; /* Reduced from 1rem */ box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1); } .roadmap-section h2 { margin-top: 0 !important; margin-bottom: 0.5rem !important; /* Reduced from 0.75rem */ text-align: center; border: none !important; background: linear-gradient(135deg, #5865f2, #7289da) !important; color: white !important; padding: 0.5rem !important; /* Reduced from 0.75rem */ border-radius: 6px !important; width: 100% !important; text-indent: 0 !important; } .roadmap-section ul { margin: 0 !important; /* Remove default ul margins */ padding: 0 !important; /* Remove default ul padding */ } [data-md-color-scheme=\"slate\"] .roadmap-section h2 { background: linear-gradient(135deg, #5865f2) !important; color: white !important; } /* Hide default list styling for issue items */ ul li:has(.issue-box) { list-style: none; margin-left: 0; margin-bottom: 0.125rem; /* Reduced spacing between items */ } ul li:has(.issue-box):last-child { margin-bottom: 0; /* Remove margin from last item */ } .issue-box { background: var(--md-default-bg-color); border: 1px solid var(--md-default-fg-color--lightest); border-radius: 6px; margin: 0; /* Removed vertical margins */ box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1); transition: box-shadow 0.2s ease; overflow: hidden; } .issue-box:hover { box-shadow: 0 4px 8px rgba(0, 0, 0, 0.15); } .issue-header { display: flex; justify-content: space-between; align-items: flex-start; background: #5865f2; color: white; padding: 0.4rem 0.6rem; /* Reduced from 0.5rem 0.75rem */ margin: 0; } .issue-title { margin: 0 !important; flex: 1; padding-right: 0.5rem; /* Reduced from 0.75rem */ color: white !important; font-size: 0.85rem; /* Reduced from 0.9rem */ line-height: 1.2; font-weight: 400; } .issue-title a { color: white !important; text-decoration: none !important; font-weight: 600; display: inline; } .issue-title a:hover { text-decoration: underline !important; color: white !important; } .issue-number { background: rgba(255, 255, 255, 0.25); color: white !important; padding: 0.25rem 0.4rem; /* Reduced from 0.3rem 0.5rem */ border-radius: 4px; font-family: var(--md-code-font, monospace); font-size: 0.7rem; /* Reduced from 0.75rem */ font-weight: 600; white-space: nowrap; flex-shrink: 0; align-self: flex-start; } .issue-description { color: var(--md-default-fg-color--light); font-size: 0.8rem; /* Reduced from 0.85rem */ line-height: 1.3; /* Reduced from 1.4 */ margin-bottom: 0; /* Removed bottom margin */ padding: 0.3rem; /* Reduced from 0.4rem */ } .issue-footer { display: flex; justify-content: space-between; align-items: center; padding: 0 0.3rem 0.3rem 0.3rem; /* Reduced from 0.25rem */ } .issue-stats-left { display: flex; gap: 0.4rem; /* Reduced from 0.5rem */ align-items: center; } .issue-stats-right { display: flex; align-items: center; } .thumbs-up { background: var(--md-accent-bg-color); color: var(--md-accent-fg-color); padding: 0.15rem 0.3rem; /* Reduced from 0.2rem 0.4rem */ border-radius: 8px; /* Reduced from 10px */ font-size: 0.7rem; /* Reduced from 0.75rem */ font-weight: 500; } .issue-state { padding: 0.15rem 0.3rem; /* Reduced from 0.2rem 0.4rem */ border-radius: 8px; /* Reduced from 10px */ font-size: 0.65rem; /* Reduced from 0.7rem */ font-weight: 500; text-transform: uppercase; } .issue-state.open { background: #28a745; color: white; } .issue-state.closed { background: #dc3545; color: white; } .comments { background: var(--md-default-fg-color--lightest); color: var(--md-default-fg-color); padding: 0.15rem 0.3rem; /* Reduced from 0.2rem 0.4rem */ border-radius: 8px; /* Reduced from 10px */ font-size: 0.7rem; /* Reduced from 0.75rem */ font-weight: 200; } /* Responsive adjustments */ @media (max-width: 1200px) { .roadmap-grid { grid-template-columns: 1fr 1fr; gap: 0.5rem; /* Reduced from 1rem */ } } @media (max-width: 768px) { .roadmap-grid { grid-template-columns: 1fr; gap: 0.5rem; /* Reduced from 0.75rem */ } .roadmap-section { padding: 0.5rem; /* Reduced from 0.75rem */ } .issue-header { flex-direction: column; gap: 0.2rem; /* Reduced from 0.25rem */ align-items: flex-start; } .issue-title { padding-right: 0; } .issue-footer { flex-direction: column; gap: 0.2rem; /* Reduced from 0.25rem */ align-items: flex-start; } .issue-stats-right { align-self: flex-end; } }","title":"Roadmap"},{"location":"roadmap/#roadmap","text":"This roadmap provides a directional view of upcoming work. It is not exhaustive, and scope, sequencing, and timing may change. We also ship fixes and enhancements continuously in parallel with the items listed below.","title":"Roadmap"},{"location":"script_variables/","text":"Script Variables \u00b6 Tactical RMM allows passing dashboard data into script as arguments or environment variables. This uses the syntax {{model.field}} . Info Nested relations are followed so something like {{agent.site.name}} will work. For a full list of available fields, refer to the variables in the models.py files: Info @property functions under the model will work as well Agent Client Site Alert Check CheckResult AutomatedTask TaskResult Below are some examples of available fields: Info Everything between {{}} is CaSe sEnSiTive Agent \u00b6 {{agent.version}} - Tactical RMM agent version. {{agent.operating_system}} - Agent operating system example: Windows 10 Pro, 64 bit (build 19042.928) . {{agent.plat}} - Will show the platform example: windows . {{agent.hostname}} - The hostname of the agent. {{agent.local_ips}} - Local IP address of agent. {{agent.public_ip}} - Public IP address of agent. {{agent.agent_id}} - agent ID in database. {{agent.last_seen}} - Date and Time Agent last seen. {{agent.total_ram}} - Total RAM on agent. Returns an integer - example: 16 . {{agent.boot_time}} - Uptime of agent. Returns unix timestamp. example: 1619439603.0 . {{agent.logged_in_username}} - Username of logged in user. {{agent.last_logged_in_user}} - Username of last logged in user. {{agent.monitoring_type}} - Returns a string of workstation or server . {{agent.description}} - Description of agent in dashboard. {{agent.mesh_node_id}} - The mesh node id used for linking the tactical agent to mesh. {{agent.overdue_email_alert}} - Returns true if overdue email alerts is enabled in TRMM. {{agent.overdue_text_alert}} - Returns true if overdue SMS alerts is enabled in TRMM. {{agent.overdue_dashboard_alert}} - Returns true if overdue agent alerts is enabled in TRMM. {{agent.offline_time}} - Returns offline time setting for agent in TRMM. {{agent.overdue_time}} - Returns overdue time setting for agent in TRMM. {{agent.check_interval}} - Returns check interval time setting for agent in TRMM. {{agent.needs_reboot}} - Returns true if reboot is pending on agent. {{agent.choco_installed}} - Returns true if Chocolatey is installed. {{agent.patches_last_installed}} - The date that patches were last installed by Tactical RMM. {{agent.timezone}} - Returns timezone configured on agent. {{agent.maintenance_mode}} - Returns true if agent is in maintenance mode. {{agent.block_policy_inheritance}} - Returns true if agent has block policy inheritance. {{agent.alert_template}} - Returns true if agent has block policy inheritance. {{agent.site}} - The site that the agent belongs too. Can be used for nesting. See Site above for properties Client \u00b6 {{client.name}} - Returns name of client. Site \u00b6 {{site.name}} - Returns name of Site. {{site.client}} - The client that the site belongs too. Can be used for nesting. See Client above for properties Alert \u00b6 Info Only available in failure and resolve actions on alert templates! {{alert.alert_time}} - Time of the alert. {{alert.message}} - Alert message. {{alert.severity}} - Severity of the alert info, warning, or error . {{alert.alert_type}} - The type of alert. Will be availability, check, task, or custom . {{alert.snoozed}} - Returns true if the alert is snoozed. {{alert.snoozed_until}} - Returns the datetime that the alert is unsnoozed. {{alert.email_sent}} - Returns true if this alert has triggered a failure email. {{alert.resolved_email_sent}} - Returns true if this alert has triggered a resolved email. {{alert.sms_sent}} - Returns true if this alert has triggered a failure text. {{alert.resolved_sms_sent}} - Returns true if this alert has triggered a resolved text. {{alert.hidden}} - Returns true if this alert is hidden. It won't show in the alerts icon in the dashboard {{alert.action_run}} - Returns datetime that an alert failure action was run. {{alert.action_stdout}} - Returns standard output of the alert failure action results. {{alert.action_stderr}} - Returns error output of the alert failure action results. {{alert.action_retcode}} - Returns return code of the alert failure action. {{alert.resolved_action_run}} - Returns datetime that an alert resolved action was run. {{alert.resolved_action_stdout}} - Returns standard output of the alert resolved action results. {{alert.resolved_action_stderr}} - Returns error output of the alert resolved action results. {{alert.resolved_action_retcode}} - Returns return code of the alert resolved action. {{alert.agent}} - The agent that triggered the alert. Can be used for nesting. See Agent above for properties. {{alert.assigned_check}} - The check that triggered the alert. Can be used for nesting. See Check above for properties. {{alert.assigned_check.readable_desc}} - This will return the name that is used in the UI for the check. {{alert.assigned_task}} - The automated task that triggered the alert. Can be used for nesting. See Automated Task above for properties. {{alert.assigned_task.name}} - This will return the name that is used in the UI for the automated task. {{alert.site}} - The site associated with the agent that triggered the alert. Can be used for nesting. See Site above for properties. {{alert.client}} - The client associated with the agent that triggered the alert. Can be used for nesting. See Client above for properties. {{alert.get_result}} - Will return the results of the associated check or automated task. Can be used for nesting. See CheckResult or TaskResult above for properties. This will be blank for agent availability alerts. For example to get the standard output of the check that failed, do {{ alert.get_result.stdout }} Custom Fields \u00b6 You can use custom fields as variables by referencing the object that contains the custom field and using the exact name of the field as the property. For example, {{agent.Custom field Name}}. This reference is case sensitive, and spaces in the field name are supported. Currently, custom fields are supported only for the following objects: Client, Site, and Agent. If the custom field cannot be found, the text will be passed as-is to the script.","title":"Reference: Script Variables"},{"location":"script_variables/#script-variables","text":"Tactical RMM allows passing dashboard data into script as arguments or environment variables. This uses the syntax {{model.field}} . Info Nested relations are followed so something like {{agent.site.name}} will work. For a full list of available fields, refer to the variables in the models.py files: Info @property functions under the model will work as well Agent Client Site Alert Check CheckResult AutomatedTask TaskResult Below are some examples of available fields: Info Everything between {{}} is CaSe sEnSiTive","title":"Script Variables"},{"location":"script_variables/#agent","text":"{{agent.version}} - Tactical RMM agent version. {{agent.operating_system}} - Agent operating system example: Windows 10 Pro, 64 bit (build 19042.928) . {{agent.plat}} - Will show the platform example: windows . {{agent.hostname}} - The hostname of the agent. {{agent.local_ips}} - Local IP address of agent. {{agent.public_ip}} - Public IP address of agent. {{agent.agent_id}} - agent ID in database. {{agent.last_seen}} - Date and Time Agent last seen. {{agent.total_ram}} - Total RAM on agent. Returns an integer - example: 16 . {{agent.boot_time}} - Uptime of agent. Returns unix timestamp. example: 1619439603.0 . {{agent.logged_in_username}} - Username of logged in user. {{agent.last_logged_in_user}} - Username of last logged in user. {{agent.monitoring_type}} - Returns a string of workstation or server . {{agent.description}} - Description of agent in dashboard. {{agent.mesh_node_id}} - The mesh node id used for linking the tactical agent to mesh. {{agent.overdue_email_alert}} - Returns true if overdue email alerts is enabled in TRMM. {{agent.overdue_text_alert}} - Returns true if overdue SMS alerts is enabled in TRMM. {{agent.overdue_dashboard_alert}} - Returns true if overdue agent alerts is enabled in TRMM. {{agent.offline_time}} - Returns offline time setting for agent in TRMM. {{agent.overdue_time}} - Returns overdue time setting for agent in TRMM. {{agent.check_interval}} - Returns check interval time setting for agent in TRMM. {{agent.needs_reboot}} - Returns true if reboot is pending on agent. {{agent.choco_installed}} - Returns true if Chocolatey is installed. {{agent.patches_last_installed}} - The date that patches were last installed by Tactical RMM. {{agent.timezone}} - Returns timezone configured on agent. {{agent.maintenance_mode}} - Returns true if agent is in maintenance mode. {{agent.block_policy_inheritance}} - Returns true if agent has block policy inheritance. {{agent.alert_template}} - Returns true if agent has block policy inheritance. {{agent.site}} - The site that the agent belongs too. Can be used for nesting. See Site above for properties","title":"Agent"},{"location":"script_variables/#client","text":"{{client.name}} - Returns name of client.","title":"Client"},{"location":"script_variables/#site","text":"{{site.name}} - Returns name of Site. {{site.client}} - The client that the site belongs too. Can be used for nesting. See Client above for properties","title":"Site"},{"location":"script_variables/#alert","text":"Info Only available in failure and resolve actions on alert templates! {{alert.alert_time}} - Time of the alert. {{alert.message}} - Alert message. {{alert.severity}} - Severity of the alert info, warning, or error . {{alert.alert_type}} - The type of alert. Will be availability, check, task, or custom . {{alert.snoozed}} - Returns true if the alert is snoozed. {{alert.snoozed_until}} - Returns the datetime that the alert is unsnoozed. {{alert.email_sent}} - Returns true if this alert has triggered a failure email. {{alert.resolved_email_sent}} - Returns true if this alert has triggered a resolved email. {{alert.sms_sent}} - Returns true if this alert has triggered a failure text. {{alert.resolved_sms_sent}} - Returns true if this alert has triggered a resolved text. {{alert.hidden}} - Returns true if this alert is hidden. It won't show in the alerts icon in the dashboard {{alert.action_run}} - Returns datetime that an alert failure action was run. {{alert.action_stdout}} - Returns standard output of the alert failure action results. {{alert.action_stderr}} - Returns error output of the alert failure action results. {{alert.action_retcode}} - Returns return code of the alert failure action. {{alert.resolved_action_run}} - Returns datetime that an alert resolved action was run. {{alert.resolved_action_stdout}} - Returns standard output of the alert resolved action results. {{alert.resolved_action_stderr}} - Returns error output of the alert resolved action results. {{alert.resolved_action_retcode}} - Returns return code of the alert resolved action. {{alert.agent}} - The agent that triggered the alert. Can be used for nesting. See Agent above for properties. {{alert.assigned_check}} - The check that triggered the alert. Can be used for nesting. See Check above for properties. {{alert.assigned_check.readable_desc}} - This will return the name that is used in the UI for the check. {{alert.assigned_task}} - The automated task that triggered the alert. Can be used for nesting. See Automated Task above for properties. {{alert.assigned_task.name}} - This will return the name that is used in the UI for the automated task. {{alert.site}} - The site associated with the agent that triggered the alert. Can be used for nesting. See Site above for properties. {{alert.client}} - The client associated with the agent that triggered the alert. Can be used for nesting. See Client above for properties. {{alert.get_result}} - Will return the results of the associated check or automated task. Can be used for nesting. See CheckResult or TaskResult above for properties. This will be blank for agent availability alerts. For example to get the standard output of the check that failed, do {{ alert.get_result.stdout }}","title":"Alert"},{"location":"script_variables/#custom-fields","text":"You can use custom fields as variables by referencing the object that contains the custom field and using the exact name of the field as the property. For example, {{agent.Custom field Name}}. This reference is case sensitive, and spaces in the field name are supported. Currently, custom fields are supported only for the following objects: Client, Site, and Agent. If the custom field cannot be found, the text will be passed as-is to the script.","title":"Custom Fields"},{"location":"securing_nginx/","text":"DISCLAIMER \u00b6 All the settings covered in this document have been tested against Tactical RMM v0.7.2 and v0.8.0. Before applying these settings in production, use a pre-production environment so potential disruptions in your own environment and the service that you provide to your clients can be avoided. Warning Use the contents included in this guide and apply the security settings detailed here at your own discretion. Info Please check the following github issue for potential side effects of deploying these configs. Intro \u00b6 This section is structured in three main subsections: Enabling GeoIP in NGINX config with the purpose of filtering (blocking) web requests based on the country\u2019s source IP. Enabling anti \u201cbad\u201d bots/referrers in HTTP requests to the NGINX server. Compiling and enabling ModSec + OWASP CRS in NGINX server. Each section can be enabled independently. Hardening NGINX settings \u00b6 GeoIP Integration in NGINX - Blocking Requests by Country Code \u00b6 Install required packages and NGINX module for GeoIP: # apt-get install geoip-database libgeoip1 libnginx-mod-http-geoip Verify that the GeoIP database files have been placed in the right location: # ls -lrt /usr/share/GeoIP/ total 10004 -rw-r--r-- 1 root root 8138841 Jan 24 2020 GeoIPv6.dat -rw-r--r-- 1 root root 2099217 Jan 24 2020 GeoIP.dat Edit NGINX config file ( /etc/nginx/nginx.conf ) and add the following config under the http { block: http { ## # Basic Settings ## # Load GeoIP Database geoip_country /usr/share/GeoIP/GeoIP.dat; } The next settings will depend on the desired GeoIP blocking strategy. For \u201callow by default, deny by exception\u201d, the config would be: http { ## # Basic Settings ## # Load GeoIP Database geoip_country /usr/share/GeoIP/GeoIP.dat; # map the list of denied countries map $geoip_country_code $allowed_country { default yes; # BLOCKED_COUNTRY_1 COUNTRY_CODE_1 no; # BLOCKED_COUNTRY_2 COUNTRY_CODE_2 no; # BLOCKED_COUNTRY_3 COUNTRY_CODE_3 no; } } (The macro can be modified to achieve the \u201cdeny by default, allow by exception\u201d approach). Finally, the following \u201cif\u201d statement needs to be placed in all the vhosts where the GeoIP blocking should take effect, under the \u201clocation\u201d section: location / { root /var/www/rmm/dist; try_files $uri $uri/ /index.html; add_header Cache-Control \"no-store, no-cache, must-revalidate\"; add_header Pragma \"no-cache\"; # block the country if ($allowed_country = no) { return 444; } } The HTTP Status = 444 is a good choice for NGINX not \u201cwasting\u201d too many resources in sending back the 4xx code to the client being blocked by GeoIP. Blocking \u201cbad bots\u201d and \u201cbad referrers\u201d \u00b6 Nginx Bad Bot and User-Agent Blocker, Spam Referrer Blocker, Anti DDOS, Bad IP Blocker and Wordpress Theme Detector Blocker: Source: https://github.com/mitchellkrogza/nginx-ultimate-bad-bot-blocker Download \u201cinstall-ngxblocker\u201d to your /usr/local/sbin/directory and make the script executable: sudo wget https://raw.githubusercontent.com/mitchellkrogza/nginx-ultimate-bad-bot-blocker/master/install-ngxblocker -O /usr/local/sbin/install-ngxblocker sudo chmod +x /usr/local/sbin/install-ngxblocker (OPTIONAL) Now run the \u201dinstall-ngxblocker\u201d script in DRY-MODE which will show you what changes it will make and what files it will download for you. This is only a DRY-RUN so no changes are being made yet. The install-ngxblocker downloads all required files including the setup and update scripts: cd /usr/local/sbin sudo ./install-ngxblocker This will show you output as follows of the changes that will be made (NOTE: this is only a DRY-RUN no changes have been made) Checking url: https://raw.githubusercontent.com/mitchellkrogza/nginx-ultimate-bad-bot-blocker/master/include_filelist.txt ** Dry Run ** | not updating files | run as 'install-ngxblocker -x' to install files. Creating directory: /etc/nginx/bots.d REPO = https://raw.githubusercontent.com/mitchellkrogza/nginx-ultimate-bad-bot-blocker/master Downloading [FROM]=> [REPO]/conf.d/globalblacklist.conf [TO]=> /etc/nginx/conf.d/globalblacklist.conf Downloading [FROM]=> [REPO]/conf.d/botblocker-nginx-settings.conf [TO]=> /etc/nginx/conf.d/botblocker-nginx-settings.conf REPO = https://raw.githubusercontent.com/mitchellkrogza/nginx-ultimate-bad-bot-blocker/master Downloading [FROM]=> [REPO]/bots.d/blockbots.conf [TO]=> /etc/nginx/bots.d/blockbots.conf Downloading [FROM]=> [REPO]/bots.d/ddos.conf [TO]=> /etc/nginx/bots.d/ddos.conf Downloading [FROM]=> [REPO]/bots.d/whitelist-ips.conf [TO]=> /etc/nginx/bots.d/whitelist-ips.conf Downloading [FROM]=> [REPO]/bots.d/whitelist-domains.conf [TO]=> /etc/nginx/bots.d/whitelist-domains.conf Downloading [FROM]=> [REPO]/bots.d/blacklist-user-agents.conf [TO]=> /etc/nginx/bots.d/blacklist-user-agents.conf Downloading [FROM]=> [REPO]/bots.d/blacklist-ips.conf [TO]=> /etc/nginx/bots.d/blacklist-ips.conf Downloading [FROM]=> [REPO]/bots.d/bad-referrer-words.conf [TO]=> /etc/nginx/bots.d/bad-referrer-words.conf Downloading [FROM]=> [REPO]/bots.d/custom-bad-referrers.conf [TO]=> /etc/nginx/bots.d/custom-bad-referrers.conf REPO = https://raw.githubusercontent.com/mitchellkrogza/nginx-ultimate-bad-bot-blocker/master Downloading [FROM]=> [REPO]/setup-ngxblocker [TO]=> /usr/local/sbin/setup-ngxblocker Downloading [FROM]=> [REPO]/update-ngxblocker [TO]=> /usr/local/sbin/update-ngxblocker Now run the install script with the -x parameter to download all the necessary files from the repository: cd /usr/local/sbin/ sudo ./install-ngxblocker -x This will give you the following output: Checking url: https://raw.githubusercontent.com/mitchellkrogza/nginx-ultimate-bad-bot-blocker/master/include_filelist.txt Creating directory: /etc/nginx/bots.d REPO = https://raw.githubusercontent.com/mitchellkrogza/nginx-ultimate-bad-bot-blocker/master Downloading [FROM]=> [REPO]/conf.d/globalblacklist.conf [TO]=> /etc/nginx/conf.d/globalblacklist.conf...OK Downloading [FROM]=> [REPO]/conf.d/botblocker-nginx-settings.conf [TO]=> /etc/nginx/conf.d/botblocker-nginx-settings.conf...OK REPO = https://raw.githubusercontent.com/mitchellkrogza/nginx-ultimate-bad-bot-blocker/master Downloading [FROM]=> [REPO]/bots.d/blockbots.conf [TO]=> /etc/nginx/bots.d/blockbots.conf...OK Downloading [FROM]=> [REPO]/bots.d/ddos.conf [TO]=> /etc/nginx/bots.d/ddos.conf...OK Downloading [FROM]=> [REPO]/bots.d/whitelist-ips.conf [TO]=> /etc/nginx/bots.d/whitelist-ips.conf...OK Downloading [FROM]=> [REPO]/bots.d/whitelist-domains.conf [TO]=> /etc/nginx/bots.d/whitelist-domains.conf...OK Downloading [FROM]=> [REPO]/bots.d/blacklist-user-agents.conf [TO]=> /etc/nginx/bots.d/blacklist-user-agents.conf...OK Downloading [FROM]=> [REPO]/bots.d/blacklist-ips.conf [TO]=> /etc/nginx/bots.d/blacklist-ips.conf...OK Downloading [FROM]=> [REPO]/bots.d/bad-referrer-words.conf [TO]=> /etc/nginx/bots.d/bad-referrer-words.conf...OK Downloading [FROM]=> [REPO]/bots.d/custom-bad-referrers.conf [TO]=> /etc/nginx/bots.d/custom-bad-referrers.conf...OK REPO = https://raw.githubusercontent.com/mitchellkrogza/nginx-ultimate-bad-bot-blocker/master Downloading [FROM]=> [REPO]/setup-ngxblocker [TO]=> /usr/local/sbin/setup-ngxblocker...OK Downloading [FROM]=> [REPO]/update-ngxblocker [TO]=> /usr/local/sbin/update-ngxblocker...OK All the required files have now been downloaded to the correct folders on Nginx for you direct from the repository. NOTE: The setup and update scripts can be used, however in this guide the config is done manually. For script execution, refer to the Github page linked above. Include any public IP addresses that should be whitelisted from bot and referrer analysis/blocking by editing the file \u201c/etc/nginx/bots.d/whitelist-ips.conf\u201d. Finally, edit every vhost file (\u201c/etc/nginx/sites-enabled/frontend.conf\u201d, \u201c/etc/nginx/sites-enabled/rmm.conf\u201d and \u201c/etc/nginx/sites-enabled/meshcentral.conf\u201d) and place the following include statements under the \u201cserver\u201d block: server { listen 443 ssl; include /etc/nginx/bots.d/ddos.conf; include /etc/nginx/bots.d/blockbots.conf; } Enabling ModSec in NGINX \u00b6 All steps in this section taken from the NGINX blog post \u201cCompiling and Installing ModSecurity for NGINX Open Source\u201d: https://www.nginx.com/blog/compiling-and-installing-modsecurity-for-open-source-nginx/ Install Prerequisite Packages \u00b6 The first step is to install the packages required to complete the remaining steps in this tutorial. Run the following command, which is appropriate for a freshly installed Ubuntu/Debian system. The required packages might be different for RHEL/CentOS/Oracle Linux. apt-get install -y apt-utils autoconf automake build-essential git libcurl4-openssl-dev libgeoip-dev liblmdb-dev libpcre++-dev libtool libxml2-dev libyajl-dev pkgconf wget zlib1g-dev Download and Compile the ModSecurity 3.0 Source Code \u00b6 With the required prerequisite packages installed, the next step is to compile ModSecurity as an NGINX dynamic module. In ModSecurity 3.0\u2019s new modular architecture, libmodsecurity is the core component which includes all rules and functionality. The second main component in the architecture is a connector that links libmodsecurity to the web server it is running with. There are separate connectors for NGINX, Apache HTTP Server, and IIS. We cover the NGINX connector in the next section. To compile libmodsecurity: Clone the GitHub repository: git clone --depth 1 -b v3/master --single-branch https://github.com/SpiderLabs/ModSecurity Change to the ModSecurity directory and compile the source code: cd ModSecurity git submodule init git submodule update ./build.sh ./configure make make install cd .. The compilation takes about 15 minutes, depending on the processing power of your system. Note: It\u2019s safe to ignore messages like the following during the build process. Even when they appear, the compilation completes and creates a working object. fatal: No names found, cannot describe anything. Download the NGINX Connector for ModSecurity and Compile It as a Dynamic Module \u00b6 Compile the ModSecurity connector for NGINX as a dynamic module for NGINX. Clone the GitHub repository: git clone --depth 1 https://github.com/SpiderLabs/ModSecurity-nginx.git Determine which version of NGINX is running on the host where the ModSecurity module will be loaded: $ nginx -v nginx version: nginx/1.18.0 ( Ubuntu ) Download the source code corresponding to the installed version of NGINX (the complete sources are required even though only the dynamic module is being compiled): wget http://nginx.org/download/nginx-1.18.0.tar.gz tar zxvf nginx-1.18.0.tar.gz Compile the dynamic module and copy it to the standard directory for modules: cd nginx-1.18.0 ./configure --with-compat --add-dynamic-module = ../ModSecurity-nginx make modules cp objs/ngx_http_modsecurity_module.so /etc/nginx/modules cp objs/ngx_http_modsecurity_module.so /usr/share/nginx/modules/ cd .. Load the NGINX ModSecurity Connector Dynamic Module \u00b6 Add the following load_module directive to the main (top\u2011level) context in /etc/nginx/nginx.conf. It instructs NGINX to load the ModSecurity dynamic module when it processes the configuration: load_module modules/ngx_http_modsecurity_module.so; Configure and Enable ModSecurity \u00b6 The final step is to enable and test ModSecurity. Set up the appropriate ModSecurity configuration file. Here we\u2019re using the recommended ModSecurity configuration provided by TrustWave Spiderlabs, the corporate sponsors of ModSecurity. mkdir /etc/nginx/modsec wget -P /etc/nginx/modsec/ https://raw.githubusercontent.com/SpiderLabs/ModSecurity/v3/master/modsecurity.conf-recommended mv /etc/nginx/modsec/modsecurity.conf-recommended /etc/nginx/modsec/modsecurity.conf To guarantee that ModSecurity can find the unicode.mapping file (distributed in the top\u2011level ModSecurity directory of the GitHub repo), copy it to /etc/nginx/modsec. cp ModSecurity/unicode.mapping /etc/nginx/modsec Change the SecRuleEngine directive in the configuration to change from the default \u201cdetection only\u201d mode to actively dropping malicious traffic. #SecRuleEngine DetectionOnly SecRuleEngine On Enabling OWASP Core Rule Set \u00b6 Clone OWASP CRS: cd /etc/nginx/modsec git clone https://github.com/coreruleset/coreruleset.git Create CRS setup config file: cp /etc/nginx/modsec/coreruleset/crs-setup.conf.example /etc/nginx/modsec/coreruleset/crs-setup.conf Edit config file and enable a paranoia level of 2 (comment out section below and modify the paranoia level from 1 - default to 2): SecAction \\ \"id:900000,\\ phase:1,\\ nolog,\\ pass,\\ t:none,\\ setvar:tx.paranoia_level=2\" A Paranoia level of 2 is a good combination of security rules to load by the ModSec engine while keeping low the number of false positives. The OWASP CRS team carried out some tests using BURP against ModSec + OWASP CRS: Create ModSecurity base config file (\u201c/etc/nginx/modsec/modsec-base-cfg.conf\u201d) and include the following lines (the order is important) : Include /etc/nginx/modsec/modsecurity.conf Include /etc/nginx/modsec/coreruleset/crs-setup.conf Include /etc/nginx/modsec/coreruleset/rules/*.conf Enable ModSec in all NGINX enabled sites: \u201c/etc/nginx/sites-enabled/frontend.conf\u201d, \u201c/etc/nginx/sites-enabled/rmm.conf\u201d and \u201c/etc/nginx/sites-enabled/meshcentral.conf\u201d: server { modsecurity on; modsecurity_rules_file /etc/nginx/modsec/modsec-base-cfg.conf; } Tactical RMM custom rules: Access to the admin UI (front-end): We apply the \u201cdeny by default, allow by exception\u201d principle, whereby only a set of predefined public IPs should be allowed to access the UI API and MeshCentral: RMM agents and RMM UI (as referrer while an admin session is active) make web calls that get blocked by the OWASP CRS, specifically PUT, POST and PATCH methods. These three methods can be \u201cwhitelisted\u201d when the requested URI matches legitimate requests. Connection to MeshCentral during Tactical agent install. Create a .conf file under \u201c/etc/nginx/modsec/coreruleset/rules\u201d named \u201cRMM-RULES.conf\u201d, for example, with the following content: #ADMIN UI/FRONTEND ACCESS - DENY BY DEFAULT, ALLOW BY EXCEPTION SecRule SERVER_NAME \"rmm.EXAMPLE.COM\" \"id:1001,phase:1,nolog,msg:'Remote IP Not allowed',deny,chain\" ### ALLOWED PUBLIC IP 1 ######### SecRule REMOTE_ADDR \"!@eq IP1\" chain ### ALLOWED PUBLIC IP 2 ######### SecRule REMOTE_ADDR \"!@eq IP2\" \"t:none\" #API AND MESHCENTRAL - WHITELIST PUT, PATCH AND POST METHODS BY REQUESTED URI SecRule REQUEST_URI \"@beginsWith /api/v3/checkin\" \"id:1002,phase:1,t:none,nolog,allow,chain\" SecRule REQUEST_METHOD \"PUT|PATCH\" \"t:none\" SecRule REQUEST_URI \"@beginsWith /api/v3/checkrunner\" \"chain,id:'1003',phase:1,t:none,nolog,allow\" SecRule REQUEST_METHOD \"PATCH\" \"t:none\" SecRule REQUEST_URI \"@beginsWith /alerts/alerts\" \"chain,id:'1004',phase:1,t:none,nolog,allow\" SecRule REQUEST_METHOD \"PATCH\" \"t:none\" SecRule REQUEST_URI \"@beginsWith /agents/listagents\" \"chain,id:'1005',phase:1,t:none,nolog,allow\" SecRule REQUEST_METHOD \"PATCH\" \"t:none\" SecRule REQUEST_URI \"@beginsWith /api/v3/sysinfo\" \"chain,id:'1006',phase:1,t:none,nolog,allow\" SecRule REQUEST_METHOD \"PATCH\" \"t:none\" SecRule REQUEST_URI \"@beginsWith /api/v3/winupdates\" \"chain,id:'1007',phase:1,t:none,nolog,allow\" SecRule REQUEST_METHOD \"POST\" ##REQUIRED FOR MANAGEMENT ACTIONS FROM ADMIN/FRONT-END UI. WHITELIST BY REFERRER's URL SecRule REQUEST_HEADERS:REFERRER \"https://rmm.EXAMPLE.COM/\" \"id:1008,phase:1,nolog,ctl:ruleRemoveById=920170,allow\" #REQUIRED FOR NEW CLIENTS TO CONNECT TO MESH SERVICE WHILE INSTALLING THE AGENT SecRule REQUEST_URI \"@beginsWith /api/v3/meshexe\" \"id:1009,phase:1,nolog,ctl:ruleRemoveById=920170,allow\" ### NOTE ON RULE ID = 920170 (WHITELISTED IN CASES ABOVE FOR TACTICAL RMM) ### # Do not accept GET or HEAD requests with bodies # HTTP standard allows GET requests to have a body but this # feature is not used in real life. Attackers could try to force # a request body on an unsuspecting web applications. # # -=[ Rule Logic ]=- # This is a chained rule that first checks the Request Method. If it is a # GET or HEAD method, then it checks for the existence of a Content-Length # header. If the header exists and its payload is either not a 0 digit or not # empty, then it will match. # # -=[ References ]=- # http://www.w3.org/Protocols/rfc2616/rfc2616-sec4.html#sec4.3 ###","title":"Securing nginx"},{"location":"securing_nginx/#disclaimer","text":"All the settings covered in this document have been tested against Tactical RMM v0.7.2 and v0.8.0. Before applying these settings in production, use a pre-production environment so potential disruptions in your own environment and the service that you provide to your clients can be avoided. Warning Use the contents included in this guide and apply the security settings detailed here at your own discretion. Info Please check the following github issue for potential side effects of deploying these configs.","title":"DISCLAIMER"},{"location":"securing_nginx/#intro","text":"This section is structured in three main subsections: Enabling GeoIP in NGINX config with the purpose of filtering (blocking) web requests based on the country\u2019s source IP. Enabling anti \u201cbad\u201d bots/referrers in HTTP requests to the NGINX server. Compiling and enabling ModSec + OWASP CRS in NGINX server. Each section can be enabled independently.","title":"Intro"},{"location":"securing_nginx/#hardening-nginx-settings","text":"","title":"Hardening NGINX settings"},{"location":"securing_nginx/#geoip-integration-in-nginx-blocking-requests-by-country-code","text":"Install required packages and NGINX module for GeoIP: # apt-get install geoip-database libgeoip1 libnginx-mod-http-geoip Verify that the GeoIP database files have been placed in the right location: # ls -lrt /usr/share/GeoIP/ total 10004 -rw-r--r-- 1 root root 8138841 Jan 24 2020 GeoIPv6.dat -rw-r--r-- 1 root root 2099217 Jan 24 2020 GeoIP.dat Edit NGINX config file ( /etc/nginx/nginx.conf ) and add the following config under the http { block: http { ## # Basic Settings ## # Load GeoIP Database geoip_country /usr/share/GeoIP/GeoIP.dat; } The next settings will depend on the desired GeoIP blocking strategy. For \u201callow by default, deny by exception\u201d, the config would be: http { ## # Basic Settings ## # Load GeoIP Database geoip_country /usr/share/GeoIP/GeoIP.dat; # map the list of denied countries map $geoip_country_code $allowed_country { default yes; # BLOCKED_COUNTRY_1 COUNTRY_CODE_1 no; # BLOCKED_COUNTRY_2 COUNTRY_CODE_2 no; # BLOCKED_COUNTRY_3 COUNTRY_CODE_3 no; } } (The macro can be modified to achieve the \u201cdeny by default, allow by exception\u201d approach). Finally, the following \u201cif\u201d statement needs to be placed in all the vhosts where the GeoIP blocking should take effect, under the \u201clocation\u201d section: location / { root /var/www/rmm/dist; try_files $uri $uri/ /index.html; add_header Cache-Control \"no-store, no-cache, must-revalidate\"; add_header Pragma \"no-cache\"; # block the country if ($allowed_country = no) { return 444; } } The HTTP Status = 444 is a good choice for NGINX not \u201cwasting\u201d too many resources in sending back the 4xx code to the client being blocked by GeoIP.","title":"GeoIP Integration in NGINX - Blocking Requests by Country Code"},{"location":"securing_nginx/#blocking-bad-bots-and-bad-referrers","text":"Nginx Bad Bot and User-Agent Blocker, Spam Referrer Blocker, Anti DDOS, Bad IP Blocker and Wordpress Theme Detector Blocker: Source: https://github.com/mitchellkrogza/nginx-ultimate-bad-bot-blocker Download \u201cinstall-ngxblocker\u201d to your /usr/local/sbin/directory and make the script executable: sudo wget https://raw.githubusercontent.com/mitchellkrogza/nginx-ultimate-bad-bot-blocker/master/install-ngxblocker -O /usr/local/sbin/install-ngxblocker sudo chmod +x /usr/local/sbin/install-ngxblocker (OPTIONAL) Now run the \u201dinstall-ngxblocker\u201d script in DRY-MODE which will show you what changes it will make and what files it will download for you. This is only a DRY-RUN so no changes are being made yet. The install-ngxblocker downloads all required files including the setup and update scripts: cd /usr/local/sbin sudo ./install-ngxblocker This will show you output as follows of the changes that will be made (NOTE: this is only a DRY-RUN no changes have been made) Checking url: https://raw.githubusercontent.com/mitchellkrogza/nginx-ultimate-bad-bot-blocker/master/include_filelist.txt ** Dry Run ** | not updating files | run as 'install-ngxblocker -x' to install files. Creating directory: /etc/nginx/bots.d REPO = https://raw.githubusercontent.com/mitchellkrogza/nginx-ultimate-bad-bot-blocker/master Downloading [FROM]=> [REPO]/conf.d/globalblacklist.conf [TO]=> /etc/nginx/conf.d/globalblacklist.conf Downloading [FROM]=> [REPO]/conf.d/botblocker-nginx-settings.conf [TO]=> /etc/nginx/conf.d/botblocker-nginx-settings.conf REPO = https://raw.githubusercontent.com/mitchellkrogza/nginx-ultimate-bad-bot-blocker/master Downloading [FROM]=> [REPO]/bots.d/blockbots.conf [TO]=> /etc/nginx/bots.d/blockbots.conf Downloading [FROM]=> [REPO]/bots.d/ddos.conf [TO]=> /etc/nginx/bots.d/ddos.conf Downloading [FROM]=> [REPO]/bots.d/whitelist-ips.conf [TO]=> /etc/nginx/bots.d/whitelist-ips.conf Downloading [FROM]=> [REPO]/bots.d/whitelist-domains.conf [TO]=> /etc/nginx/bots.d/whitelist-domains.conf Downloading [FROM]=> [REPO]/bots.d/blacklist-user-agents.conf [TO]=> /etc/nginx/bots.d/blacklist-user-agents.conf Downloading [FROM]=> [REPO]/bots.d/blacklist-ips.conf [TO]=> /etc/nginx/bots.d/blacklist-ips.conf Downloading [FROM]=> [REPO]/bots.d/bad-referrer-words.conf [TO]=> /etc/nginx/bots.d/bad-referrer-words.conf Downloading [FROM]=> [REPO]/bots.d/custom-bad-referrers.conf [TO]=> /etc/nginx/bots.d/custom-bad-referrers.conf REPO = https://raw.githubusercontent.com/mitchellkrogza/nginx-ultimate-bad-bot-blocker/master Downloading [FROM]=> [REPO]/setup-ngxblocker [TO]=> /usr/local/sbin/setup-ngxblocker Downloading [FROM]=> [REPO]/update-ngxblocker [TO]=> /usr/local/sbin/update-ngxblocker Now run the install script with the -x parameter to download all the necessary files from the repository: cd /usr/local/sbin/ sudo ./install-ngxblocker -x This will give you the following output: Checking url: https://raw.githubusercontent.com/mitchellkrogza/nginx-ultimate-bad-bot-blocker/master/include_filelist.txt Creating directory: /etc/nginx/bots.d REPO = https://raw.githubusercontent.com/mitchellkrogza/nginx-ultimate-bad-bot-blocker/master Downloading [FROM]=> [REPO]/conf.d/globalblacklist.conf [TO]=> /etc/nginx/conf.d/globalblacklist.conf...OK Downloading [FROM]=> [REPO]/conf.d/botblocker-nginx-settings.conf [TO]=> /etc/nginx/conf.d/botblocker-nginx-settings.conf...OK REPO = https://raw.githubusercontent.com/mitchellkrogza/nginx-ultimate-bad-bot-blocker/master Downloading [FROM]=> [REPO]/bots.d/blockbots.conf [TO]=> /etc/nginx/bots.d/blockbots.conf...OK Downloading [FROM]=> [REPO]/bots.d/ddos.conf [TO]=> /etc/nginx/bots.d/ddos.conf...OK Downloading [FROM]=> [REPO]/bots.d/whitelist-ips.conf [TO]=> /etc/nginx/bots.d/whitelist-ips.conf...OK Downloading [FROM]=> [REPO]/bots.d/whitelist-domains.conf [TO]=> /etc/nginx/bots.d/whitelist-domains.conf...OK Downloading [FROM]=> [REPO]/bots.d/blacklist-user-agents.conf [TO]=> /etc/nginx/bots.d/blacklist-user-agents.conf...OK Downloading [FROM]=> [REPO]/bots.d/blacklist-ips.conf [TO]=> /etc/nginx/bots.d/blacklist-ips.conf...OK Downloading [FROM]=> [REPO]/bots.d/bad-referrer-words.conf [TO]=> /etc/nginx/bots.d/bad-referrer-words.conf...OK Downloading [FROM]=> [REPO]/bots.d/custom-bad-referrers.conf [TO]=> /etc/nginx/bots.d/custom-bad-referrers.conf...OK REPO = https://raw.githubusercontent.com/mitchellkrogza/nginx-ultimate-bad-bot-blocker/master Downloading [FROM]=> [REPO]/setup-ngxblocker [TO]=> /usr/local/sbin/setup-ngxblocker...OK Downloading [FROM]=> [REPO]/update-ngxblocker [TO]=> /usr/local/sbin/update-ngxblocker...OK All the required files have now been downloaded to the correct folders on Nginx for you direct from the repository. NOTE: The setup and update scripts can be used, however in this guide the config is done manually. For script execution, refer to the Github page linked above. Include any public IP addresses that should be whitelisted from bot and referrer analysis/blocking by editing the file \u201c/etc/nginx/bots.d/whitelist-ips.conf\u201d. Finally, edit every vhost file (\u201c/etc/nginx/sites-enabled/frontend.conf\u201d, \u201c/etc/nginx/sites-enabled/rmm.conf\u201d and \u201c/etc/nginx/sites-enabled/meshcentral.conf\u201d) and place the following include statements under the \u201cserver\u201d block: server { listen 443 ssl; include /etc/nginx/bots.d/ddos.conf; include /etc/nginx/bots.d/blockbots.conf; }","title":"Blocking \u201cbad bots\u201d and \u201cbad referrers\u201d"},{"location":"securing_nginx/#enabling-modsec-in-nginx","text":"All steps in this section taken from the NGINX blog post \u201cCompiling and Installing ModSecurity for NGINX Open Source\u201d: https://www.nginx.com/blog/compiling-and-installing-modsecurity-for-open-source-nginx/","title":"Enabling ModSec in NGINX"},{"location":"securing_nginx/#install-prerequisite-packages","text":"The first step is to install the packages required to complete the remaining steps in this tutorial. Run the following command, which is appropriate for a freshly installed Ubuntu/Debian system. The required packages might be different for RHEL/CentOS/Oracle Linux. apt-get install -y apt-utils autoconf automake build-essential git libcurl4-openssl-dev libgeoip-dev liblmdb-dev libpcre++-dev libtool libxml2-dev libyajl-dev pkgconf wget zlib1g-dev","title":"Install Prerequisite Packages"},{"location":"securing_nginx/#download-and-compile-the-modsecurity-30-source-code","text":"With the required prerequisite packages installed, the next step is to compile ModSecurity as an NGINX dynamic module. In ModSecurity 3.0\u2019s new modular architecture, libmodsecurity is the core component which includes all rules and functionality. The second main component in the architecture is a connector that links libmodsecurity to the web server it is running with. There are separate connectors for NGINX, Apache HTTP Server, and IIS. We cover the NGINX connector in the next section. To compile libmodsecurity: Clone the GitHub repository: git clone --depth 1 -b v3/master --single-branch https://github.com/SpiderLabs/ModSecurity Change to the ModSecurity directory and compile the source code: cd ModSecurity git submodule init git submodule update ./build.sh ./configure make make install cd .. The compilation takes about 15 minutes, depending on the processing power of your system. Note: It\u2019s safe to ignore messages like the following during the build process. Even when they appear, the compilation completes and creates a working object. fatal: No names found, cannot describe anything.","title":"Download and Compile the ModSecurity 3.0 Source Code"},{"location":"securing_nginx/#download-the-nginx-connector-for-modsecurity-and-compile-it-as-a-dynamic-module","text":"Compile the ModSecurity connector for NGINX as a dynamic module for NGINX. Clone the GitHub repository: git clone --depth 1 https://github.com/SpiderLabs/ModSecurity-nginx.git Determine which version of NGINX is running on the host where the ModSecurity module will be loaded: $ nginx -v nginx version: nginx/1.18.0 ( Ubuntu ) Download the source code corresponding to the installed version of NGINX (the complete sources are required even though only the dynamic module is being compiled): wget http://nginx.org/download/nginx-1.18.0.tar.gz tar zxvf nginx-1.18.0.tar.gz Compile the dynamic module and copy it to the standard directory for modules: cd nginx-1.18.0 ./configure --with-compat --add-dynamic-module = ../ModSecurity-nginx make modules cp objs/ngx_http_modsecurity_module.so /etc/nginx/modules cp objs/ngx_http_modsecurity_module.so /usr/share/nginx/modules/ cd ..","title":"Download the NGINX Connector for ModSecurity and Compile It as a Dynamic Module"},{"location":"securing_nginx/#load-the-nginx-modsecurity-connector-dynamic-module","text":"Add the following load_module directive to the main (top\u2011level) context in /etc/nginx/nginx.conf. It instructs NGINX to load the ModSecurity dynamic module when it processes the configuration: load_module modules/ngx_http_modsecurity_module.so;","title":"Load the NGINX ModSecurity Connector Dynamic Module"},{"location":"securing_nginx/#configure-and-enable-modsecurity","text":"The final step is to enable and test ModSecurity. Set up the appropriate ModSecurity configuration file. Here we\u2019re using the recommended ModSecurity configuration provided by TrustWave Spiderlabs, the corporate sponsors of ModSecurity. mkdir /etc/nginx/modsec wget -P /etc/nginx/modsec/ https://raw.githubusercontent.com/SpiderLabs/ModSecurity/v3/master/modsecurity.conf-recommended mv /etc/nginx/modsec/modsecurity.conf-recommended /etc/nginx/modsec/modsecurity.conf To guarantee that ModSecurity can find the unicode.mapping file (distributed in the top\u2011level ModSecurity directory of the GitHub repo), copy it to /etc/nginx/modsec. cp ModSecurity/unicode.mapping /etc/nginx/modsec Change the SecRuleEngine directive in the configuration to change from the default \u201cdetection only\u201d mode to actively dropping malicious traffic. #SecRuleEngine DetectionOnly SecRuleEngine On","title":"Configure and Enable ModSecurity"},{"location":"securing_nginx/#enabling-owasp-core-rule-set","text":"Clone OWASP CRS: cd /etc/nginx/modsec git clone https://github.com/coreruleset/coreruleset.git Create CRS setup config file: cp /etc/nginx/modsec/coreruleset/crs-setup.conf.example /etc/nginx/modsec/coreruleset/crs-setup.conf Edit config file and enable a paranoia level of 2 (comment out section below and modify the paranoia level from 1 - default to 2): SecAction \\ \"id:900000,\\ phase:1,\\ nolog,\\ pass,\\ t:none,\\ setvar:tx.paranoia_level=2\" A Paranoia level of 2 is a good combination of security rules to load by the ModSec engine while keeping low the number of false positives. The OWASP CRS team carried out some tests using BURP against ModSec + OWASP CRS: Create ModSecurity base config file (\u201c/etc/nginx/modsec/modsec-base-cfg.conf\u201d) and include the following lines (the order is important) : Include /etc/nginx/modsec/modsecurity.conf Include /etc/nginx/modsec/coreruleset/crs-setup.conf Include /etc/nginx/modsec/coreruleset/rules/*.conf Enable ModSec in all NGINX enabled sites: \u201c/etc/nginx/sites-enabled/frontend.conf\u201d, \u201c/etc/nginx/sites-enabled/rmm.conf\u201d and \u201c/etc/nginx/sites-enabled/meshcentral.conf\u201d: server { modsecurity on; modsecurity_rules_file /etc/nginx/modsec/modsec-base-cfg.conf; } Tactical RMM custom rules: Access to the admin UI (front-end): We apply the \u201cdeny by default, allow by exception\u201d principle, whereby only a set of predefined public IPs should be allowed to access the UI API and MeshCentral: RMM agents and RMM UI (as referrer while an admin session is active) make web calls that get blocked by the OWASP CRS, specifically PUT, POST and PATCH methods. These three methods can be \u201cwhitelisted\u201d when the requested URI matches legitimate requests. Connection to MeshCentral during Tactical agent install. Create a .conf file under \u201c/etc/nginx/modsec/coreruleset/rules\u201d named \u201cRMM-RULES.conf\u201d, for example, with the following content: #ADMIN UI/FRONTEND ACCESS - DENY BY DEFAULT, ALLOW BY EXCEPTION SecRule SERVER_NAME \"rmm.EXAMPLE.COM\" \"id:1001,phase:1,nolog,msg:'Remote IP Not allowed',deny,chain\" ### ALLOWED PUBLIC IP 1 ######### SecRule REMOTE_ADDR \"!@eq IP1\" chain ### ALLOWED PUBLIC IP 2 ######### SecRule REMOTE_ADDR \"!@eq IP2\" \"t:none\" #API AND MESHCENTRAL - WHITELIST PUT, PATCH AND POST METHODS BY REQUESTED URI SecRule REQUEST_URI \"@beginsWith /api/v3/checkin\" \"id:1002,phase:1,t:none,nolog,allow,chain\" SecRule REQUEST_METHOD \"PUT|PATCH\" \"t:none\" SecRule REQUEST_URI \"@beginsWith /api/v3/checkrunner\" \"chain,id:'1003',phase:1,t:none,nolog,allow\" SecRule REQUEST_METHOD \"PATCH\" \"t:none\" SecRule REQUEST_URI \"@beginsWith /alerts/alerts\" \"chain,id:'1004',phase:1,t:none,nolog,allow\" SecRule REQUEST_METHOD \"PATCH\" \"t:none\" SecRule REQUEST_URI \"@beginsWith /agents/listagents\" \"chain,id:'1005',phase:1,t:none,nolog,allow\" SecRule REQUEST_METHOD \"PATCH\" \"t:none\" SecRule REQUEST_URI \"@beginsWith /api/v3/sysinfo\" \"chain,id:'1006',phase:1,t:none,nolog,allow\" SecRule REQUEST_METHOD \"PATCH\" \"t:none\" SecRule REQUEST_URI \"@beginsWith /api/v3/winupdates\" \"chain,id:'1007',phase:1,t:none,nolog,allow\" SecRule REQUEST_METHOD \"POST\" ##REQUIRED FOR MANAGEMENT ACTIONS FROM ADMIN/FRONT-END UI. WHITELIST BY REFERRER's URL SecRule REQUEST_HEADERS:REFERRER \"https://rmm.EXAMPLE.COM/\" \"id:1008,phase:1,nolog,ctl:ruleRemoveById=920170,allow\" #REQUIRED FOR NEW CLIENTS TO CONNECT TO MESH SERVICE WHILE INSTALLING THE AGENT SecRule REQUEST_URI \"@beginsWith /api/v3/meshexe\" \"id:1009,phase:1,nolog,ctl:ruleRemoveById=920170,allow\" ### NOTE ON RULE ID = 920170 (WHITELISTED IN CASES ABOVE FOR TACTICAL RMM) ### # Do not accept GET or HEAD requests with bodies # HTTP standard allows GET requests to have a body but this # feature is not used in real life. Attackers could try to force # a request body on an unsuspecting web applications. # # -=[ Rule Logic ]=- # This is a chained rule that first checks the Request Method. If it is a # GET or HEAD method, then it checks for the existence of a Content-Length # header. If the header exists and its payload is either not a 0 digit or not # empty, then it will match. # # -=[ References ]=- # http://www.w3.org/Protocols/rfc2616/rfc2616-sec4.html#sec4.3 ###","title":"Enabling OWASP Core Rule Set"},{"location":"security/","text":"Security \u00b6 If you think that you have found a security vulnerability in Tactical RMM, please disclose it to us via our security e-mail address at security@amidaware.com . Please do not make vulnerabilities public without notifying us and giving us at least 3 days to respond. If you are going to write about Tactical RMM's security, please get in touch, so we can make sure that all claims are correct.","title":"Security"},{"location":"security/#security","text":"If you think that you have found a security vulnerability in Tactical RMM, please disclose it to us via our security e-mail address at security@amidaware.com . Please do not make vulnerabilities public without notifying us and giving us at least 3 days to respond. If you are going to write about Tactical RMM's security, please get in touch, so we can make sure that all claims are correct.","title":"Security"},{"location":"sponsor/","text":"Sponsor Tactical RMM \u00b6 Tactical RMM is a source available project maintained by AmidaWare Inc. and a community of contributors. We work on behalf of the community to create new features, fix bugs, and maintain Tactical RMM. Tactical RMM is currently the only source available RMM available on the market. Responses from a recent survey have rated Tactical RMM as having the fastest and most reliable remote command and script execution compared to all other commercial RMM's. Sponsorships help keep this project alive and motivate the developers to continue to put in more time and effort into the advancement of Tactical RMM. Thousands of hours have been put in to developing, maintaining, improving, and supporting Tactical RMM. Your sponsorship would be greatly appreciated and is necessary to keep this project going. Funds donated are used to fund the legal business necessary for OV code signing and to support development of new features and long term maintenance of the project. We are always looking for feedback and ways to improve Tactical RMM to better address your needs. Please feel free to open a github issue or drop us a message on Discord with your feedback or requests. Sponsor with Stripe or Paypal \u00b6 Stripe is our preferred payment processor, please use Stripe instead of Paypal if you can. If you need an invoices, please use Stripe as it will automatically generate invoices for you with each payment. After sponsoring, follow the instructions to get your code signing token. Upon completion of your purchase and receipt of your code signing token, your payment becomes non-refundable as the digital service provided is considered fully delivered and consumed. To request a refund or cancel your sponsorship please open a ticket . Monthly (recurring) Annually (recurring) Package Price Description Support Sign up Tier 1 $55/month - Minimum tier required for: Code signed Windows agents Linux agents macOS agents Single sign-on - Suggested sponsorship for less than 200 agents Community Support Paypal Stripe Tier 2 $80/month - Minimum tier required for Reporting (excluding Founders and Non-Profits) - Suggested sponsorship for less than 400 agents Community Support Paypal Stripe Tier 3 $105/month - Suggested sponsorship for less than 600 agents Email Support - 72 hour response * Paypal Stripe Tier 4 $155/month - Suggested sponsorship for less than 1,000 agents Email Support - 48 hour response * Paypal Stripe Tier 5 $310/month - Suggested sponsorship for less than 3,000 agents Email Support - 36 hour response * Paypal Stripe Tier 6 $515/month - Suggested sponsorship for less than 5,000 agents Email Support - 24 hour response * Paypal Stripe Tier 7 $850/month - Suggested sponsorship for less than 10,000 agents Email Support - 12 hour response * Paypal Stripe Package Price Description Support Sign up Tier 1 $600/year - Minimum tier required for: Code signed Windows agents Linux agents macOS agents Single sign-on - Suggested sponsorship for less than 200 agents Community Support Stripe Tier 2 $900/year - Minimum tier required for Reporting (excluding Founders and Non-Profits) - Suggested sponsorship for less than 400 agents Community Support Stripe Tier 3 $1,200/year - Suggested sponsorship for less than 600 agents Email Support - 72 hour response * Stripe Tier 4 $1,800/year - Suggested sponsorship for less than 1,000 agents Email Support - 48 hour response * Stripe Tier 5 $3,600/year - Suggested sponsorship for less than 3,000 agents Email Support - 36 hour response * Stripe Tier 6 $6,000/year - Suggested sponsorship for less than 5,000 agents Email Support - 24 hour response * Stripe Tier 7 $9,600/year - Suggested sponsorship for less than 10,000 agents Email Support - 12 hour response * Stripe Support \u00b6 Support is available during business hours, Monday through Friday, regardless of location. If any of the above plans don\u2019t fit your needs, contact us to discuss a custom support solution. Discord Sponsors tag \u00b6 If you're a sponsor and would like a yellow name and access to the #sponsors channel and able to ask questions in #sponsors-reporting_requests please open a ticket with billing email address and Discord username (and multiple staff usernames if desired).","title":"Sponsor"},{"location":"sponsor/#sponsor-tactical-rmm","text":"Tactical RMM is a source available project maintained by AmidaWare Inc. and a community of contributors. We work on behalf of the community to create new features, fix bugs, and maintain Tactical RMM. Tactical RMM is currently the only source available RMM available on the market. Responses from a recent survey have rated Tactical RMM as having the fastest and most reliable remote command and script execution compared to all other commercial RMM's. Sponsorships help keep this project alive and motivate the developers to continue to put in more time and effort into the advancement of Tactical RMM. Thousands of hours have been put in to developing, maintaining, improving, and supporting Tactical RMM. Your sponsorship would be greatly appreciated and is necessary to keep this project going. Funds donated are used to fund the legal business necessary for OV code signing and to support development of new features and long term maintenance of the project. We are always looking for feedback and ways to improve Tactical RMM to better address your needs. Please feel free to open a github issue or drop us a message on Discord with your feedback or requests.","title":"Sponsor Tactical RMM"},{"location":"sponsor/#sponsor-with-stripe-or-paypal","text":"Stripe is our preferred payment processor, please use Stripe instead of Paypal if you can. If you need an invoices, please use Stripe as it will automatically generate invoices for you with each payment. After sponsoring, follow the instructions to get your code signing token. Upon completion of your purchase and receipt of your code signing token, your payment becomes non-refundable as the digital service provided is considered fully delivered and consumed. To request a refund or cancel your sponsorship please open a ticket . Monthly (recurring) Annually (recurring) Package Price Description Support Sign up Tier 1 $55/month - Minimum tier required for: Code signed Windows agents Linux agents macOS agents Single sign-on - Suggested sponsorship for less than 200 agents Community Support Paypal Stripe Tier 2 $80/month - Minimum tier required for Reporting (excluding Founders and Non-Profits) - Suggested sponsorship for less than 400 agents Community Support Paypal Stripe Tier 3 $105/month - Suggested sponsorship for less than 600 agents Email Support - 72 hour response * Paypal Stripe Tier 4 $155/month - Suggested sponsorship for less than 1,000 agents Email Support - 48 hour response * Paypal Stripe Tier 5 $310/month - Suggested sponsorship for less than 3,000 agents Email Support - 36 hour response * Paypal Stripe Tier 6 $515/month - Suggested sponsorship for less than 5,000 agents Email Support - 24 hour response * Paypal Stripe Tier 7 $850/month - Suggested sponsorship for less than 10,000 agents Email Support - 12 hour response * Paypal Stripe Package Price Description Support Sign up Tier 1 $600/year - Minimum tier required for: Code signed Windows agents Linux agents macOS agents Single sign-on - Suggested sponsorship for less than 200 agents Community Support Stripe Tier 2 $900/year - Minimum tier required for Reporting (excluding Founders and Non-Profits) - Suggested sponsorship for less than 400 agents Community Support Stripe Tier 3 $1,200/year - Suggested sponsorship for less than 600 agents Email Support - 72 hour response * Stripe Tier 4 $1,800/year - Suggested sponsorship for less than 1,000 agents Email Support - 48 hour response * Stripe Tier 5 $3,600/year - Suggested sponsorship for less than 3,000 agents Email Support - 36 hour response * Stripe Tier 6 $6,000/year - Suggested sponsorship for less than 5,000 agents Email Support - 24 hour response * Stripe Tier 7 $9,600/year - Suggested sponsorship for less than 10,000 agents Email Support - 12 hour response * Stripe","title":"Sponsor with Stripe or Paypal"},{"location":"sponsor/#support","text":"Support is available during business hours, Monday through Friday, regardless of location. If any of the above plans don\u2019t fit your needs, contact us to discuss a custom support solution.","title":"Support"},{"location":"sponsor/#discord-sponsors-tag","text":"If you're a sponsor and would like a yellow name and access to the #sponsors channel and able to ask questions in #sponsors-reporting_requests please open a ticket with billing email address and Discord username (and multiple staff usernames if desired).","title":"Discord Sponsors tag"},{"location":"support/","text":"Support \u00b6 Community Support \u00b6 Free Support: Available through Discord and Github tickets. We help people get started with Tactical RMM using supported methods as documented here in the public documentation . We may give pointers, or provide additional troubleshooting steps if we believe your issue may be related to a recent update or bug. Commercial Support \u00b6 Paid Support: See pricing table for support plans. Fully managed hosted servers are also available. Public RSA Keys \u00b6 Steps to provide the developers SSH access to your server for troubleshooting: SSH into your server as the linux user you used to install tacticalrmm ( tactical if you followed the install guide). Add our public key: mkdir -p ~/.ssh echo 'ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAACAQC63U5WPFWLKzagz4SV3DSJaYMqVd4Zq8DU518qzWzQ0vWOhDb1aN/X7AhQMBrQasV7HM9HN0Q3sRqw8ppdco9OzrhYUVV3HhJ7HHELed6g60B1Q8kaSd3Oa9n1+gfpbALjXjwAXn57AItvOynPwr4riScuV5Z/rGw7cQVmokM6yN8ZUKtWwh0W+rZVrqtdLPloqIsFrqVGxKJlriMIociu6uIYFAPDpYoInqI9dhPXLmXp/n797AOfiwlTfsyICInXsPmyyimY5eYAIfKNBrqY0QtaQgLuO3toaT4IVqSnG+flTmICb4UmC5eXy6pytf3nVef0EwRRwp4jgeLNAwG0VSjIAgeSH73b7S5P6Z3FwGSMYJxTlH0nJZgz15Oy42hfQqAFIFUl0Kknz9NiFNREK+8mAeLn4p+MdpZEd614yY5jKB1M2bQbblT6WG3flX8Kg5Yg3T/LLE5hKaK+DoD3oi2rs03n2RdzIJVl8Z09n+S8Ti9MzNdeleeBB9pVYpYYhZVLQfmN1arWyUV1PkpKDqOobW4nflqQ1Yf4Zpgg/HaQ8GAkDw1sPZ99PJt697liAbMA0lCyHmPBwgHZ6qhbfzW3dTiLHbgjscecJXUyCIn5U4F32Qp3tETzVhXYyhpBaT6KsCa665BELJSelGDyXbPVBQF4XEy0BkdqbbHVIw== support@amidaware' >> ~/.ssh/authorized_keys chmod 600 ~/.ssh/authorized_keys Ensure the tactical linux user has passwordless sudo: sudo visudo Add the following line to the end of the file which will be opened by running the above command, then save and exit the file. tactical ALL=(ALL:ALL) NOPASSWD:ALL","title":"Support"},{"location":"support/#support","text":"","title":"Support"},{"location":"support/#community-support","text":"Free Support: Available through Discord and Github tickets. We help people get started with Tactical RMM using supported methods as documented here in the public documentation . We may give pointers, or provide additional troubleshooting steps if we believe your issue may be related to a recent update or bug.","title":"Community Support"},{"location":"support/#commercial-support","text":"Paid Support: See pricing table for support plans. Fully managed hosted servers are also available.","title":"Commercial Support"},{"location":"support/#public-rsa-keys","text":"Steps to provide the developers SSH access to your server for troubleshooting: SSH into your server as the linux user you used to install tacticalrmm ( tactical if you followed the install guide). Add our public key: mkdir -p ~/.ssh echo 'ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAACAQC63U5WPFWLKzagz4SV3DSJaYMqVd4Zq8DU518qzWzQ0vWOhDb1aN/X7AhQMBrQasV7HM9HN0Q3sRqw8ppdco9OzrhYUVV3HhJ7HHELed6g60B1Q8kaSd3Oa9n1+gfpbALjXjwAXn57AItvOynPwr4riScuV5Z/rGw7cQVmokM6yN8ZUKtWwh0W+rZVrqtdLPloqIsFrqVGxKJlriMIociu6uIYFAPDpYoInqI9dhPXLmXp/n797AOfiwlTfsyICInXsPmyyimY5eYAIfKNBrqY0QtaQgLuO3toaT4IVqSnG+flTmICb4UmC5eXy6pytf3nVef0EwRRwp4jgeLNAwG0VSjIAgeSH73b7S5P6Z3FwGSMYJxTlH0nJZgz15Oy42hfQqAFIFUl0Kknz9NiFNREK+8mAeLn4p+MdpZEd614yY5jKB1M2bQbblT6WG3flX8Kg5Yg3T/LLE5hKaK+DoD3oi2rs03n2RdzIJVl8Z09n+S8Ti9MzNdeleeBB9pVYpYYhZVLQfmN1arWyUV1PkpKDqOobW4nflqQ1Yf4Zpgg/HaQ8GAkDw1sPZ99PJt697liAbMA0lCyHmPBwgHZ6qhbfzW3dTiLHbgjscecJXUyCIn5U4F32Qp3tETzVhXYyhpBaT6KsCa665BELJSelGDyXbPVBQF4XEy0BkdqbbHVIw== support@amidaware' >> ~/.ssh/authorized_keys chmod 600 ~/.ssh/authorized_keys Ensure the tactical linux user has passwordless sudo: sudo visudo Add the following line to the end of the file which will be opened by running the above command, then save and exit the file. tactical ALL=(ALL:ALL) NOPASSWD:ALL","title":"Public RSA Keys"},{"location":"tipsntricks/","text":"Tips and Tricks \u00b6 Monitor your TRMM Instance via the Built-in Monitoring Endpoint. \u00b6 Info Please refer to the migration guide below for TRMM Release v1.0.0 The health check endpoint provides key metrics and statuses about your RMM instance. It is designed for integration with monitoring tools like Uptime Kuma or other similar solutions. Generate a random string to be used as a token and append it to the bottom of /rmm/api/tacticalrmm/tacticalrmm/local_settings.py like this: MON_TOKEN = \"SuperSekretToken123456\" Then restart Django to activate the endpoint with sudo systemctl restart rmm.service Send a GET request to https://api.yourdomain.com/core/v2/status/ with the X-Mon-Token header. Example using curl : curl -H \"X-Mon-Token: SuperSekretToken123456\" https://api.yourdomain.com/core/v2/status/ The endpoint returns a JSON object with the following structure: Response Fields Field Type Description Example version str The current version of the RMM software. \"1.0.0\" latest_agent_version str The latest available version of the agent. \"2.9.0\" agent_count int The total number of agents connected to the RMM instance. 345 client_count int The total number of clients registered in the RMM. 14 site_count int The total number of sites registered in the RMM. 34 disk_usage_percent int The percentage of disk space used by the RMM instance. 43 mem_usage_percent int The percentage of memory usage by the RMM instance. 54 days_until_cert_expires int The number of days until the SSL certificate expires. 43 cert_expired bool Indicates if the SSL certificate has already expired. false redis_ping bool Indicates if the Redis service is responding. true celery_queue_len int The current number of tasks in the Celery queue. Note : a high number here (> 100) usually means your queue is stuck. See here for how to resolve. 0 celery_queue_health str The health status of the Celery queue. Possible values are \"healthy\" or \"unhealthy\" . \"healthy\" nats_std_ping bool Indicates if the NATS standard service is responding. true nats_ws_ping bool Indicates if the NATS WebSocket service is responding. true mesh_ping bool Indicates if the MeshCentral service is responding. true services_running dict[str, bool] A dictionary of service names with their respective running statuses. See Below Example Response { \"version\" : \"1.0.0\" , \"latest_agent_version\" : \"2.8.0\" , \"agent_count\" : 345 , \"client_count\" : 14 , \"site_count\" : 34 , \"disk_usage_percent\" : 43 , \"mem_usage_percent\" : 54 , \"days_until_cert_expires\" : 43 , \"cert_expired\" : false , \"redis_ping\" : true , \"celery_queue_len\" : 0 , \"celery_queue_health\" : \"healthy\" , \"nats_std_ping\" : true , \"nats_ws_ping\" : true , \"mesh_ping\" : true , \"services_running\" : { \"mesh\" : true , \"daphne\" : true , \"celery\" : true , \"celerybeat\" : true , \"redis\" : true , \"nats\" : true , \"nats-api\" : true } } Monitoring Endpoint v2 Migration Guide \u00b6 Starting with Tactical RMM release v1.0.0, the monitoring endpoint has been upgraded from /core/status/ to /core/v2/status/ (v2) with improved response structure and authentication method. The changes include: New Endpoint: The URL has changed from /core/status/ to /core/v2/status/ . Authentication Method: Instead of sending the token in the request body, it must now be included in the X-Mon-Token request header. HTTP Method Change: The request type has changed from POST to GET . Enhanced Response Data: The new response includes additional fields such as celery_queue_len , celery_queue_health , nats_std_ping , nats_ws_ping , and mesh_ping . Removed fields: The services_running response no longer includes django , nginx , and postgres because if any of these services were not running, the monitoring endpoint itself would be inaccessible, making their inclusion redundant. The mongo service has also been removed as you should already be using posgresql now. Server Monitoring \u00b6 Monitor Network usage: https://humdi.net/vnstat/ Realtime Everything Usage: ( only run when needed because it uses a lot of resources ): https://learn.netdata.cloud/docs/agent/packaging/installer/methods/kickstart Customize User Interface \u00b6 At the top right of your web administration interface, click your Username > preferences . Set default tab: Servers | Workstations | Mixed Use the Filters in the Agent List \u00b6 MeshCentral \u00b6 Tactical RMM is actually 2 products: An RMM service with agent, and a secondary MeshCentral install that handles the Take Control and Remote Background stuff. Want to download multiple files? ZIP zip's the currently selected file(s) and saves it in the current directory. Then you can download the ZIP. It doesn't download and ZIP on the fly. If you want to enable automatic clipboard transfers just click the option under Settings button Adjust Settings \u00b6 Right-click the connect button in Remote Background > Terminal for shell options. Right-click the connect button in Take Control for connection options. Enable Remote Control Options \u00b6 Note These settings are independent of Tactical RMM. Enable features (like auto remove inactive devices) with caution. If you need to comply with GDPR regulations and ensure employee rights legislation is complied with, you can make sure that users receive a popup to inform them so they are aware when your techs log in and connect to their machine. You can enable a banner that shows when a remote connection is established. Login to meshcentral as the mesh superuser . (Incognito window > Type mesh URL > Login as the superuser creds you got at end of server install or this ). It should have 5 icons on the left Click on My Account Click on the device group you want to enable notifications or accept connection etc on (probably TacticalRMM). Next to User Consent click edit (the wee pencil) You can also change features by ticking whatever boxes you want in there (Features: Sync server device name to hostname, Automatically remove inactive devices, Notify/Prompt for Consent/Connection Toolbar settings). Ok your way out Agent Online / Offline logs \u00b6 In mesh from the agent | General Tab Sending Custom Keystrokes to Agent \u00b6 Some of the native hotkeys will not send thru the MeshCentral remote control window (like Alt + Tab ). You can right-click the special key list in the bottom left of the Remote Control window. and add new ones like Alt + Shift + Tab : Task switching between windows Win + Tab : Bring up thumbnail based running program switcher Syncing PC name to MeshCentral \u00b6 If you install TRMM agent, it will add the PC to meshcentral with the current computer name. If you later rename the computer, MeshCentral will not update that PC name by default unless you enable the sync name option in MeshCentral Scripts \u00b6 When Running Scripts \u00b6 When running scripts use the (i) at the end of the script name to: Hover: see script parameter syntax help Left Click: Opens the script source in Github 3rd Party Software Patching \u00b6 Chocolatey is the default 3rd party software library that is used to populate the software tab. You can install anything that is available at chocolatey.org It is installed by default during the TRMM agent installation into the default choco install folder ( C:\\ProgramData\\chocolatey ). If there is an existing choco install or other problem you can delete that folder and fully reinstall by it running the standard choco install script which can be found here: https://chocolatey.org/install.ps1 If you're interested in converting your software to Chocolatey managed you will need to look at customizing this script https://github.com/amidaware/community-scripts/blob/main/scripts_wip/Win_Choco_ConvertToChocoManaged.ps1 . If you have improvements please contribute . Once you've made your script, that will take existing software and convert it to Chocolatey managed (see what Chocolatey manages on an agent with). choco list Next, you're going to schedule your updates. Because of community repo limits , you can purchase chocolatey , host your own chocolatey server , or use this script sparingly https://github.com/amidaware/community-scripts/blob/main/scripts/Win_Chocolatey_Manage_Apps_Bulk.ps1 using -Mode upgrade -Hosts x where x is the max number of machines on an internet connection. Run Intervals for Checks \u00b6 You can modify at several locations / levels: Settings Menu > Automation Manager > Checks tab > Edit check Agent Level: Edit Agent > Run checks every Edit Check under agent > Run this check every (seconds) Note The interval under check will override agent check if set. Understanding refreshing TRMM data \u00b6 How to get updated data and see agents last communication time. Why are usernames in italics? \u00b6 It's the last logged in user, when italicized it means nobody is currently logged in. Getting false SMS and Email alerts from scripts? \u00b6 Return code 98 is reserved and used by Tactical RMM when a script execution times out. In most cases, a timeout can be interpreted as a transient or non-critical issue, rather than a true failure. If you commonly experience script timeouts and want to prevent false-positive alerts, consider adding 98 to the list of success return codes. You can also increase the consecutive failures to 2+","title":"Tips n' Tricks"},{"location":"tipsntricks/#tips-and-tricks","text":"","title":"Tips and Tricks"},{"location":"tipsntricks/#monitor-your-trmm-instance-via-the-built-in-monitoring-endpoint","text":"Info Please refer to the migration guide below for TRMM Release v1.0.0 The health check endpoint provides key metrics and statuses about your RMM instance. It is designed for integration with monitoring tools like Uptime Kuma or other similar solutions. Generate a random string to be used as a token and append it to the bottom of /rmm/api/tacticalrmm/tacticalrmm/local_settings.py like this: MON_TOKEN = \"SuperSekretToken123456\" Then restart Django to activate the endpoint with sudo systemctl restart rmm.service Send a GET request to https://api.yourdomain.com/core/v2/status/ with the X-Mon-Token header. Example using curl : curl -H \"X-Mon-Token: SuperSekretToken123456\" https://api.yourdomain.com/core/v2/status/ The endpoint returns a JSON object with the following structure: Response Fields Field Type Description Example version str The current version of the RMM software. \"1.0.0\" latest_agent_version str The latest available version of the agent. \"2.9.0\" agent_count int The total number of agents connected to the RMM instance. 345 client_count int The total number of clients registered in the RMM. 14 site_count int The total number of sites registered in the RMM. 34 disk_usage_percent int The percentage of disk space used by the RMM instance. 43 mem_usage_percent int The percentage of memory usage by the RMM instance. 54 days_until_cert_expires int The number of days until the SSL certificate expires. 43 cert_expired bool Indicates if the SSL certificate has already expired. false redis_ping bool Indicates if the Redis service is responding. true celery_queue_len int The current number of tasks in the Celery queue. Note : a high number here (> 100) usually means your queue is stuck. See here for how to resolve. 0 celery_queue_health str The health status of the Celery queue. Possible values are \"healthy\" or \"unhealthy\" . \"healthy\" nats_std_ping bool Indicates if the NATS standard service is responding. true nats_ws_ping bool Indicates if the NATS WebSocket service is responding. true mesh_ping bool Indicates if the MeshCentral service is responding. true services_running dict[str, bool] A dictionary of service names with their respective running statuses. See Below Example Response { \"version\" : \"1.0.0\" , \"latest_agent_version\" : \"2.8.0\" , \"agent_count\" : 345 , \"client_count\" : 14 , \"site_count\" : 34 , \"disk_usage_percent\" : 43 , \"mem_usage_percent\" : 54 , \"days_until_cert_expires\" : 43 , \"cert_expired\" : false , \"redis_ping\" : true , \"celery_queue_len\" : 0 , \"celery_queue_health\" : \"healthy\" , \"nats_std_ping\" : true , \"nats_ws_ping\" : true , \"mesh_ping\" : true , \"services_running\" : { \"mesh\" : true , \"daphne\" : true , \"celery\" : true , \"celerybeat\" : true , \"redis\" : true , \"nats\" : true , \"nats-api\" : true } }","title":"Monitor your TRMM Instance via the Built-in Monitoring Endpoint."},{"location":"tipsntricks/#monitoring-endpoint-v2-migration-guide","text":"Starting with Tactical RMM release v1.0.0, the monitoring endpoint has been upgraded from /core/status/ to /core/v2/status/ (v2) with improved response structure and authentication method. The changes include: New Endpoint: The URL has changed from /core/status/ to /core/v2/status/ . Authentication Method: Instead of sending the token in the request body, it must now be included in the X-Mon-Token request header. HTTP Method Change: The request type has changed from POST to GET . Enhanced Response Data: The new response includes additional fields such as celery_queue_len , celery_queue_health , nats_std_ping , nats_ws_ping , and mesh_ping . Removed fields: The services_running response no longer includes django , nginx , and postgres because if any of these services were not running, the monitoring endpoint itself would be inaccessible, making their inclusion redundant. The mongo service has also been removed as you should already be using posgresql now.","title":"Monitoring Endpoint v2 Migration Guide"},{"location":"tipsntricks/#server-monitoring","text":"Monitor Network usage: https://humdi.net/vnstat/ Realtime Everything Usage: ( only run when needed because it uses a lot of resources ): https://learn.netdata.cloud/docs/agent/packaging/installer/methods/kickstart","title":"Server Monitoring"},{"location":"tipsntricks/#customize-user-interface","text":"At the top right of your web administration interface, click your Username > preferences . Set default tab: Servers | Workstations | Mixed","title":"Customize User Interface"},{"location":"tipsntricks/#use-the-filters-in-the-agent-list","text":"","title":"Use the Filters in the Agent List"},{"location":"tipsntricks/#meshcentral","text":"Tactical RMM is actually 2 products: An RMM service with agent, and a secondary MeshCentral install that handles the Take Control and Remote Background stuff. Want to download multiple files? ZIP zip's the currently selected file(s) and saves it in the current directory. Then you can download the ZIP. It doesn't download and ZIP on the fly. If you want to enable automatic clipboard transfers just click the option under Settings button","title":"MeshCentral"},{"location":"tipsntricks/#adjust-settings","text":"Right-click the connect button in Remote Background > Terminal for shell options. Right-click the connect button in Take Control for connection options.","title":"Adjust Settings"},{"location":"tipsntricks/#enable-remote-control-options","text":"Note These settings are independent of Tactical RMM. Enable features (like auto remove inactive devices) with caution. If you need to comply with GDPR regulations and ensure employee rights legislation is complied with, you can make sure that users receive a popup to inform them so they are aware when your techs log in and connect to their machine. You can enable a banner that shows when a remote connection is established. Login to meshcentral as the mesh superuser . (Incognito window > Type mesh URL > Login as the superuser creds you got at end of server install or this ). It should have 5 icons on the left Click on My Account Click on the device group you want to enable notifications or accept connection etc on (probably TacticalRMM). Next to User Consent click edit (the wee pencil) You can also change features by ticking whatever boxes you want in there (Features: Sync server device name to hostname, Automatically remove inactive devices, Notify/Prompt for Consent/Connection Toolbar settings). Ok your way out","title":"Enable Remote Control Options"},{"location":"tipsntricks/#agent-online-offline-logs","text":"In mesh from the agent | General Tab","title":"Agent Online / Offline logs"},{"location":"tipsntricks/#sending-custom-keystrokes-to-agent","text":"Some of the native hotkeys will not send thru the MeshCentral remote control window (like Alt + Tab ). You can right-click the special key list in the bottom left of the Remote Control window. and add new ones like Alt + Shift + Tab : Task switching between windows Win + Tab : Bring up thumbnail based running program switcher","title":"Sending Custom Keystrokes to Agent"},{"location":"tipsntricks/#syncing-pc-name-to-meshcentral","text":"If you install TRMM agent, it will add the PC to meshcentral with the current computer name. If you later rename the computer, MeshCentral will not update that PC name by default unless you enable the sync name option in MeshCentral","title":"Syncing PC name to MeshCentral"},{"location":"tipsntricks/#scripts","text":"","title":"Scripts"},{"location":"tipsntricks/#when-running-scripts","text":"When running scripts use the (i) at the end of the script name to: Hover: see script parameter syntax help Left Click: Opens the script source in Github","title":"When Running Scripts"},{"location":"tipsntricks/#3rd-party-software-patching","text":"Chocolatey is the default 3rd party software library that is used to populate the software tab. You can install anything that is available at chocolatey.org It is installed by default during the TRMM agent installation into the default choco install folder ( C:\\ProgramData\\chocolatey ). If there is an existing choco install or other problem you can delete that folder and fully reinstall by it running the standard choco install script which can be found here: https://chocolatey.org/install.ps1 If you're interested in converting your software to Chocolatey managed you will need to look at customizing this script https://github.com/amidaware/community-scripts/blob/main/scripts_wip/Win_Choco_ConvertToChocoManaged.ps1 . If you have improvements please contribute . Once you've made your script, that will take existing software and convert it to Chocolatey managed (see what Chocolatey manages on an agent with). choco list Next, you're going to schedule your updates. Because of community repo limits , you can purchase chocolatey , host your own chocolatey server , or use this script sparingly https://github.com/amidaware/community-scripts/blob/main/scripts/Win_Chocolatey_Manage_Apps_Bulk.ps1 using -Mode upgrade -Hosts x where x is the max number of machines on an internet connection.","title":"3rd Party Software Patching"},{"location":"tipsntricks/#run-intervals-for-checks","text":"You can modify at several locations / levels: Settings Menu > Automation Manager > Checks tab > Edit check Agent Level: Edit Agent > Run checks every Edit Check under agent > Run this check every (seconds) Note The interval under check will override agent check if set.","title":"Run Intervals for Checks"},{"location":"tipsntricks/#understanding-refreshing-trmm-data","text":"How to get updated data and see agents last communication time.","title":"Understanding refreshing TRMM data"},{"location":"tipsntricks/#why-are-usernames-in-italics","text":"It's the last logged in user, when italicized it means nobody is currently logged in.","title":"Why are usernames in italics?"},{"location":"tipsntricks/#getting-false-sms-and-email-alerts-from-scripts","text":"Return code 98 is reserved and used by Tactical RMM when a script execution times out. In most cases, a timeout can be interpreted as a transient or non-critical issue, rather than a true failure. If you commonly experience script timeouts and want to prevent false-positive alerts, consider adding 98 to the list of success return codes. You can also increase the consecutive failures to 2+","title":"Getting false SMS and Email alerts from scripts?"},{"location":"troubleshooting/","text":"Troubleshooting \u00b6 I just updated and now it doesn't work. \u00b6 It's just a blank white screen, nothing will load when I refresh. See . Server Troubleshooting Script \u00b6 If you've asked for help in #support please run this, and send a screenshot at the top of the thread created for troubleshooting your issue. Blur your domains if you desire privacy (or DM the person that's helping you to make everyones life easier). First, ensure that dig is installed via the dnsutils package: sudo apt update && sudo apt install -y dnsutils Next, download and run the troubleshooting script: wget -N https://raw.githubusercontent.com/amidaware/tacticalrmm/develop/troubleshoot_server.sh chmod +x troubleshoot_server.sh ./troubleshoot_server.sh Note If you're working with a support person please provide the full script output. If you don't want to post publicly, feel free to DM the person working with you in Discord #support channel Celery queue stuck \u00b6 If you notice issues such as bulk scripts or commands not executing, client/site colors not clearing, or alerts not resetting, it's possible that the Celery queue is stuck. Follow these steps to check and resolve the issue: Navigate to the following directory and activate the virtual environment: cd /rmm/api/tacticalrmm source ../env/bin/activate Download the management command: wget -O /rmm/api/tacticalrmm/core/management/commands/get_celery_queue_length.py 'https://raw.githubusercontent.com/amidaware/tacticalrmm/refs/heads/develop/api/tacticalrmm/core/management/commands/get_celery_queue_length.py' Check the number of items in the Celery queue: python manage.py get_celery_queue_length If the number of items in the queue is very high (greater than 100), the queue is likely stuck. Purge the Celery queue: celery -A tacticalrmm purge -f Restart Celery and Celery Beat: sudo systemctl restart celery celerybeat After completing these steps, the queue should be cleared, and Celery should resume normal operation. Make sure DNS (name resolution) was setup properly \u00b6 From the agent \u00b6 Open command prompt: ping rmm.example.com ping api.example.com ping mesh.example.com The IP address for all 3 should reflect your Tactical RMM server. Problems after new server install \u00b6 In the very unlikely event you have issues after install please wipe the box and install again (following all the steps including downloading the install script but not running it yet ) use the following command which will log the install progress and if you continue to have issues will assist with support of the installation. bash -x install.sh 2 > & 1 | tee install.log Note Logging of installs isn\u2019t desirable as it logs extremely sensitive information which is why this isn\u2019t done by default! Do not post the raw log publicly only provide it if requested and then by dm only. Authorized users in Discord are: @BurningTimes#1938 @sadnub#6992 @dinger1986#1734 @silversword#9652 \"Bad credentials\" error when trying to login to the web UI \u00b6 If you are sure you are using the correct credentials and still getting a \"bad credentials\" error, open your browser's dev tools ( Ctrl + Shift + J on Chrome) and check the Console tab to see the real error. It will most probably be a CORS error which means you need to check your DNS settings and make sure whatever computer you're trying to access the UI from resolves your 3 subdomains to the correct IP of the server running the RMM (public IP if running in the cloud, or private IP if running behind NAT). If you see an error about SSL or certificate expired, then your Let's Encrypt cert has probably expired and you'll need to renew it. Refer to the Let's Encrypt cert renewal instructions here . Agents not installing or updating \u00b6 The most common problem we've seen of agents not installing or updating is due to Antivirus blocking the updater executable. Windows Defender will 100% of the time block the updater from running unless an exclusion is set. Refer to the Agent Installation instructions for AV exceptions to set and manually doing an agent update with logging to troubleshoot further. Agents will also not automatically update if they are too old. If you have agents that are relatively old, you will need to uninstall them manually and reinstall using the latest version. The mesh installer is created at time of install. Make sure it's working by running this on your TRMM server. Check TRMM connection to MeshCentral Standard Install docker /rmm/api/env/bin/python /rmm/api/tacticalrmm/manage.py check_mesh sudo docker compose exec tactical-backend python manage.py check_mesh Warning As of v0.12.0 Error 1005 usually means something doesn't match and / or the mesh username has to be all lower case. If you customize the \"Mesh Device Group Name\" in Tactical's settings you MUST also manually match that Mesh Group in mesh itself because you must understand . Collect Update debug logs for troubleshooting agents that don't update Make sure TRMM can connect to mesh Did you customize MeshCentral options and now agents won't install? \u00b6 fork/exec C:\\Program Files\\TacticalAgent\\meshagent.exe: This version of %1 is not compatible with the version of Windows you're running. Check your computer's system information and then contact the software publisher or MeshCentrals Group name These two sets of settings must match for the install to download the mesh installer. Fix it till the test above works. Agents not checking in or showing up / General agent issues \u00b6 Eg. Agent Boot time: 53 years ago These are NATS problems. Try the quick fixes first: From Admin Web Interface \u00b6 First, reload NATS from Tactical's web UI: Tools > Server Maintenance > Reload Nats Configuration If that doesn't work, check each part starting with the server: Server SSH login \u00b6 Reload NATS: /rmm/api/env/bin/python /rmm/api/tacticalrmm/manage.py reload_nats sudo systemctl restart nats.service Look at NATS service errors (make sure it's running): sudo systemctl status nats.service If NATS isn't running see detailed reason why it isn't: sudo systemctl stop nats.service nats-server -DVV -c /rmm/api/tacticalrmm/nats-rmm.conf Fix the problem, then restart NATS: sudo systemctl restart nats.service From Agent Install \u00b6 Open CMD as admin on the problem computer and stop the agent services: net stop tacticalrmm Run the tacticalrmm service manually with debug logging: \"C:\\Program Files\\TacticalAgent\\tacticalrmm.exe\" -m rpc -log debug -logto stdout This will print out a ton of info. You should be able to see the error from the debug log output. Please then copy / paste the logs and post them either in our Discord support chat , or create a github issue . If all else fails, simply uninstall the agent either from control panel or silently with \"C:\\Program Files\\TacticalAgent\\unins000.exe\" /VERYSILENT and then reinstall the agent. All other errors \u00b6 First, run the update script with the --force flag. This will fix permissions and reinstall python / node packages that might have gotten corrupted. ./update.sh --force Check the debug log from the web UI: File > Debug Log Open your browser's dev tools ( Ctrl + Shift + J on Chrome) and check the Console tab for any errors. Check all the systemd services that the rmm uses to function and check to make sure they're all active / running and enabled: sudo systemctl status rmm.service sudo systemctl status daphne.service sudo systemctl status celery.service sudo systemctl status celerybeat.service sudo systemctl status nginx.service sudo systemctl status nats.service sudo systemctl status nats-api.service sudo systemctl status meshcentral.service sudo systemctl status mongod.service sudo systemctl status postgresql.service sudo systemctl status redis-server.service Or you can use systemctl --failed to see any failed services on your machine. Read through the log files in the following folders and check for errors: /rmm/api/tacticalrmm/tacticalrmm/private/log /var/log/celery Using Cloudflare DNS \u00b6 rmm.example.com can be proxied. api.example.com can be proxied when using (the default) agent configuration which utilizes websockets. mesh.example.com can NOT be proxied because Cloudflare changed something in Aug 2023 and now it doesn't work. See 5302 . If you're getting Invalid group id at the end of the install you're probably doing something wrong / wrong IP for api. Testing network connectivity between agent and server \u00b6 Using PowerShell, make sure you can connect to 443 from agent to server: Test-NetConnection -ComputerName api . example . com -Port 443 Check your SSL certs to make sure they are what they should be (no proxy stuff): https://www.digicert.com/help/ Are you trying to use a reverse proxy to share your single public IP with multiple services on 443? This is complicated and unsupported by Tactical RMM . Test your setup. Take Control or Remote Background missing button / can't connect \u00b6 This is a MeshCentral connection problem. Don't use Firefox (test in vanilla Chrome first). Open mesh.domain.com and see if the agent is listed there. If you don't see your agent (or it's offline), restart TRMM server (or service ). Restart Mesh Agent on client PC. Check again. Still not appearing in mesh.domain.com in Mesh go to \"My Server\" > Trace tab > Click tracing button > Check MeshAgent traffic . Restart Mesh Agent on client PC. You should see something in trace like . If you don't, you have firewall / connectivity issues (open mesh.domain.com from agent and troubleshoot. You aren't using a proxy right?). Need to recover your Mesh token? \u00b6 Login to server with SSH and run: node /meshcentral/node_modules/meshcentral --logintokenkey Mesh Agent not connecting to server \u00b6 When agents don't show up in your Mesh console (after logging into https://mesh.EXAMPLE.COM), and all data is blank. Your AV has most likely blocked the agent. Error 500 \u00b6 These are always logged to /rmm/api/tacticalrmm/tacticalrmm/private/log/django_debug.log use this to check. Can't login on server after first setup \u00b6 You're sure you're typing in everything right, giving it 2FA code, and getting error 400 login error. TOTP is time sensitive, check your time/NTP and make sure it's right! :) Error 0: \u00b6 If you're trying to login check dns , check server and client time , and check your certs. executable file not found in %PATH% \u00b6 This error can show up for PowerShell or choco. exec: \"Powershell\": executable file not found in %PATH% exec: \"choco.exe\": executable file not found in %PATH% choco : The term 'choco' is not recognized as the name of a cmdlet Run the Win_Powershell_TestPATH.bat script to gather information about your environment. This script will output either ExpandString or String . See Microsoft's docs for details. ExpandString (REG_EXPAND_SZ) means %SystemRoot% will expand to C:\\Windows . Reboot and choco will most likely work. String (REG_SZ) means %SystemRoot% will not be expanded. Changing the registry value type will most likely work. Note If your path does not have Path variables like %SystemRoot% , the registry type does not matter because the paths are already expanded. If the script outputs \"String\", changing the registry type and restarting the Tactical service will most likely work. This script will output the value type and the $PATH. Make note of the $PATH because Set-ItemProperty needs the value to change the type. Run this as administrator and uncomment Set-ItemProperty to change the registry type to ExpandString. Run the first two commands to get the type and $PATH to make sure everything is good. Restart the TacticalRMM service and try the command again. $kind = ( Get-Item -Path 'Registry::HKEY_LOCAL_MACHINE\\System\\CurrentControlSet\\Control\\Session Manager\\Environment' ). GetValueKind ( 'PATH' ) Write-Output \"Path kind before the change: ${kind}\" $path = Get-ItemPropertyValue -Path 'Registry::HKEY_LOCAL_MACHINE\\System\\CurrentControlSet\\Control\\Session Manager\\Environment' -Name Path Write-Output \"Path before changing the type:\" , $path Write-Output \"Changing the registry key type\" # Needs to be run as administrator # Set-ItemProperty -Path 'Registry::HKEY_LOCAL_MACHINE\\System\\CurrentControlSet\\Control\\Session Manager\\Environment' -Name PATH -Value $path -Type ExpandString Write-Output \"\" $kind = ( Get-Item -Path 'Registry::HKEY_LOCAL_MACHINE\\System\\CurrentControlSet\\Control\\Session Manager\\Environment' ). GetValueKind ( 'PATH' ) Write-Output \"Path kind after the change: ${kind}\" $path = Get-ItemPropertyValue -Path 'Registry::HKEY_LOCAL_MACHINE\\System\\CurrentControlSet\\Control\\Session Manager\\Environment' -Name Path Write-Output \"Path after changing the type:\" , $path Issues with agents offline after reboot or new install on AWS and other cloud platforms using cloudinit or similar \u00b6 Run cat /etc/hosts If the output shows that the hosts file is managed by another process follow the instructions to change the config. Add in your api, rmm and mesh urls on the line for 127.0.1.1 in the hosts file Save the hosts file Restart services or run update.sh --force 54 year agents in the dashboard can be a sign of this NATS problem Server 2016/2019 agent not updating \u00b6 If you're seeing things like time=\"2025-03-17T01:02:11-07:00\" level=error msg=\"error creating NewUpdateSession: ole.CoInitializeEx(0, ole.COINIT_MULTITHREADED): Cannot change thread mode after it is set.\" time=\"2025-04-30T09:28:47-07:00\" level=error msg=\"SyncMeshNodeID() getMeshNodeID() exit status 0xc0000142: \" time=\"2025-04-30T09:28:55-07:00\" level=error msg=\"Checkrunner RunChecks exit status 0xc0000142: \" time=\"2025-04-30T09:29:07-07:00\" level=error msg=\"SyncMeshNodeID() getMeshNodeID() exit status 0xc0000142: \" time=\"2025-04-30T09:29:54-07:00\" level=error msg=\"Checkrunner RunChecks exit status 0xc0000142: \" time=\"2025-04-30T09:30:46-07:00\" level=error msg=\"Checkrunner RunChecks exit status 0xc0000142: \" time=\"2025-04-30T09:35:07-07:00\" level=info msg=\"Agent updating from 2.9.0 to 2.9.1\" This is a problem with the non-interactive heap stack filling up. The default value is 768KB, and needs to be updated to 4MB. Microsoft KB","title":"Troubleshooting"},{"location":"troubleshooting/#troubleshooting","text":"","title":"Troubleshooting"},{"location":"troubleshooting/#i-just-updated-and-now-it-doesnt-work","text":"It's just a blank white screen, nothing will load when I refresh. See .","title":"I just updated and now it doesn't work."},{"location":"troubleshooting/#server-troubleshooting-script","text":"If you've asked for help in #support please run this, and send a screenshot at the top of the thread created for troubleshooting your issue. Blur your domains if you desire privacy (or DM the person that's helping you to make everyones life easier). First, ensure that dig is installed via the dnsutils package: sudo apt update && sudo apt install -y dnsutils Next, download and run the troubleshooting script: wget -N https://raw.githubusercontent.com/amidaware/tacticalrmm/develop/troubleshoot_server.sh chmod +x troubleshoot_server.sh ./troubleshoot_server.sh Note If you're working with a support person please provide the full script output. If you don't want to post publicly, feel free to DM the person working with you in Discord #support channel","title":"Server Troubleshooting Script"},{"location":"troubleshooting/#celery-queue-stuck","text":"If you notice issues such as bulk scripts or commands not executing, client/site colors not clearing, or alerts not resetting, it's possible that the Celery queue is stuck. Follow these steps to check and resolve the issue: Navigate to the following directory and activate the virtual environment: cd /rmm/api/tacticalrmm source ../env/bin/activate Download the management command: wget -O /rmm/api/tacticalrmm/core/management/commands/get_celery_queue_length.py 'https://raw.githubusercontent.com/amidaware/tacticalrmm/refs/heads/develop/api/tacticalrmm/core/management/commands/get_celery_queue_length.py' Check the number of items in the Celery queue: python manage.py get_celery_queue_length If the number of items in the queue is very high (greater than 100), the queue is likely stuck. Purge the Celery queue: celery -A tacticalrmm purge -f Restart Celery and Celery Beat: sudo systemctl restart celery celerybeat After completing these steps, the queue should be cleared, and Celery should resume normal operation.","title":"Celery queue stuck"},{"location":"troubleshooting/#make-sure-dns-name-resolution-was-setup-properly","text":"","title":"Make sure DNS (name resolution) was setup properly"},{"location":"troubleshooting/#from-the-agent","text":"Open command prompt: ping rmm.example.com ping api.example.com ping mesh.example.com The IP address for all 3 should reflect your Tactical RMM server.","title":"From the agent"},{"location":"troubleshooting/#problems-after-new-server-install","text":"In the very unlikely event you have issues after install please wipe the box and install again (following all the steps including downloading the install script but not running it yet ) use the following command which will log the install progress and if you continue to have issues will assist with support of the installation. bash -x install.sh 2 > & 1 | tee install.log Note Logging of installs isn\u2019t desirable as it logs extremely sensitive information which is why this isn\u2019t done by default! Do not post the raw log publicly only provide it if requested and then by dm only. Authorized users in Discord are: @BurningTimes#1938 @sadnub#6992 @dinger1986#1734 @silversword#9652","title":"Problems after new server install"},{"location":"troubleshooting/#bad-credentials-error-when-trying-to-login-to-the-web-ui","text":"If you are sure you are using the correct credentials and still getting a \"bad credentials\" error, open your browser's dev tools ( Ctrl + Shift + J on Chrome) and check the Console tab to see the real error. It will most probably be a CORS error which means you need to check your DNS settings and make sure whatever computer you're trying to access the UI from resolves your 3 subdomains to the correct IP of the server running the RMM (public IP if running in the cloud, or private IP if running behind NAT). If you see an error about SSL or certificate expired, then your Let's Encrypt cert has probably expired and you'll need to renew it. Refer to the Let's Encrypt cert renewal instructions here .","title":"\"Bad credentials\" error when trying to login to the web UI"},{"location":"troubleshooting/#agents-not-installing-or-updating","text":"The most common problem we've seen of agents not installing or updating is due to Antivirus blocking the updater executable. Windows Defender will 100% of the time block the updater from running unless an exclusion is set. Refer to the Agent Installation instructions for AV exceptions to set and manually doing an agent update with logging to troubleshoot further. Agents will also not automatically update if they are too old. If you have agents that are relatively old, you will need to uninstall them manually and reinstall using the latest version. The mesh installer is created at time of install. Make sure it's working by running this on your TRMM server. Check TRMM connection to MeshCentral Standard Install docker /rmm/api/env/bin/python /rmm/api/tacticalrmm/manage.py check_mesh sudo docker compose exec tactical-backend python manage.py check_mesh Warning As of v0.12.0 Error 1005 usually means something doesn't match and / or the mesh username has to be all lower case. If you customize the \"Mesh Device Group Name\" in Tactical's settings you MUST also manually match that Mesh Group in mesh itself because you must understand . Collect Update debug logs for troubleshooting agents that don't update Make sure TRMM can connect to mesh","title":"Agents not installing or updating"},{"location":"troubleshooting/#did-you-customize-meshcentral-options-and-now-agents-wont-install","text":"fork/exec C:\\Program Files\\TacticalAgent\\meshagent.exe: This version of %1 is not compatible with the version of Windows you're running. Check your computer's system information and then contact the software publisher or MeshCentrals Group name These two sets of settings must match for the install to download the mesh installer. Fix it till the test above works.","title":"Did you customize MeshCentral options and now agents won't install?"},{"location":"troubleshooting/#agents-not-checking-in-or-showing-up-general-agent-issues","text":"Eg. Agent Boot time: 53 years ago These are NATS problems. Try the quick fixes first:","title":"Agents not checking in or showing up / General agent issues"},{"location":"troubleshooting/#from-admin-web-interface","text":"First, reload NATS from Tactical's web UI: Tools > Server Maintenance > Reload Nats Configuration If that doesn't work, check each part starting with the server:","title":"From Admin Web Interface"},{"location":"troubleshooting/#server-ssh-login","text":"Reload NATS: /rmm/api/env/bin/python /rmm/api/tacticalrmm/manage.py reload_nats sudo systemctl restart nats.service Look at NATS service errors (make sure it's running): sudo systemctl status nats.service If NATS isn't running see detailed reason why it isn't: sudo systemctl stop nats.service nats-server -DVV -c /rmm/api/tacticalrmm/nats-rmm.conf Fix the problem, then restart NATS: sudo systemctl restart nats.service","title":"Server SSH login"},{"location":"troubleshooting/#from-agent-install","text":"Open CMD as admin on the problem computer and stop the agent services: net stop tacticalrmm Run the tacticalrmm service manually with debug logging: \"C:\\Program Files\\TacticalAgent\\tacticalrmm.exe\" -m rpc -log debug -logto stdout This will print out a ton of info. You should be able to see the error from the debug log output. Please then copy / paste the logs and post them either in our Discord support chat , or create a github issue . If all else fails, simply uninstall the agent either from control panel or silently with \"C:\\Program Files\\TacticalAgent\\unins000.exe\" /VERYSILENT and then reinstall the agent.","title":"From Agent Install"},{"location":"troubleshooting/#all-other-errors","text":"First, run the update script with the --force flag. This will fix permissions and reinstall python / node packages that might have gotten corrupted. ./update.sh --force Check the debug log from the web UI: File > Debug Log Open your browser's dev tools ( Ctrl + Shift + J on Chrome) and check the Console tab for any errors. Check all the systemd services that the rmm uses to function and check to make sure they're all active / running and enabled: sudo systemctl status rmm.service sudo systemctl status daphne.service sudo systemctl status celery.service sudo systemctl status celerybeat.service sudo systemctl status nginx.service sudo systemctl status nats.service sudo systemctl status nats-api.service sudo systemctl status meshcentral.service sudo systemctl status mongod.service sudo systemctl status postgresql.service sudo systemctl status redis-server.service Or you can use systemctl --failed to see any failed services on your machine. Read through the log files in the following folders and check for errors: /rmm/api/tacticalrmm/tacticalrmm/private/log /var/log/celery","title":"All other errors"},{"location":"troubleshooting/#using-cloudflare-dns","text":"rmm.example.com can be proxied. api.example.com can be proxied when using (the default) agent configuration which utilizes websockets. mesh.example.com can NOT be proxied because Cloudflare changed something in Aug 2023 and now it doesn't work. See 5302 . If you're getting Invalid group id at the end of the install you're probably doing something wrong / wrong IP for api.","title":"Using Cloudflare DNS"},{"location":"troubleshooting/#testing-network-connectivity-between-agent-and-server","text":"Using PowerShell, make sure you can connect to 443 from agent to server: Test-NetConnection -ComputerName api . example . com -Port 443 Check your SSL certs to make sure they are what they should be (no proxy stuff): https://www.digicert.com/help/ Are you trying to use a reverse proxy to share your single public IP with multiple services on 443? This is complicated and unsupported by Tactical RMM . Test your setup.","title":"Testing network connectivity between agent and server"},{"location":"troubleshooting/#take-control-or-remote-background-missing-button-cant-connect","text":"This is a MeshCentral connection problem. Don't use Firefox (test in vanilla Chrome first). Open mesh.domain.com and see if the agent is listed there. If you don't see your agent (or it's offline), restart TRMM server (or service ). Restart Mesh Agent on client PC. Check again. Still not appearing in mesh.domain.com in Mesh go to \"My Server\" > Trace tab > Click tracing button > Check MeshAgent traffic . Restart Mesh Agent on client PC. You should see something in trace like . If you don't, you have firewall / connectivity issues (open mesh.domain.com from agent and troubleshoot. You aren't using a proxy right?).","title":"Take Control or Remote Background missing button / can't connect"},{"location":"troubleshooting/#need-to-recover-your-mesh-token","text":"Login to server with SSH and run: node /meshcentral/node_modules/meshcentral --logintokenkey","title":"Need to recover your Mesh token?"},{"location":"troubleshooting/#mesh-agent-not-connecting-to-server","text":"When agents don't show up in your Mesh console (after logging into https://mesh.EXAMPLE.COM), and all data is blank. Your AV has most likely blocked the agent.","title":"Mesh Agent not connecting to server"},{"location":"troubleshooting/#error-500","text":"These are always logged to /rmm/api/tacticalrmm/tacticalrmm/private/log/django_debug.log use this to check.","title":"Error 500"},{"location":"troubleshooting/#cant-login-on-server-after-first-setup","text":"You're sure you're typing in everything right, giving it 2FA code, and getting error 400 login error. TOTP is time sensitive, check your time/NTP and make sure it's right! :)","title":"Can't login on server after first setup"},{"location":"troubleshooting/#error-0","text":"If you're trying to login check dns , check server and client time , and check your certs.","title":"Error 0:"},{"location":"troubleshooting/#executable-file-not-found-in-path","text":"This error can show up for PowerShell or choco. exec: \"Powershell\": executable file not found in %PATH% exec: \"choco.exe\": executable file not found in %PATH% choco : The term 'choco' is not recognized as the name of a cmdlet Run the Win_Powershell_TestPATH.bat script to gather information about your environment. This script will output either ExpandString or String . See Microsoft's docs for details. ExpandString (REG_EXPAND_SZ) means %SystemRoot% will expand to C:\\Windows . Reboot and choco will most likely work. String (REG_SZ) means %SystemRoot% will not be expanded. Changing the registry value type will most likely work. Note If your path does not have Path variables like %SystemRoot% , the registry type does not matter because the paths are already expanded. If the script outputs \"String\", changing the registry type and restarting the Tactical service will most likely work. This script will output the value type and the $PATH. Make note of the $PATH because Set-ItemProperty needs the value to change the type. Run this as administrator and uncomment Set-ItemProperty to change the registry type to ExpandString. Run the first two commands to get the type and $PATH to make sure everything is good. Restart the TacticalRMM service and try the command again. $kind = ( Get-Item -Path 'Registry::HKEY_LOCAL_MACHINE\\System\\CurrentControlSet\\Control\\Session Manager\\Environment' ). GetValueKind ( 'PATH' ) Write-Output \"Path kind before the change: ${kind}\" $path = Get-ItemPropertyValue -Path 'Registry::HKEY_LOCAL_MACHINE\\System\\CurrentControlSet\\Control\\Session Manager\\Environment' -Name Path Write-Output \"Path before changing the type:\" , $path Write-Output \"Changing the registry key type\" # Needs to be run as administrator # Set-ItemProperty -Path 'Registry::HKEY_LOCAL_MACHINE\\System\\CurrentControlSet\\Control\\Session Manager\\Environment' -Name PATH -Value $path -Type ExpandString Write-Output \"\" $kind = ( Get-Item -Path 'Registry::HKEY_LOCAL_MACHINE\\System\\CurrentControlSet\\Control\\Session Manager\\Environment' ). GetValueKind ( 'PATH' ) Write-Output \"Path kind after the change: ${kind}\" $path = Get-ItemPropertyValue -Path 'Registry::HKEY_LOCAL_MACHINE\\System\\CurrentControlSet\\Control\\Session Manager\\Environment' -Name Path Write-Output \"Path after changing the type:\" , $path","title":"executable file not found in %PATH%"},{"location":"troubleshooting/#issues-with-agents-offline-after-reboot-or-new-install-on-aws-and-other-cloud-platforms-using-cloudinit-or-similar","text":"Run cat /etc/hosts If the output shows that the hosts file is managed by another process follow the instructions to change the config. Add in your api, rmm and mesh urls on the line for 127.0.1.1 in the hosts file Save the hosts file Restart services or run update.sh --force 54 year agents in the dashboard can be a sign of this NATS problem","title":"Issues with agents offline after reboot or new install on AWS and other cloud platforms using cloudinit or similar"},{"location":"troubleshooting/#server-20162019-agent-not-updating","text":"If you're seeing things like time=\"2025-03-17T01:02:11-07:00\" level=error msg=\"error creating NewUpdateSession: ole.CoInitializeEx(0, ole.COINIT_MULTITHREADED): Cannot change thread mode after it is set.\" time=\"2025-04-30T09:28:47-07:00\" level=error msg=\"SyncMeshNodeID() getMeshNodeID() exit status 0xc0000142: \" time=\"2025-04-30T09:28:55-07:00\" level=error msg=\"Checkrunner RunChecks exit status 0xc0000142: \" time=\"2025-04-30T09:29:07-07:00\" level=error msg=\"SyncMeshNodeID() getMeshNodeID() exit status 0xc0000142: \" time=\"2025-04-30T09:29:54-07:00\" level=error msg=\"Checkrunner RunChecks exit status 0xc0000142: \" time=\"2025-04-30T09:30:46-07:00\" level=error msg=\"Checkrunner RunChecks exit status 0xc0000142: \" time=\"2025-04-30T09:35:07-07:00\" level=info msg=\"Agent updating from 2.9.0 to 2.9.1\" This is a problem with the non-interactive heap stack filling up. The default value is 768KB, and needs to be updated to 4MB. Microsoft KB","title":"Server 2016/2019 agent not updating"},{"location":"unsupported_guidelines/","text":"Unsupported Guidelines \u00b6 General Information \u00b6 Tactical RMM is designed to be secure by default. You CAN expose it to the internet, and start deploying agents. You CAN not expose it to the internet, and start deploying agents. Period \u00b6 Info BIG PERIOD **.** <--- See, it's really really big \ud83d\ude42 That being said... \u00b6 There are those that wish to add layers to their security onion. For the benefit of others following in their footsteps, we have added here for your convenience additional information on a range of subjects and technologies that have been graciously donated to us by the community at large. Please be aware that those providing help and assistance in the Discord #support channel will generally assume that you are not one of these wizards of networking magic. Should you employ any one or several of these unsupported technologies: Proxies (TRMM ships with a production ready Nginx reverse proxy) GeoIP filters fail2ban filters IDSs IPSs SDNs Did anything other than follow the installation instructions exactly Any / all other magical ABC thru XYZ technologies Please let us know BEFORE we start troubleshooting and looking for software bugs that you are... in fact... a \ud83e\uddd9... and using something non-standard. \ud83d\ude09 These are \"unsupported\" because then we are troubleshooting your environment, not Tactical RMM. You need to have knowledge about how things work if you're going to stray from the easy path of the standard install. Help us maximize keeping developer time and resources focused on new releases... not supporting goosechases. Thank you, and #KeepDeploying","title":"Unsupported Guidelines"},{"location":"unsupported_guidelines/#unsupported-guidelines","text":"","title":"Unsupported Guidelines"},{"location":"unsupported_guidelines/#general-information","text":"Tactical RMM is designed to be secure by default. You CAN expose it to the internet, and start deploying agents. You CAN not expose it to the internet, and start deploying agents.","title":"General Information"},{"location":"unsupported_guidelines/#period","text":"Info BIG PERIOD **.** <--- See, it's really really big \ud83d\ude42","title":"Period"},{"location":"unsupported_guidelines/#that-being-said","text":"There are those that wish to add layers to their security onion. For the benefit of others following in their footsteps, we have added here for your convenience additional information on a range of subjects and technologies that have been graciously donated to us by the community at large. Please be aware that those providing help and assistance in the Discord #support channel will generally assume that you are not one of these wizards of networking magic. Should you employ any one or several of these unsupported technologies: Proxies (TRMM ships with a production ready Nginx reverse proxy) GeoIP filters fail2ban filters IDSs IPSs SDNs Did anything other than follow the installation instructions exactly Any / all other magical ABC thru XYZ technologies Please let us know BEFORE we start troubleshooting and looking for software bugs that you are... in fact... a \ud83e\uddd9... and using something non-standard. \ud83d\ude09 These are \"unsupported\" because then we are troubleshooting your environment, not Tactical RMM. You need to have knowledge about how things work if you're going to stray from the easy path of the standard install. Help us maximize keeping developer time and resources focused on new releases... not supporting goosechases. Thank you, and #KeepDeploying","title":"That being said..."},{"location":"unsupported_platforms/","text":"Unsupported Install Platforms \u00b6 LXC Installs \u00b6 Read source Tactical RMM install on LXC: redis not starting. Symptoms \u00b6 Agent exe install shows Server error (503) pop-up during the installation process. Running the troubleshoot_server.sh reports redis-server service isn't running (Tactical wont work without this) . systemctl start redis reports a problem: \"Job for redis-server.service failed because the control process exited with error code. See \"systemctl status redis-server.service\" and \"journalctl -xe\" for details.\" Checking the systemctl: ` systemctl status redis-server.service ` Produces the following: \"Job for redis-server.service failed because the control process exited with error code. See \"systemctl status redis-server.service\" and \"journalctl -xe\" for details. root@rmm:/home/tactical# systemctl status redis-server.service \u25cf redis-server.service - Advanced key-value store Loaded: loaded (/lib/systemd/system/redis-server.service; enabled; vendor preset: enabled) Active: failed (Result: exit-code) since Fri 2022-04-01 21:35:05 UTC; 1min 26s ago Docs: http://redis.io/documentation, man:redis-server(1) Process: 14975 ExecStart=/usr/bin/redis-server /etc/redis/redis.conf --supervised systemd --daemonize no (code=exited, status=2> Main PID: 14975 (code=exited, status=226/NAMESPACE) Apr 01 21:35:05 rmm systemd[1]: redis-server.service: Main process exited, code=exited, status=226/NAMESPACE Apr 01 21:35:05 rmm systemd[1]: redis-server.service: Failed with result 'exit-code'. Apr 01 21:35:05 rmm systemd[1]: Failed to start Advanced key-value store. Apr 01 21:35:05 rmm systemd[1]: redis-server.service: Scheduled restart job, restart counter is at 5. Apr 01 21:35:05 rmm systemd[1]: Stopped Advanced key-value store. Apr 01 21:35:05 rmm systemd[1]: redis-server.service: Start request repeated too quickly. Apr 01 21:35:05 rmm systemd[1]: redis-server.service: Failed with result 'exit-code'. Apr 01 21:35:05 rmm systemd[1]: Failed to start Advanced key-value store. lines 1-16/16 (END)\" The Fix \u00b6 (https://stackoverflow.com/questions/49670211/failed-to-start-advanced-key-value-store-redis-server-service-control-process-e) Remove the server that comes with Tactical RMM: apt-get --purge redis-server Delete the /var/log/redis directory, then: apt-get install redis-server Then installation would look like this: \"Reading package lists... Done Building dependency tree... Done Reading state information... Done The following NEW packages will be installed: redis-server 0 upgraded, 1 newly installed, 0 to remove and 0 not upgraded. Need to get 0 B/98.2 kB of archives. After this operation, 196 kB of additional disk space will be used. Selecting previously unselected package redis-server. (Reading database ... 36187 files and directories currently installed.) Preparing to unpack .../redis-server_5%3a6.0.16-1+deb11u2_amd64.deb ... Unpacking redis-server (5:6.0.16-1+deb11u2) ... Setting up redis-server (5:6.0.16-1+deb11u2) ... Created symlink /etc/systemd/system/redis.service \u2192 /lib/systemd/system/redis-server.service. Created symlink /etc/systemd/system/multi-user.target.wants/redis-server.service \u2192 /lib/systemd/system/redis-server.service. Job for redis-server.service failed because the control process exited with error code. See \"systemctl status redis-server.service\" and \"journalctl -xe\" for details. Processing triggers for man-db (2.9.4-2) ...\" Running the redis-server would shed more light on the issue: /usr/bin/redis-server /etc/redis/redis.conf *** FATAL CONFIG FILE ERROR (Redis 6.0.16) *** Reading the configuration file, at line 260 >>> 'logfile /var/log/redis/redis-server.log' Can't open the log file: No such file or directory' Apparently, /var/log/redis has to be created manually: mkdir /var/log/redis chown -R redis:redis /var/log/redis chmod -R u+rwX,g+rwX,u+rx /var/log/redis ' Run redis-server: su -s /bin/bash -c '/usr/bin/redis-server /etc/redis/redis.conf' redis Confirm with: ps ax | grep redis All done! Thanks [FWG]SSOO","title":"Installing on other platforms"},{"location":"unsupported_platforms/#unsupported-install-platforms","text":"","title":"Unsupported Install Platforms"},{"location":"unsupported_platforms/#lxc-installs","text":"Read source Tactical RMM install on LXC: redis not starting.","title":"LXC Installs"},{"location":"unsupported_platforms/#symptoms","text":"Agent exe install shows Server error (503) pop-up during the installation process. Running the troubleshoot_server.sh reports redis-server service isn't running (Tactical wont work without this) . systemctl start redis reports a problem: \"Job for redis-server.service failed because the control process exited with error code. See \"systemctl status redis-server.service\" and \"journalctl -xe\" for details.\" Checking the systemctl: ` systemctl status redis-server.service ` Produces the following: \"Job for redis-server.service failed because the control process exited with error code. See \"systemctl status redis-server.service\" and \"journalctl -xe\" for details. root@rmm:/home/tactical# systemctl status redis-server.service \u25cf redis-server.service - Advanced key-value store Loaded: loaded (/lib/systemd/system/redis-server.service; enabled; vendor preset: enabled) Active: failed (Result: exit-code) since Fri 2022-04-01 21:35:05 UTC; 1min 26s ago Docs: http://redis.io/documentation, man:redis-server(1) Process: 14975 ExecStart=/usr/bin/redis-server /etc/redis/redis.conf --supervised systemd --daemonize no (code=exited, status=2> Main PID: 14975 (code=exited, status=226/NAMESPACE) Apr 01 21:35:05 rmm systemd[1]: redis-server.service: Main process exited, code=exited, status=226/NAMESPACE Apr 01 21:35:05 rmm systemd[1]: redis-server.service: Failed with result 'exit-code'. Apr 01 21:35:05 rmm systemd[1]: Failed to start Advanced key-value store. Apr 01 21:35:05 rmm systemd[1]: redis-server.service: Scheduled restart job, restart counter is at 5. Apr 01 21:35:05 rmm systemd[1]: Stopped Advanced key-value store. Apr 01 21:35:05 rmm systemd[1]: redis-server.service: Start request repeated too quickly. Apr 01 21:35:05 rmm systemd[1]: redis-server.service: Failed with result 'exit-code'. Apr 01 21:35:05 rmm systemd[1]: Failed to start Advanced key-value store. lines 1-16/16 (END)\"","title":"Symptoms"},{"location":"unsupported_platforms/#the-fix","text":"(https://stackoverflow.com/questions/49670211/failed-to-start-advanced-key-value-store-redis-server-service-control-process-e) Remove the server that comes with Tactical RMM: apt-get --purge redis-server Delete the /var/log/redis directory, then: apt-get install redis-server Then installation would look like this: \"Reading package lists... Done Building dependency tree... Done Reading state information... Done The following NEW packages will be installed: redis-server 0 upgraded, 1 newly installed, 0 to remove and 0 not upgraded. Need to get 0 B/98.2 kB of archives. After this operation, 196 kB of additional disk space will be used. Selecting previously unselected package redis-server. (Reading database ... 36187 files and directories currently installed.) Preparing to unpack .../redis-server_5%3a6.0.16-1+deb11u2_amd64.deb ... Unpacking redis-server (5:6.0.16-1+deb11u2) ... Setting up redis-server (5:6.0.16-1+deb11u2) ... Created symlink /etc/systemd/system/redis.service \u2192 /lib/systemd/system/redis-server.service. Created symlink /etc/systemd/system/multi-user.target.wants/redis-server.service \u2192 /lib/systemd/system/redis-server.service. Job for redis-server.service failed because the control process exited with error code. See \"systemctl status redis-server.service\" and \"journalctl -xe\" for details. Processing triggers for man-db (2.9.4-2) ...\" Running the redis-server would shed more light on the issue: /usr/bin/redis-server /etc/redis/redis.conf *** FATAL CONFIG FILE ERROR (Redis 6.0.16) *** Reading the configuration file, at line 260 >>> 'logfile /var/log/redis/redis-server.log' Can't open the log file: No such file or directory' Apparently, /var/log/redis has to be created manually: mkdir /var/log/redis chown -R redis:redis /var/log/redis chmod -R u+rwX,g+rwX,u+rx /var/log/redis ' Run redis-server: su -s /bin/bash -c '/usr/bin/redis-server /etc/redis/redis.conf' redis Confirm with: ps ax | grep redis All done! Thanks [FWG]SSOO","title":"The Fix"},{"location":"unsupported_proxies/","text":"Unsupported Proxies \u00b6 Note Using Proxies/reverse proxies with Tactical RMM is not a supported configuration, the information below is provided here for your reference. Although these aren't officially supported configurations, we generally will help point you in the right direction. Please use the Discord #unsupported channel to discuss issues related to these complex installations. General Notes on Proxies and Tactical RMM \u00b6 Port 443 \u00b6 Make sure websockets option is enabled. All 3 URL's will need to be configured: rmm , api , mesh For mesh review TLS Offloading . Cloudflare Proxy and Cloudflare Tunnel \u00b6 Youtube Video Showing How Note Between August 2023 and March 2024, MeshCentral would not work properly through CloudFlare proxy/tunnels. Symptoms were Clicking on the \"Connect\" button under \"Desktop\" or \"Terminal\" results in \"Disconnected\" approximately 9/10 times. Something changed on CloudFlare's end. You can still track the GitHub issue about it here . As of 23/03/2024 CloudFlare made some kind of change that fixed it without any acknowledgement. While it has started working again, there are no guarantees that this will continue to work. Use at your own risk. First, just complete a TRMM install like normal- you don't need to put the API, RMM, or Mesh domains into Cloudflare however. You must still follow the TXT record to prove that it's your domain. Once your TRMM install is completed, navigate to CloudFlare Tunnels and create a new Tunnel. Give it any name, Personally, I chose the name TRMM. Now, follow the instructions to install the connector on your distro of choice. Adding the Entries to Cloudflare \u00b6 Now, we need to begin adding the domains. For API, for the subdomain enter the subdomain you chose earlier. In my case api.mydomain Leave \"Path\" empty. For Service, choose HTTPS then in the URL put your server's LOCAL ip and then port 443. Scroll down and extend Additional Application Settings. From here, extend TLS and set Origin Server Name to the subdomain + domain that you're using. Repeat this step for RMM. Mesh is slightly different. For the subdomain, enter the subdomain you chose earlier. In my case mesh.mydomain, still being sure to leave Path empty. For service, pick Type HTTP, and for URL put your server's LOCAL ip then:4430. Extend Additional Application Settings and then HTTP settings and set the HTTP Host Header to the subdomain + domain that you're using. api.{domain} https | TRMM server IP | 443 Advanced: Origin Server Name | api.{domain} mesh.{domain} http | TRMM server IP | 4430 Advanced: HTTP Host Header | mesh.{domain} rmm.{domain} https | TRMM server IP | 443 Advanced: Origin Server Name | rmm.{domain} Now, Mesh will check the external cert when it boots up in order to verify the domain. This will fail as TRMM on setup adds a 127.0.1.1 entry to the /etc/hosts file. To fix this, SSH into your TRMM server and run the following command: nano /etc/hosts On the second line of your hosts file, you should see all the entries listed. 127 .0.1.1 trmm.yourdomain trmm api.yourdomain rmm.yourdomain mesh.yourdomain You need to remove the mesh.yourdomain entry at the end. Once you've done this, you're ready to go. All sites should be accessible and you should be able to add agents and connect/work with them. Caddy 2 \u00b6 This section will cover using Caddy as a reverse proxy in front of TacticalRMM. The below example uses AWS Route53, ports 4443/8080, and assumes you are using Docker. In your Caddyfile, create a wild card route with 3 handlers as shown below. # Caddyfile { email fake@amidaware.com acme_dns route53 } # Global options *.amidaware.com { tls { dns route53 { max_retries 10 access_key_id \"AKIAxxxxxxx\" secret_access_key \"4CXXXXXXXXXXXXXXXXX\" region \"us-east-1\" } } # tls @rmm host rmm.amidaware.com handle @rmm { reverse_proxy rmm.amidaware.com:4443 { transport http { tls_insecure_skip_verify } } } # rmm @api host api.amidaware.com handle @api { reverse_proxy api.amidaware.com:4443 { transport http { tls_insecure_skip_verify } } } # api @mesh host mesh.amidaware.com handle @mesh { reverse_proxy https://mesh.amidaware.com:4443 { transport http { tls_insecure_skip_verify } } } # mesh } # *.amidaware.com In your TacticalRMM .env file, change TRMM_HTTP_PORT and TRMM_HTTPS_PORT so that it matches the port you selected in your Caddyfile. In this example it's 4443 and 8080. Also change the MESH_PERSISTENT_CONFIG to 1 so t> TRMM_HTTP_PORT = 8080 TRMM_HTTPS_PORT = 4443 Update your mesh config certUrl option with your domain Url as shown below. \"domains\": { \"\": { .... \"certUrl\": \"https://rmm.amidaware.com\", \"agentConfig\": [ \"webSocketMaskOverride=0\" ] } }, Restart your Caddy containers docker compose restart Locate and make a note of your Caddy certificate files. In this example it was created in: /mydockercontainers/caddy_data/caddy/certificates/acme-v02.api.letsencrypt.org-directory/wildcard_.amidaware.com We need to update TacticalRMM's .env file with the Caddy certificates. Create a script named renew-cert.sh and change CERT_CRT and CERT_KEY to match the location in the previous step. # renew-cert.sh #!/bin/bash CERT_CRT = /mydockercontainers/caddy/caddy_data/caddy/certificates/acme-v02.api.letsencrypt.org-directory/wildcard_.amidaware.com/wildcard_.amidaware.com.crt CERT_KEY = /mydockercontainers/caddy/caddy_data/caddy/certificates/acme-v02.api.letsencrypt.org-directory/wildcard_.amidaware.com/wildcard_.amidaware.com.key echo \"CERT_PUB_KEY= $( sudo base64 -w 0 ${ CERT_CRT } ) \" >> .env echo \"CERT_PRIV_KEY= $( sudo base64 -w 0 ${ CERT_KEY } ) \" >> .env echo \"Restarting TacticalRMM containers please wait ...\" docker compose down docker compose up -d --remove-orphans echo \"Make sure to remove the old cert lines in .env file.\" Run the script manually when needed or add to cron. chmod +x renew-cert.sh ./renew-cert.sh That's all folks. Caddy should be reverse proxying all traffic to TacticalRMM correctly. Caddy Std Install \u00b6 This is for putting Caddy as a reverse proxy in front of a standard installation of Tactical RMM. It will leave the nginx reverse proxy in place and have double proxies as a result. Caddy Config { auto_https off http_port 80 https_port 443 } #snips (cert) { tls /path/to/your/fullchain.cer /path/to/your/domain.key } #rmm rmm.example.com { import cert encode gzip reverse_proxy YOUR_RMM_IP:443 { transport http { tls_insecure_skip_verify } } } #api api.example.com { import cert encode gzip reverse_proxy YOUR_RMM_IP:443 { transport http { tls_insecure_skip_verify } } } #mesh mesh.example.com { import cert encode gzip reverse_proxy https://mesh.example.com:443 { transport http { tls_insecure_skip_verify } } } For the meshcentral config: { \"settings\": { .... \"tlsOffload\": \"YOUR_CADDY_IP\", .... }, \"domains\": { \"\": { .... \"certUrl\": \"https://YOUR_CADDY_IP:443\", \"agentConfig\": [ \"webSocketMaskOverride=0\" ], .... } } } Traefikv2 \u00b6 Offsite Resource: https://gitlab.com/NiceGuyIT/tactical-goodies/-/tree/main/traefik This section will assume that by default Traefik will reverse proxy everything on port 443. Here is a basic Traefik config with docker-compose. Note, the file.directory and file.watch are important: version: \"3.7\" services: traefik: container_name: traefik24 image: traefik:v2.4 restart: unless-stopped command: - --entryPoints.http.address = :80 - --entryPoints.https.address = :443 - --providers.docker = true - --providers.docker.endpoint = unix:///var/run/docker.sock - --providers.docker.defaultrule = HostHeader ( ` {{ index .Labels \"com.docker.compose.service\" }} . $DOMAINNAME ` ) ## This is important, to load the config for RMM and Mesh - --providers.file.directory = rules # Load dynamic configuration from one or more .toml or .yml files in a directory. - --providers.file.watch = true # Only works on top level files in the rules folder #### - --certificatesresolvers.dns-cloudflare.acme.dnschallenge = true - --certificatesResolvers.dns-cloudflare.acme.email = $CLOUDFLARE_EMAIL - --certificatesResolvers.dns-cloudflare.acme.storage = /acme.json - --certificatesResolvers.dns-cloudflare.acme.dnsChallenge.provider = cloudflare - --certificatesResolvers.dns-cloudflare.acme.dnsChallenge.resolvers = 1 .1.1.1:53,1.0.0.1:53 ports: - target: 80 published: 80 protocol: tcp mode: host - target: 443 published: 443 protocol: tcp mode: host volumes: ##The rules that we will load## - $USERDIR /docker/traefik2/rules:/rules ## - /var/run/docker.sock:/var/run/docker.sock:ro - $USERDIR /docker/traefik2/acme/acme.json:/acme.json - $USERDIR /docker/traefik2/traefik.log:/traefik.log environment: - CF_API_EMAIL = $CLOUDFLARE_EMAIL - CF_API_KEY = $CLOUDFLARE_API_KEY labels: - \"traefik.enable=true\" # HTTP-to-HTTPS Redirect - \"traefik.http.routers.http-catchall.entrypoints=http\" - \"traefik.http.routers.http-catchall.rule=HostRegexp(`{host:.+}`)\" - \"traefik.http.routers.http-catchall.middlewares=redirect-to-https\" - \"traefik.http.middlewares.redirect-to-https.redirectscheme.scheme=https\" # HTTP Routers - \"traefik.http.routers.traefik-rtr.entrypoints=https\" - \"traefik.http.routers.traefik-rtr.rule=HostHeader(`traefik. $DOMAINNAME `)\" - \"traefik.http.routers.traefik-rtr.tls=true\" - \"traefik.http.routers.traefik-rtr.tls.domains[0].main= $DOMAINNAME \" - \"traefik.http.routers.traefik-rtr.tls.domains[0].sans=*. $DOMAINNAME \" Before proceeding, we need to change the port 443 to 4443 and 80 to 8080 because the port 443 and 80 are already used by Traefik. Here is a snippet of the only thing you should modify into docker-compose file of the installation: # container for tactical reverse proxy tactical-nginx: container_name: trmm-nginx image: ${ IMAGE_REPO } tactical-nginx: ${ VERSION } restart: always environment: APP_HOST: ${ APP_HOST } API_HOST: ${ API_HOST } MESH_HOST: ${ MESH_HOST } CERT_PUB_KEY: ${ CERT_PUB_KEY } CERT_PRIV_KEY: ${ CERT_PRIV_KEY } networks: proxy: ipv4_address: 172 .20.0.20 ports: - \"8080:8080\" ## port 8080 instead of 80 - \"4443:4443\" ## port 4443 instead of 443 Once saved, make sure you run the docker-compose or installation script at least once, so all the directory structures are created. Once you have your certificate (acme.json) generated by traefikv2 we will be able to extract it for rmm. Copy the acme.json create by traefik into the root of your rmm directory (In my case it's $USERDIR/docker/rmm) which you should have already defined. After that we can run this docker to extract the certificates for us: version: \"3.7\" services: ##Copy the acme.json of Traefik2 at volumes: (userdir/docker/rmm in this case) traefik-certs-dumper: image: ldez/traefik-certs-dumper:v2.7.4 entrypoint: sh -c ' apk add jq ; while ! [ -e /data/acme.json ] || ! [ `jq \".[] | .Certificates | length\" /data/acme.json` != 0 ]; do sleep 1 ; done && traefik-certs-dumper file --version v2 --watch --source /data/acme.json --dest data/certs' volumes: - $USERDIR /docker/rmm:/data Once completed, you should have 1 new folder in your rmm directory $USERDIR/docker/rmm/ certs in this example. As the installation instruction, we will pass those to the .env: echo \"CERT_PUB_KEY= $( sudo base64 -w 0 $USERDIR /docker/rmm/certs/certs/**yourdomain.com.crt** ) \" >> .env echo \"CERT_PRIV_KEY= $( sudo base64 -w 0 $USERDIR /docker/rmm/certs/private/**yourdomain.com.key** ) \" >> .env Next we can create 3 rules to tell Traefik to correctly route the https and agent. For that we will create 2 rules into Traefik directory as per it's configuration. folder/traefik/rules create: nano app-mesh.toml and inside it we add: [ http.routers ] [ http.routers.mesh-rtr ] entryPoints = [ \"https\" ] rule = \"Host(`mesh.**yourdomain.com**`)\" service = \"mesh-svc\" ##middleware with 2FA [ http.services ] [ http.services.mesh-svc ] [ http.services.mesh-svc.loadBalancer ] passHostHeader = true [[ http.services.mesh-svc.loadBalancer.servers ]] url = \"https://**xxx.xxx.xxx.xxx**:4443\" # or whatever your external host's IP is create: nano app-meshagent.toml and inside it we add: [ http.routers ] [ http.routers.mesh-rtr1 ] entryPoints = [ \"https\" ] rule = \"\"\"Host(`mesh.**yourdomain.com**`) && PathPrefix( `/agent.ashx`, `/meshrelay.ashx`, ) && Headers(`X-Forwarded-Proto`, `wss`) \"\"\" ##Don't add middle where, the agent wont work. [ http.services ] [ http.services.mesh-svc1 ] [ http.services.mesh-svc.loadBalancer ] passHostHeader = true [[ http.services.mesh-svc1.loadBalancer.servers ]] url = \"https://**xxx.xxx.xxx.xxx**:4443\" # or whatever your external host's IP is create: nano app-rmm.toml and inside it we add: [ http.routers ] [ http.routers.rmm-rtr ] entryPoints = [ \"https\" ] rule = \"Host(`rmm.**yourdomain.com**`)\" service = \"rmm-svc\" ##middleware with 2FA [ http.services ] [ http.services.rmm-svc ] [ http.services.rmm-svc.loadBalancer ] passHostHeader = true [[ http.services.rmm-svc.loadBalancer.servers ]] url = \"https://xxx.xxx.xxx.xxx:4443\" # or whatever your external host's IP:port is That's it, you can now restart Tactical. rmm and mesh.yourdomain.com should work, same for the agent. Please note that if you have a middleware with 2FA you can still use it with the inside mesh.toml, but do not add it with the agent. HAProxy \u00b6 Check / change the MeshCentral config.json, some of the values may be set already. CertUrl must be changed to point to the HAProxy server if not using the same certs for both HAProxy and TRMM. MeshCentral Adjustment \u00b6 Credit to @bradhawkins Edit MeshCentral config: nano /meshcentral/meshcentral-data/config.json Insert this (modify HAProxyIP to your network): { \"settings\": { \"Port\": 4443, \"AliasPort\": 443, \"RedirPort\": 8080, \"TlsOffload\": \"127.0.0.1\", }, \"domains\": { \"\": { \"CertUrl\": \"https://HAProxyIP:443/\", } } } Restart MeshCentral: systemctl meshcentral restart NGINX ADJUSTMENTS \u00b6 You will need to edit the nginx.conf file in the http section on the trmm server to recognize the X-Forwarded-For Header that will be sent from haproxy. Edit file /etc/nginx/nginx.conf Add the lines from 'real_ip' module inside http tag: set_real_ip_from 192.168.0.200; #IP Address of your haproxy server real_ip_header X-Forwarded-For; Restart nginx: systemctl restart nginx.service HAProxy Config \u00b6 The order of use_backend is important, and Tactical-Mesh-WebSocket_ipvANY must be before Tactical-Mesh_ipvANY . This assumes a standard VM install or Docker instance, unaltered . If you've altered exposed ports on your VM or Docker instance, those will need to be adjusted in the configuration. The values of timeout connect , timeout server , and timeout tunnel have been configured to maintain a stable agent connection, however you may need to adjust these values to suit your environment: frontend http-to-https-shared bind 0.0.0.0:80 mode http log global option socket-stats option http-server-close option dontlognull option forwardfor acl https ssl_fc http-request set-header X-Forwarded-Proto http if !https http-request set-header X-Forwarded-Proto https if https http-request add-header X-Real-IP %[src] timeout client 30000 acl rmm var(txn.txnhost) -m str -i rmm.example.com acl api var(txn.txnhost) -m str -i api.example.com acl mesh var(txn.txnhost) -m str -i mesh.example.com http-request set-var(txn.txnhost) hdr(host) http-request redirect scheme https if rmm http-request redirect scheme https if api http-request redirect scheme https if mesh frontend https-shared bind 0.0.0.0:443 ssl crt-list /var/etc/haproxy/HTTPS.crt_list #ADJUST THIS TO YOUR OWN SSL CERTIFICATES mode http log global option socket-stats option dontlognull option http-server-close option forwardfor acl https ssl_fc http-request set-header X-Forwarded-Proto http if !https http-request set-header X-Forwarded-Proto https if https timeout client 30000 acl aclcrt_https_shared var(txn.txnhost) -m reg -i ^([^\\.]*)\\.example\\.com(:([0-9]){1,5})?$ acl rmm var(txn.txnhost) -m str -i rmm.example.com acl nats-websocket var(txn.txnpath) -m sub -i /natsws acl api var(txn.txnhost) -m str -i api.example.com acl is_websocket hdr(Upgrade) -i WebSocket acl mesh var(txn.txnhost) -m str -i mesh.example.com acl api-ws var(txn.txnhost) -m sub -i api.example.com http-request set-var(txn.txnhost) hdr(host) http-request set-var(txn.txnpath) path use_backend rmm.example.com_ipvANY if rmm use_backend rmm.example.com-websocket_ipvANY if nats-websocket api-ws use_backend rmm.example.com_ipvANY if api use_backend mesh.example.com-websocket_ipvANY if is_websocket mesh use_backend mesh.example.com_ipvANY if mesh backend rmm.example.com_ipvANY mode http log global timeout connect 30000 timeout server 30000 retries 3 http-request add-header X-Forwarded-Host %[req.hdr(Host)] http-request add-header X-Forwarded-Proto https server rmm x.x.x.x:443 ssl verify none backend rmm.example.com-websocket_ipvANY mode http log global timeout connect 30000 timeout server 30000 retries 3 timeout tunnel 3600000 http-request add-header X-Forwarded-Host %[req.hdr(Host)] http-request add-header X-Forwarded-Proto https server rmm-websocket x.x.x.x:443 ssl verify none backend mesh.example.com-websocket_ipvANY mode http log global timeout connect 3000 timeout server 3000 retries 3 timeout tunnel 3600000 http-request add-header X-Forwarded-Host %[req.hdr(Host)] http-request add-header X-Forwarded-Proto https server mesh-websocket x.x.x.x:443 ssl verify none backend mesh.example.com_ipvANY mode http log global timeout connect 15000 timeout server 15000 retries 3 timeout tunnel 15000 http-request add-header X-Forwarded-Host %[req.hdr(Host)] http-request add-header X-Forwarded-Proto https server mesh x.x.x.x:443 ssl verify none HAProxy How-to for pfSense \u00b6 https://github.com/ninjamonkey198206/T-RMM-PFSense-HAProxy-config HAProxy How-to for Baremetal \u00b6 https://github.com/ninjamonkey198206/T-RMM-Baremetal-HAProxy HAProxy in TCP Mode, pfSense \u00b6 In this scenario, you install TRMM as per documentation. Meaning your certificates are generated and managed on your TRMM server, just use the install.sh and follow docs and on-screen instructions. HAProxy here will just pass the traffic to the NGINX on TRMM server. No certificate management. Only use this method if you have more than 1 server that need to use port 443 on the same public IP. Assumptions \u00b6 These are some assumptions made to make this guide, short, easy to follow and to the point. Of course you can adapt it to your environment and/or current configuration. You have a pfSense firewall. You have HAProxy installed. You don't have any http frontends on your HAProxy. You have firewall rule to allow traffic from your WAN to HAProxy 443 port. You have set Max Connections on Settings to a value MORE than the agents you plan to connect. Your subdomains are: api , mesh , rmm You can resolve (rmm|api|mesh).example.com to your local TRMM server when in your local network. You can resolve (rmm|api|mesh).example.com to your public IP when you are outside of your local network. Global Settings \u00b6 Config file format, for reference: global maxconn 50000 stats socket /tmp/haproxy.socket level admin expose-fd listeners gid 80 nbproc 1 nbthread 1 hard-stop-after 15m chroot /tmp/haproxy_chroot daemon tune.ssl.default-dh-param 2048 server-state-file /tmp/haproxy_server_state Values you will have to replace with your own \u00b6 10.10.10.100 - Change with your TRMM local IP. example.com - Change with your domain. Backend \u00b6 Navigate to Services -> HAProxy -> Backend Click \u2935\ufe0fAdd Backend server pool \u00b6 Name: trmm-backend On Server list, Click \u2935\ufe0f Name: trmm-server Forwardto: Address+Port Address: 10.10.10.100 (Reminder: change this) Port: 443 Max conn: 10000 (Or 0 for unlimited) Timeout / retry settings \u00b6 Connection timeout: 300000 (Note: it has more 0s than the default) Server timeout: 300000 (Note: it has more 0s than the default) Retries: 3 Health checking \u00b6 Health check method: SSL Keep this to none while installing or updating certificates. There might be problems if it's set to SSL or basic while doing so. Advanced settings \u00b6 Please read the warning there, and the note at the bottom. This optional and it's use is to show the real public IP of the agent. Check `Use Client-IP to connect to backend servers. Some remote agents would not let me do RDP without this option. Play with it and see what works for you. It works well for me, there are cases that it might not work on all environments. For those who like the config files \u00b6 backend trmm-backend_ipv4 mode tcp log global timeout connect 300000 timeout server 300000 retries 3 source ipv4@ usesrc clientip option ssl-hello-chk server trmm-server 10.10.10.100:443 check inter 1000 maxconn 10000 Frontend \u00b6 Navigate to Services -> HAProxy -> Frontend Click \u2935\ufe0fAdd Edit HAProxy Frontend \u00b6 Name: FrontendTCP Status: Active On External address, click \u2935\ufe0f Listen address: WAN address (IPv4) Port: 443 Max connections: 10000 (Or 0 or unlimited`) Type: ssl/https (TCP mode) Default backend, access control lists and actions \u00b6 On Access Control lists, Click \u2935\ufe0f Name: tactical Expression Server Name Indication TLS extension regex: value: (rmm|api|mesh)\\.example\\.com On Actions, Click \u2935\ufe0f Action: Use Backend Condition acl names: tactical backend: trmm-backend Advanced settings \u00b6 Client timeout: 300000 (Note: it has more 0s than the default) Use \"httpclose\" option: http-server-close Click \ud83d\udcbeSave Click \u2714\ufe0fApply Changes For those who like the config files \u00b6 frontend Frontend-SNI bind YOURWANIP:443 name YOURWANIP:443 mode tcp log global maxconn 10000 timeout client 300000 tcp-request inspect-delay 5s acl tactical req.ssl_sni -m reg -i (rmm|mesh|api)\\.yourdomain\\.com tcp-request content accept if { req.ssl_hello_type 1 } use_backend tactical_ipv4 if trmm-backend HAProxy in TCP Mode, OPNsense \u00b6 In this scenario, you install TRMM as per documentation. Meaning your certificates are generated and managed on your TRMM server, just use the install.sh and follow docs and on-screen instructions. HAProxy here will just pass the traffic to the NGINX on TRMM server. No certificate management. Only use this method if you have more than 1 server that need to use port 443 on the same public IP. Assumptions \u00b6 These are some assumptions made to make this guide, short, easy to follow and to the point. Of course you can adapt it to your environment and/or current configuration. You have a OPNsense firewall. You have HAProxy installed. You don't have any http frontends on your HAProxy. You have port forward to forward traffic from your WAN 443 port to OPNsense 443 port. You have firewall rule to allow traffic from your WAN to HAProxy 443 port. Your subdomains are: api , mesh , rmm You can resolve (rmm|api|mesh).example.com to your local TRMM server when in your local network. You can resolve (rmm|api|mesh).example.com to your public IP when you are outside of your local network. If you notice agents are continue to timeout after 60second (default ping time of MeshAgent). Check Settings > HAProxy > Config Export . Some backend or frontend still has a lower than 60s timeout. Increase it for example to 120s . Settings \u00b6 Navigate to Services -> HAProxy -> Settings Service \u00b6 Click \ud83d\udd3d next to Settings tab. Click Service Check Enable HAProxy Click Apply Check that HAProxy started (You should see a green \u25b6\ufe0f on the top right corner) Global Parameters \u00b6 Click \ud83d\udd3d next to Settings tab. Click Global Parameters Maximum connections: Set this to a number of at least 3 times your agents. Click Apply Default Parameters \u00b6 Click \ud83d\udd3d next to Settings tab. Click Default Parameters Maximum connections (Public Services): Set this to a number of at least 3 times your agents. Maximum connections (Servers): Set this to a number of at least 3 times your agents. Client Timeout: 120s Connection Timeout: 120s Retries: 3 Click Apply Real Servers \u00b6 Navigate to Services -> HAProxy -> Settings Click \ud83d\udd3d next to Real Servers tab. Click Real Servers Click \u2795 Name: Tactical Type: static FQDN or IP: (Your Tactical RMM VM IP or FQDN) Port: 443 Mode: active SSL: Unchecked SSL SNI: (Empty) Verify SSL Certificate: Unchecked Click Save Click Apply Virtual Services - Backend Pools \u00b6 Navigate to Services -> HAProxy -> Settings Click \ud83d\udd3d next to Virtual Services tab. Click Backend Pools Click \u2795 Name: Tactical Description: Tactical Server Pool Mode: TCP (Layer 4) Health Checking: Unchecked Retries: 3 Click Save Click Apply Rules & Checks \u00b6 Navigate to Services -> HAProxy -> Settings Conditions \u00b6 Click \ud83d\udd3d next to Rules & Checks tab. Click Conditions Click \u2795 Name: Contains SSL Hello Message Condition type: Custom condition (option pass-through) Option pass-through: req.ssl_hello_type 1 Click Save Click \u2795 Name: SNI Tactical Description: SNI Match tactical subdomains Condition Type: SNI TLS extension regex (TCP Request content inspection) SNI Regex: (api|tactical|mesh)\\.yourdomain\\.com Click Save Click Apply Rules \u00b6 Click \ud83d\udd3d next to Rules & Checks tab. Click Rules Click \u2795 Name: Accept Content if Contains SSL Hello Select conditions: Contains SSL Hello Message Execute function: tcp-request content accept Click Save Click \u2795 Name: TCP Inspect Delay Select conditions: Nothing Selected Execute function: tcp-request inspect-delay TCP inspection delay: 5s Click Save Click \u2795 Name: Tactical RMM Select conditions: SNI Tactical Execute function: Use specified Backend Pool Use specified Backend Pool: Tactical Click Save Click Apply Virtual Services - Public Services \u00b6 Navigate to Services -> HAProxy -> Settings Click \ud83d\udd3d next to Virtual Services tab. Click Public Services Click \u2795 Name: Frontend Listen Addresses: 127.0.0.1:443 (Remember, you have to have port forward + allow rule) Type: SSL / HTTPS (TCP Mode) Default Backend Pool: none SSL Offloading: Unchecked Maximum Connections: (Set this to a number of at least 3 times your agents.) Select Rules: Accept Content if Contains SSL Hello TCP Inspect Delay Tactical RMM Click Save Note: Order on Rules matter! Click Apply Apache Proxy \u00b6 HowTo - Proxy on Apache TRMM SERVER \u00b6 Edit file /etc/nginx/sites-available/rmm.conf Add the lines from 'real_ip' module inside server tag: set_real_ip_from 192.168.0.200; #IP Address of your apache proxy real_ip_header X-Forwarded-For; Restart nginx: systemctl restart nginx.service APACHE \u00b6 Enable ssl proxy and rewriteEngine. Set proxy to preserve host. Set upgrade rule to websocket. Set proxypass rules redirecting to rmm location. Apache ssl config example: <VirtualHost *:443> ServerName rmm.blablabla.com.br:443 ServerAlias mesh.blablabla.com.br:443 api.blablabla.com.br:443 SSLEngine on SSLCertificateFile \"C:/Apache24/conf/ssl-rmm.blablabla.com.br/_.blablabla.com.br-chain.pem\" SSLCertificateKeyFile \"C:/Apache24/conf/ssl-rmm.blablabla.com.br/_.blablabla.com.br-key.pem\" SSLProxyEngine on RewriteEngine On ProxyPreserveHost On # When Upgrade:websocket header is present, redirect to ws # Using NC flag (case-insensitive) as some browsers will pass Websocket RewriteCond %{HTTP:Upgrade} =websocket [NC] RewriteRule ^/(.*) wss://192.168.0.212/$1 [P,L] ProxyPass \"/\" \"https://192.168.0..212/\" retry=3 ProxyPassReverse \"/\" \"https://192.168.0.212/\" retry=3 BrowserMatch \"MSIE [2-5]\" \\ nokeepalive ssl-unclean-shutdown \\ downgrade-1.0 force-response-1.0 </VirtualHost> Nginx Proxy Manager (double proxy method) \u00b6 First, get your TRMM server installed with a standard config and working. Then in NPM, declare the hosts with the parameters: api.{domain} https | TRMM server DNS name | 443 ON: Cache Assets | Block Common Exploits | Websockets Support mesh.{domain} https | TRMM server DNS name | 443 ON: Block Common Exploits | Websockets Support Advanced: proxy_set_header Host $host; proxy_set_header CF-Connecting-IP $proxy_add_x_forwarded_for; proxy_set_header X-Forwarded-Host $host:$server_port; proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for; proxy_set_header X-Forwarded-Proto $scheme; rmm.{domain} https | TRMM server DNS name | 443 ON: Cache Assets | Block Common Exploits | Websockets Support Last thing you have to do, is setup the same certs on NPM and TRMM. TRMM cert location: /etc/letsencrypt/live/{yourdomain}/ NPM cert location: SSL Certificates tab Either: Setup SSL certs on NPM (optionally using Cloudflare API). Download and copy certs to TRMM. Then run ./update.sh --force OR: Run standard TRMM cert renew process using certbot. Then copy the files and upload: Certificate Key ( privkey.pem ), Certificate ( cert.pem ), and Intermediate Certificate ( chain.pem ) Nginx Proxy Manager Alt Method \u00b6 Note Tested and working on the following: \u2705 TRMM hosted on Ubuntu 22.04 via Proxmox VM \u2705 Nginx Proxy Manager hosted on Debian 11 via Proxmox CT W/ Docker We'll use \"YOURDOMAIN\" in place of your actual domain name Step 1 - Install and test TRMM with no proxy \u00b6 First and foremost, you need to disable Nginx Proxy Manager. To do this, on your routers firewall settings, forward ports 443 and 80 to the local ip that will be running your TRMM instance. This is only temporary as we want to make sure we can get TRMM installed and running with a STANDARD install FIRST. You will also need to make sure the following subdomains are pointing to your external IP: api.YOURDOMAIN.com rmm.YOURDOMAIN.com mesh.YOURDOMAIN.com Use curl icanhazip.com to pull your external IP if you don't know it. Once you have ports 443 and 80 forwarded correctly, go ahead and run a STANDARD install of TRMM on a FRESH machine. You can find the Install Documentation here . Step 2 - Nginx Proxy Manager Proxy Host Configuration \u00b6 Assuming you installed TRMM properly and all of its features are working correctly, we will now get into setting up Nginx Proxy Manager to work with TRMM. Go ahead and forward ports 443 and 80 back to your Nginx Proxy Manager instance. Below you will find the 3 different Proxy Hosts you need to create on Nginx Proxy Manager. \"API\" Domain \u00b6 Details Tab: Domain Name: --> api.YOURDOMAIN.com Scheme: --> https Forward Hostname / IP: --> The Local IP of your TRMM instance. ie: 192.168.1.155 Forward Port: --> 443 Enabled Options: Cache Assets; Block Common Exploits; Websockets Support Access List: --> Publicly Accessible \"MESH\" Domain \u00b6 Details Tab: Domain Name: --> mesh.YOURDOMAIN.com Scheme: --> http Forward Hostname / IP: --> The Local IP of your TRMM instance. ie: 192.168.1.155 Forward Port: --> 4430 Enabled Options: Block Common Exploits; Websockets Support Access List: --> Publicly Accessible Advanced Tab: Custom Nginx Configuration proxy_set_header Host $host; proxy_set_header CF-Connecting-IP $proxy_add_x_forwarded_for; proxy_set_header X-Forwarded-Host $host:$server_port; proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for; proxy_set_header X-Forwarded-Proto $scheme; \"RMM\" Domain \u00b6 Details Tab: Domain Name: --> rmm.YOURDOMAIN.com Scheme: --> https Forward Hostname / IP: --> The Local IP of your TRMM instance. ie: 192.168.1.155 Forward Port: --> 443 Enabled Options: Cache Assets; Block Common Exploits; Websockets Support Access List: --> Publicly Accessible NPM SSL Configuration \u00b6 In order for TRMM to work properly with NPM, you'll need to create a wildcard or multi-domain SSL Certificate. To do this, on the Nginx Proxy Manager Dashboard, click the SSL Certificates tab. Now in the top right, click \"Add SSL Certificate\". Select \"Let's Encrypt\". Add each of the domains listed above to the \"Domain Names\" field. Make sure you add them 1 at a time and click the dropdown of the domain to add it. Once you've added all 3 domains, enable the \"I agree\" tick and click save. You should now see something like this in your list of SSL Certs: Go ahead and download this certificate by clicking the 3 dots to the right of the cert entry and click \"Download\". I suggest you follow these instructions for adding the new certs to your TRMM instance. You will still need to keep TRMM's certs updated as well. MeshCentral Configuration \u00b6 Now you should have Nginx Proxy Manager completely setup. Lets move on to the MeshCentral Configuration. First, cd to /meshcentral/meshcentral-data Now edit the file named config.json . Make sure your config file looks like the one shown below. { \"settings\" : { \"cert\" : \"mesh.YOURDOMAIN.com\" , .... \"tlsOffload\" : \"Nginx Proxy Manager Local IP\" , \"trustedProxy\" : \"Nginx Proxy Manager Local IP\" , .... }, \"domains\" : { \"\" : { .... \"certUrl\" : \"https://mesh.YOURDOMAIN.com:443/\" , .... } } } If you want to enable logging in case anything goes wrong during this process, follow the instructions here . As of now, everything should be working. If you have any issues, feel free to join the discord . Keep in mind, this is considered an UNSUPPORTED installation. Developers are not obligated to fix any issues you may encounter. Good luck. Synology NAS Reverse Proxy Portal \u00b6 Follow HAProxy And set the \"CertUrl\" to point to the IP address of my NAS that was running the reserve proxy and had the certificates installed. In Synology NAS reverse proxy portal and added websockets to the rmm domains, especially the mesh domain under custom headers, by just clicking the create button and choosing WebSocket:","title":"Unsupported Proxies"},{"location":"unsupported_proxies/#unsupported-proxies","text":"Note Using Proxies/reverse proxies with Tactical RMM is not a supported configuration, the information below is provided here for your reference. Although these aren't officially supported configurations, we generally will help point you in the right direction. Please use the Discord #unsupported channel to discuss issues related to these complex installations.","title":"Unsupported Proxies"},{"location":"unsupported_proxies/#general-notes-on-proxies-and-tactical-rmm","text":"","title":"General Notes on Proxies and Tactical RMM"},{"location":"unsupported_proxies/#port-443","text":"Make sure websockets option is enabled. All 3 URL's will need to be configured: rmm , api , mesh For mesh review TLS Offloading .","title":"Port 443"},{"location":"unsupported_proxies/#cloudflare-proxy-and-cloudflare-tunnel","text":"Youtube Video Showing How Note Between August 2023 and March 2024, MeshCentral would not work properly through CloudFlare proxy/tunnels. Symptoms were Clicking on the \"Connect\" button under \"Desktop\" or \"Terminal\" results in \"Disconnected\" approximately 9/10 times. Something changed on CloudFlare's end. You can still track the GitHub issue about it here . As of 23/03/2024 CloudFlare made some kind of change that fixed it without any acknowledgement. While it has started working again, there are no guarantees that this will continue to work. Use at your own risk. First, just complete a TRMM install like normal- you don't need to put the API, RMM, or Mesh domains into Cloudflare however. You must still follow the TXT record to prove that it's your domain. Once your TRMM install is completed, navigate to CloudFlare Tunnels and create a new Tunnel. Give it any name, Personally, I chose the name TRMM. Now, follow the instructions to install the connector on your distro of choice.","title":"Cloudflare Proxy and Cloudflare Tunnel"},{"location":"unsupported_proxies/#adding-the-entries-to-cloudflare","text":"Now, we need to begin adding the domains. For API, for the subdomain enter the subdomain you chose earlier. In my case api.mydomain Leave \"Path\" empty. For Service, choose HTTPS then in the URL put your server's LOCAL ip and then port 443. Scroll down and extend Additional Application Settings. From here, extend TLS and set Origin Server Name to the subdomain + domain that you're using. Repeat this step for RMM. Mesh is slightly different. For the subdomain, enter the subdomain you chose earlier. In my case mesh.mydomain, still being sure to leave Path empty. For service, pick Type HTTP, and for URL put your server's LOCAL ip then:4430. Extend Additional Application Settings and then HTTP settings and set the HTTP Host Header to the subdomain + domain that you're using. api.{domain} https | TRMM server IP | 443 Advanced: Origin Server Name | api.{domain} mesh.{domain} http | TRMM server IP | 4430 Advanced: HTTP Host Header | mesh.{domain} rmm.{domain} https | TRMM server IP | 443 Advanced: Origin Server Name | rmm.{domain} Now, Mesh will check the external cert when it boots up in order to verify the domain. This will fail as TRMM on setup adds a 127.0.1.1 entry to the /etc/hosts file. To fix this, SSH into your TRMM server and run the following command: nano /etc/hosts On the second line of your hosts file, you should see all the entries listed. 127 .0.1.1 trmm.yourdomain trmm api.yourdomain rmm.yourdomain mesh.yourdomain You need to remove the mesh.yourdomain entry at the end. Once you've done this, you're ready to go. All sites should be accessible and you should be able to add agents and connect/work with them.","title":"Adding the Entries to Cloudflare"},{"location":"unsupported_proxies/#caddy-2","text":"This section will cover using Caddy as a reverse proxy in front of TacticalRMM. The below example uses AWS Route53, ports 4443/8080, and assumes you are using Docker. In your Caddyfile, create a wild card route with 3 handlers as shown below. # Caddyfile { email fake@amidaware.com acme_dns route53 } # Global options *.amidaware.com { tls { dns route53 { max_retries 10 access_key_id \"AKIAxxxxxxx\" secret_access_key \"4CXXXXXXXXXXXXXXXXX\" region \"us-east-1\" } } # tls @rmm host rmm.amidaware.com handle @rmm { reverse_proxy rmm.amidaware.com:4443 { transport http { tls_insecure_skip_verify } } } # rmm @api host api.amidaware.com handle @api { reverse_proxy api.amidaware.com:4443 { transport http { tls_insecure_skip_verify } } } # api @mesh host mesh.amidaware.com handle @mesh { reverse_proxy https://mesh.amidaware.com:4443 { transport http { tls_insecure_skip_verify } } } # mesh } # *.amidaware.com In your TacticalRMM .env file, change TRMM_HTTP_PORT and TRMM_HTTPS_PORT so that it matches the port you selected in your Caddyfile. In this example it's 4443 and 8080. Also change the MESH_PERSISTENT_CONFIG to 1 so t> TRMM_HTTP_PORT = 8080 TRMM_HTTPS_PORT = 4443 Update your mesh config certUrl option with your domain Url as shown below. \"domains\": { \"\": { .... \"certUrl\": \"https://rmm.amidaware.com\", \"agentConfig\": [ \"webSocketMaskOverride=0\" ] } }, Restart your Caddy containers docker compose restart Locate and make a note of your Caddy certificate files. In this example it was created in: /mydockercontainers/caddy_data/caddy/certificates/acme-v02.api.letsencrypt.org-directory/wildcard_.amidaware.com We need to update TacticalRMM's .env file with the Caddy certificates. Create a script named renew-cert.sh and change CERT_CRT and CERT_KEY to match the location in the previous step. # renew-cert.sh #!/bin/bash CERT_CRT = /mydockercontainers/caddy/caddy_data/caddy/certificates/acme-v02.api.letsencrypt.org-directory/wildcard_.amidaware.com/wildcard_.amidaware.com.crt CERT_KEY = /mydockercontainers/caddy/caddy_data/caddy/certificates/acme-v02.api.letsencrypt.org-directory/wildcard_.amidaware.com/wildcard_.amidaware.com.key echo \"CERT_PUB_KEY= $( sudo base64 -w 0 ${ CERT_CRT } ) \" >> .env echo \"CERT_PRIV_KEY= $( sudo base64 -w 0 ${ CERT_KEY } ) \" >> .env echo \"Restarting TacticalRMM containers please wait ...\" docker compose down docker compose up -d --remove-orphans echo \"Make sure to remove the old cert lines in .env file.\" Run the script manually when needed or add to cron. chmod +x renew-cert.sh ./renew-cert.sh That's all folks. Caddy should be reverse proxying all traffic to TacticalRMM correctly.","title":"Caddy 2"},{"location":"unsupported_proxies/#caddy-std-install","text":"This is for putting Caddy as a reverse proxy in front of a standard installation of Tactical RMM. It will leave the nginx reverse proxy in place and have double proxies as a result. Caddy Config { auto_https off http_port 80 https_port 443 } #snips (cert) { tls /path/to/your/fullchain.cer /path/to/your/domain.key } #rmm rmm.example.com { import cert encode gzip reverse_proxy YOUR_RMM_IP:443 { transport http { tls_insecure_skip_verify } } } #api api.example.com { import cert encode gzip reverse_proxy YOUR_RMM_IP:443 { transport http { tls_insecure_skip_verify } } } #mesh mesh.example.com { import cert encode gzip reverse_proxy https://mesh.example.com:443 { transport http { tls_insecure_skip_verify } } } For the meshcentral config: { \"settings\": { .... \"tlsOffload\": \"YOUR_CADDY_IP\", .... }, \"domains\": { \"\": { .... \"certUrl\": \"https://YOUR_CADDY_IP:443\", \"agentConfig\": [ \"webSocketMaskOverride=0\" ], .... } } }","title":"Caddy Std Install"},{"location":"unsupported_proxies/#traefikv2","text":"Offsite Resource: https://gitlab.com/NiceGuyIT/tactical-goodies/-/tree/main/traefik This section will assume that by default Traefik will reverse proxy everything on port 443. Here is a basic Traefik config with docker-compose. Note, the file.directory and file.watch are important: version: \"3.7\" services: traefik: container_name: traefik24 image: traefik:v2.4 restart: unless-stopped command: - --entryPoints.http.address = :80 - --entryPoints.https.address = :443 - --providers.docker = true - --providers.docker.endpoint = unix:///var/run/docker.sock - --providers.docker.defaultrule = HostHeader ( ` {{ index .Labels \"com.docker.compose.service\" }} . $DOMAINNAME ` ) ## This is important, to load the config for RMM and Mesh - --providers.file.directory = rules # Load dynamic configuration from one or more .toml or .yml files in a directory. - --providers.file.watch = true # Only works on top level files in the rules folder #### - --certificatesresolvers.dns-cloudflare.acme.dnschallenge = true - --certificatesResolvers.dns-cloudflare.acme.email = $CLOUDFLARE_EMAIL - --certificatesResolvers.dns-cloudflare.acme.storage = /acme.json - --certificatesResolvers.dns-cloudflare.acme.dnsChallenge.provider = cloudflare - --certificatesResolvers.dns-cloudflare.acme.dnsChallenge.resolvers = 1 .1.1.1:53,1.0.0.1:53 ports: - target: 80 published: 80 protocol: tcp mode: host - target: 443 published: 443 protocol: tcp mode: host volumes: ##The rules that we will load## - $USERDIR /docker/traefik2/rules:/rules ## - /var/run/docker.sock:/var/run/docker.sock:ro - $USERDIR /docker/traefik2/acme/acme.json:/acme.json - $USERDIR /docker/traefik2/traefik.log:/traefik.log environment: - CF_API_EMAIL = $CLOUDFLARE_EMAIL - CF_API_KEY = $CLOUDFLARE_API_KEY labels: - \"traefik.enable=true\" # HTTP-to-HTTPS Redirect - \"traefik.http.routers.http-catchall.entrypoints=http\" - \"traefik.http.routers.http-catchall.rule=HostRegexp(`{host:.+}`)\" - \"traefik.http.routers.http-catchall.middlewares=redirect-to-https\" - \"traefik.http.middlewares.redirect-to-https.redirectscheme.scheme=https\" # HTTP Routers - \"traefik.http.routers.traefik-rtr.entrypoints=https\" - \"traefik.http.routers.traefik-rtr.rule=HostHeader(`traefik. $DOMAINNAME `)\" - \"traefik.http.routers.traefik-rtr.tls=true\" - \"traefik.http.routers.traefik-rtr.tls.domains[0].main= $DOMAINNAME \" - \"traefik.http.routers.traefik-rtr.tls.domains[0].sans=*. $DOMAINNAME \" Before proceeding, we need to change the port 443 to 4443 and 80 to 8080 because the port 443 and 80 are already used by Traefik. Here is a snippet of the only thing you should modify into docker-compose file of the installation: # container for tactical reverse proxy tactical-nginx: container_name: trmm-nginx image: ${ IMAGE_REPO } tactical-nginx: ${ VERSION } restart: always environment: APP_HOST: ${ APP_HOST } API_HOST: ${ API_HOST } MESH_HOST: ${ MESH_HOST } CERT_PUB_KEY: ${ CERT_PUB_KEY } CERT_PRIV_KEY: ${ CERT_PRIV_KEY } networks: proxy: ipv4_address: 172 .20.0.20 ports: - \"8080:8080\" ## port 8080 instead of 80 - \"4443:4443\" ## port 4443 instead of 443 Once saved, make sure you run the docker-compose or installation script at least once, so all the directory structures are created. Once you have your certificate (acme.json) generated by traefikv2 we will be able to extract it for rmm. Copy the acme.json create by traefik into the root of your rmm directory (In my case it's $USERDIR/docker/rmm) which you should have already defined. After that we can run this docker to extract the certificates for us: version: \"3.7\" services: ##Copy the acme.json of Traefik2 at volumes: (userdir/docker/rmm in this case) traefik-certs-dumper: image: ldez/traefik-certs-dumper:v2.7.4 entrypoint: sh -c ' apk add jq ; while ! [ -e /data/acme.json ] || ! [ `jq \".[] | .Certificates | length\" /data/acme.json` != 0 ]; do sleep 1 ; done && traefik-certs-dumper file --version v2 --watch --source /data/acme.json --dest data/certs' volumes: - $USERDIR /docker/rmm:/data Once completed, you should have 1 new folder in your rmm directory $USERDIR/docker/rmm/ certs in this example. As the installation instruction, we will pass those to the .env: echo \"CERT_PUB_KEY= $( sudo base64 -w 0 $USERDIR /docker/rmm/certs/certs/**yourdomain.com.crt** ) \" >> .env echo \"CERT_PRIV_KEY= $( sudo base64 -w 0 $USERDIR /docker/rmm/certs/private/**yourdomain.com.key** ) \" >> .env Next we can create 3 rules to tell Traefik to correctly route the https and agent. For that we will create 2 rules into Traefik directory as per it's configuration. folder/traefik/rules create: nano app-mesh.toml and inside it we add: [ http.routers ] [ http.routers.mesh-rtr ] entryPoints = [ \"https\" ] rule = \"Host(`mesh.**yourdomain.com**`)\" service = \"mesh-svc\" ##middleware with 2FA [ http.services ] [ http.services.mesh-svc ] [ http.services.mesh-svc.loadBalancer ] passHostHeader = true [[ http.services.mesh-svc.loadBalancer.servers ]] url = \"https://**xxx.xxx.xxx.xxx**:4443\" # or whatever your external host's IP is create: nano app-meshagent.toml and inside it we add: [ http.routers ] [ http.routers.mesh-rtr1 ] entryPoints = [ \"https\" ] rule = \"\"\"Host(`mesh.**yourdomain.com**`) && PathPrefix( `/agent.ashx`, `/meshrelay.ashx`, ) && Headers(`X-Forwarded-Proto`, `wss`) \"\"\" ##Don't add middle where, the agent wont work. [ http.services ] [ http.services.mesh-svc1 ] [ http.services.mesh-svc.loadBalancer ] passHostHeader = true [[ http.services.mesh-svc1.loadBalancer.servers ]] url = \"https://**xxx.xxx.xxx.xxx**:4443\" # or whatever your external host's IP is create: nano app-rmm.toml and inside it we add: [ http.routers ] [ http.routers.rmm-rtr ] entryPoints = [ \"https\" ] rule = \"Host(`rmm.**yourdomain.com**`)\" service = \"rmm-svc\" ##middleware with 2FA [ http.services ] [ http.services.rmm-svc ] [ http.services.rmm-svc.loadBalancer ] passHostHeader = true [[ http.services.rmm-svc.loadBalancer.servers ]] url = \"https://xxx.xxx.xxx.xxx:4443\" # or whatever your external host's IP:port is That's it, you can now restart Tactical. rmm and mesh.yourdomain.com should work, same for the agent. Please note that if you have a middleware with 2FA you can still use it with the inside mesh.toml, but do not add it with the agent.","title":"Traefikv2"},{"location":"unsupported_proxies/#haproxy","text":"Check / change the MeshCentral config.json, some of the values may be set already. CertUrl must be changed to point to the HAProxy server if not using the same certs for both HAProxy and TRMM.","title":"HAProxy"},{"location":"unsupported_proxies/#meshcentral-adjustment","text":"Credit to @bradhawkins Edit MeshCentral config: nano /meshcentral/meshcentral-data/config.json Insert this (modify HAProxyIP to your network): { \"settings\": { \"Port\": 4443, \"AliasPort\": 443, \"RedirPort\": 8080, \"TlsOffload\": \"127.0.0.1\", }, \"domains\": { \"\": { \"CertUrl\": \"https://HAProxyIP:443/\", } } } Restart MeshCentral: systemctl meshcentral restart","title":"MeshCentral Adjustment"},{"location":"unsupported_proxies/#nginx-adjustments","text":"You will need to edit the nginx.conf file in the http section on the trmm server to recognize the X-Forwarded-For Header that will be sent from haproxy. Edit file /etc/nginx/nginx.conf Add the lines from 'real_ip' module inside http tag: set_real_ip_from 192.168.0.200; #IP Address of your haproxy server real_ip_header X-Forwarded-For; Restart nginx: systemctl restart nginx.service","title":"NGINX ADJUSTMENTS"},{"location":"unsupported_proxies/#haproxy-config","text":"The order of use_backend is important, and Tactical-Mesh-WebSocket_ipvANY must be before Tactical-Mesh_ipvANY . This assumes a standard VM install or Docker instance, unaltered . If you've altered exposed ports on your VM or Docker instance, those will need to be adjusted in the configuration. The values of timeout connect , timeout server , and timeout tunnel have been configured to maintain a stable agent connection, however you may need to adjust these values to suit your environment: frontend http-to-https-shared bind 0.0.0.0:80 mode http log global option socket-stats option http-server-close option dontlognull option forwardfor acl https ssl_fc http-request set-header X-Forwarded-Proto http if !https http-request set-header X-Forwarded-Proto https if https http-request add-header X-Real-IP %[src] timeout client 30000 acl rmm var(txn.txnhost) -m str -i rmm.example.com acl api var(txn.txnhost) -m str -i api.example.com acl mesh var(txn.txnhost) -m str -i mesh.example.com http-request set-var(txn.txnhost) hdr(host) http-request redirect scheme https if rmm http-request redirect scheme https if api http-request redirect scheme https if mesh frontend https-shared bind 0.0.0.0:443 ssl crt-list /var/etc/haproxy/HTTPS.crt_list #ADJUST THIS TO YOUR OWN SSL CERTIFICATES mode http log global option socket-stats option dontlognull option http-server-close option forwardfor acl https ssl_fc http-request set-header X-Forwarded-Proto http if !https http-request set-header X-Forwarded-Proto https if https timeout client 30000 acl aclcrt_https_shared var(txn.txnhost) -m reg -i ^([^\\.]*)\\.example\\.com(:([0-9]){1,5})?$ acl rmm var(txn.txnhost) -m str -i rmm.example.com acl nats-websocket var(txn.txnpath) -m sub -i /natsws acl api var(txn.txnhost) -m str -i api.example.com acl is_websocket hdr(Upgrade) -i WebSocket acl mesh var(txn.txnhost) -m str -i mesh.example.com acl api-ws var(txn.txnhost) -m sub -i api.example.com http-request set-var(txn.txnhost) hdr(host) http-request set-var(txn.txnpath) path use_backend rmm.example.com_ipvANY if rmm use_backend rmm.example.com-websocket_ipvANY if nats-websocket api-ws use_backend rmm.example.com_ipvANY if api use_backend mesh.example.com-websocket_ipvANY if is_websocket mesh use_backend mesh.example.com_ipvANY if mesh backend rmm.example.com_ipvANY mode http log global timeout connect 30000 timeout server 30000 retries 3 http-request add-header X-Forwarded-Host %[req.hdr(Host)] http-request add-header X-Forwarded-Proto https server rmm x.x.x.x:443 ssl verify none backend rmm.example.com-websocket_ipvANY mode http log global timeout connect 30000 timeout server 30000 retries 3 timeout tunnel 3600000 http-request add-header X-Forwarded-Host %[req.hdr(Host)] http-request add-header X-Forwarded-Proto https server rmm-websocket x.x.x.x:443 ssl verify none backend mesh.example.com-websocket_ipvANY mode http log global timeout connect 3000 timeout server 3000 retries 3 timeout tunnel 3600000 http-request add-header X-Forwarded-Host %[req.hdr(Host)] http-request add-header X-Forwarded-Proto https server mesh-websocket x.x.x.x:443 ssl verify none backend mesh.example.com_ipvANY mode http log global timeout connect 15000 timeout server 15000 retries 3 timeout tunnel 15000 http-request add-header X-Forwarded-Host %[req.hdr(Host)] http-request add-header X-Forwarded-Proto https server mesh x.x.x.x:443 ssl verify none","title":"HAProxy Config"},{"location":"unsupported_proxies/#haproxy-how-to-for-pfsense","text":"https://github.com/ninjamonkey198206/T-RMM-PFSense-HAProxy-config","title":"HAProxy How-to for pfSense"},{"location":"unsupported_proxies/#haproxy-how-to-for-baremetal","text":"https://github.com/ninjamonkey198206/T-RMM-Baremetal-HAProxy","title":"HAProxy How-to for Baremetal"},{"location":"unsupported_proxies/#haproxy-in-tcp-mode-pfsense","text":"In this scenario, you install TRMM as per documentation. Meaning your certificates are generated and managed on your TRMM server, just use the install.sh and follow docs and on-screen instructions. HAProxy here will just pass the traffic to the NGINX on TRMM server. No certificate management. Only use this method if you have more than 1 server that need to use port 443 on the same public IP.","title":"HAProxy in TCP Mode, pfSense"},{"location":"unsupported_proxies/#assumptions","text":"These are some assumptions made to make this guide, short, easy to follow and to the point. Of course you can adapt it to your environment and/or current configuration. You have a pfSense firewall. You have HAProxy installed. You don't have any http frontends on your HAProxy. You have firewall rule to allow traffic from your WAN to HAProxy 443 port. You have set Max Connections on Settings to a value MORE than the agents you plan to connect. Your subdomains are: api , mesh , rmm You can resolve (rmm|api|mesh).example.com to your local TRMM server when in your local network. You can resolve (rmm|api|mesh).example.com to your public IP when you are outside of your local network.","title":"Assumptions"},{"location":"unsupported_proxies/#global-settings","text":"Config file format, for reference: global maxconn 50000 stats socket /tmp/haproxy.socket level admin expose-fd listeners gid 80 nbproc 1 nbthread 1 hard-stop-after 15m chroot /tmp/haproxy_chroot daemon tune.ssl.default-dh-param 2048 server-state-file /tmp/haproxy_server_state","title":"Global Settings"},{"location":"unsupported_proxies/#values-you-will-have-to-replace-with-your-own","text":"10.10.10.100 - Change with your TRMM local IP. example.com - Change with your domain.","title":"Values you will have to replace with your own"},{"location":"unsupported_proxies/#backend","text":"Navigate to Services -> HAProxy -> Backend Click \u2935\ufe0fAdd","title":"Backend"},{"location":"unsupported_proxies/#backend-server-pool","text":"Name: trmm-backend On Server list, Click \u2935\ufe0f Name: trmm-server Forwardto: Address+Port Address: 10.10.10.100 (Reminder: change this) Port: 443 Max conn: 10000 (Or 0 for unlimited)","title":"Backend server pool"},{"location":"unsupported_proxies/#timeout-retry-settings","text":"Connection timeout: 300000 (Note: it has more 0s than the default) Server timeout: 300000 (Note: it has more 0s than the default) Retries: 3","title":"Timeout / retry settings"},{"location":"unsupported_proxies/#health-checking","text":"Health check method: SSL Keep this to none while installing or updating certificates. There might be problems if it's set to SSL or basic while doing so.","title":"Health checking"},{"location":"unsupported_proxies/#advanced-settings","text":"Please read the warning there, and the note at the bottom. This optional and it's use is to show the real public IP of the agent. Check `Use Client-IP to connect to backend servers. Some remote agents would not let me do RDP without this option. Play with it and see what works for you. It works well for me, there are cases that it might not work on all environments.","title":"Advanced settings"},{"location":"unsupported_proxies/#for-those-who-like-the-config-files","text":"backend trmm-backend_ipv4 mode tcp log global timeout connect 300000 timeout server 300000 retries 3 source ipv4@ usesrc clientip option ssl-hello-chk server trmm-server 10.10.10.100:443 check inter 1000 maxconn 10000","title":"For those who like the config files"},{"location":"unsupported_proxies/#frontend","text":"Navigate to Services -> HAProxy -> Frontend Click \u2935\ufe0fAdd","title":"Frontend"},{"location":"unsupported_proxies/#edit-haproxy-frontend","text":"Name: FrontendTCP Status: Active On External address, click \u2935\ufe0f Listen address: WAN address (IPv4) Port: 443 Max connections: 10000 (Or 0 or unlimited`) Type: ssl/https (TCP mode)","title":"Edit HAProxy Frontend"},{"location":"unsupported_proxies/#default-backend-access-control-lists-and-actions","text":"On Access Control lists, Click \u2935\ufe0f Name: tactical Expression Server Name Indication TLS extension regex: value: (rmm|api|mesh)\\.example\\.com On Actions, Click \u2935\ufe0f Action: Use Backend Condition acl names: tactical backend: trmm-backend","title":"Default backend, access control lists and actions"},{"location":"unsupported_proxies/#advanced-settings_1","text":"Client timeout: 300000 (Note: it has more 0s than the default) Use \"httpclose\" option: http-server-close Click \ud83d\udcbeSave Click \u2714\ufe0fApply Changes","title":"Advanced settings"},{"location":"unsupported_proxies/#for-those-who-like-the-config-files_1","text":"frontend Frontend-SNI bind YOURWANIP:443 name YOURWANIP:443 mode tcp log global maxconn 10000 timeout client 300000 tcp-request inspect-delay 5s acl tactical req.ssl_sni -m reg -i (rmm|mesh|api)\\.yourdomain\\.com tcp-request content accept if { req.ssl_hello_type 1 } use_backend tactical_ipv4 if trmm-backend","title":"For those who like the config files"},{"location":"unsupported_proxies/#haproxy-in-tcp-mode-opnsense","text":"In this scenario, you install TRMM as per documentation. Meaning your certificates are generated and managed on your TRMM server, just use the install.sh and follow docs and on-screen instructions. HAProxy here will just pass the traffic to the NGINX on TRMM server. No certificate management. Only use this method if you have more than 1 server that need to use port 443 on the same public IP.","title":"HAProxy in TCP Mode, OPNsense"},{"location":"unsupported_proxies/#assumptions_1","text":"These are some assumptions made to make this guide, short, easy to follow and to the point. Of course you can adapt it to your environment and/or current configuration. You have a OPNsense firewall. You have HAProxy installed. You don't have any http frontends on your HAProxy. You have port forward to forward traffic from your WAN 443 port to OPNsense 443 port. You have firewall rule to allow traffic from your WAN to HAProxy 443 port. Your subdomains are: api , mesh , rmm You can resolve (rmm|api|mesh).example.com to your local TRMM server when in your local network. You can resolve (rmm|api|mesh).example.com to your public IP when you are outside of your local network. If you notice agents are continue to timeout after 60second (default ping time of MeshAgent). Check Settings > HAProxy > Config Export . Some backend or frontend still has a lower than 60s timeout. Increase it for example to 120s .","title":"Assumptions"},{"location":"unsupported_proxies/#settings","text":"Navigate to Services -> HAProxy -> Settings","title":"Settings"},{"location":"unsupported_proxies/#service","text":"Click \ud83d\udd3d next to Settings tab. Click Service Check Enable HAProxy Click Apply Check that HAProxy started (You should see a green \u25b6\ufe0f on the top right corner)","title":"Service"},{"location":"unsupported_proxies/#global-parameters","text":"Click \ud83d\udd3d next to Settings tab. Click Global Parameters Maximum connections: Set this to a number of at least 3 times your agents. Click Apply","title":"Global Parameters"},{"location":"unsupported_proxies/#default-parameters","text":"Click \ud83d\udd3d next to Settings tab. Click Default Parameters Maximum connections (Public Services): Set this to a number of at least 3 times your agents. Maximum connections (Servers): Set this to a number of at least 3 times your agents. Client Timeout: 120s Connection Timeout: 120s Retries: 3 Click Apply","title":"Default Parameters"},{"location":"unsupported_proxies/#real-servers","text":"Navigate to Services -> HAProxy -> Settings Click \ud83d\udd3d next to Real Servers tab. Click Real Servers Click \u2795 Name: Tactical Type: static FQDN or IP: (Your Tactical RMM VM IP or FQDN) Port: 443 Mode: active SSL: Unchecked SSL SNI: (Empty) Verify SSL Certificate: Unchecked Click Save Click Apply","title":"Real Servers"},{"location":"unsupported_proxies/#virtual-services-backend-pools","text":"Navigate to Services -> HAProxy -> Settings Click \ud83d\udd3d next to Virtual Services tab. Click Backend Pools Click \u2795 Name: Tactical Description: Tactical Server Pool Mode: TCP (Layer 4) Health Checking: Unchecked Retries: 3 Click Save Click Apply","title":"Virtual Services - Backend Pools"},{"location":"unsupported_proxies/#rules-checks","text":"Navigate to Services -> HAProxy -> Settings","title":"Rules &amp; Checks"},{"location":"unsupported_proxies/#conditions","text":"Click \ud83d\udd3d next to Rules & Checks tab. Click Conditions Click \u2795 Name: Contains SSL Hello Message Condition type: Custom condition (option pass-through) Option pass-through: req.ssl_hello_type 1 Click Save Click \u2795 Name: SNI Tactical Description: SNI Match tactical subdomains Condition Type: SNI TLS extension regex (TCP Request content inspection) SNI Regex: (api|tactical|mesh)\\.yourdomain\\.com Click Save Click Apply","title":"Conditions"},{"location":"unsupported_proxies/#rules","text":"Click \ud83d\udd3d next to Rules & Checks tab. Click Rules Click \u2795 Name: Accept Content if Contains SSL Hello Select conditions: Contains SSL Hello Message Execute function: tcp-request content accept Click Save Click \u2795 Name: TCP Inspect Delay Select conditions: Nothing Selected Execute function: tcp-request inspect-delay TCP inspection delay: 5s Click Save Click \u2795 Name: Tactical RMM Select conditions: SNI Tactical Execute function: Use specified Backend Pool Use specified Backend Pool: Tactical Click Save Click Apply","title":"Rules"},{"location":"unsupported_proxies/#virtual-services-public-services","text":"Navigate to Services -> HAProxy -> Settings Click \ud83d\udd3d next to Virtual Services tab. Click Public Services Click \u2795 Name: Frontend Listen Addresses: 127.0.0.1:443 (Remember, you have to have port forward + allow rule) Type: SSL / HTTPS (TCP Mode) Default Backend Pool: none SSL Offloading: Unchecked Maximum Connections: (Set this to a number of at least 3 times your agents.) Select Rules: Accept Content if Contains SSL Hello TCP Inspect Delay Tactical RMM Click Save Note: Order on Rules matter! Click Apply","title":"Virtual Services - Public Services"},{"location":"unsupported_proxies/#apache-proxy","text":"HowTo - Proxy on Apache","title":"Apache Proxy"},{"location":"unsupported_proxies/#trmm-server","text":"Edit file /etc/nginx/sites-available/rmm.conf Add the lines from 'real_ip' module inside server tag: set_real_ip_from 192.168.0.200; #IP Address of your apache proxy real_ip_header X-Forwarded-For; Restart nginx: systemctl restart nginx.service","title":"TRMM SERVER"},{"location":"unsupported_proxies/#apache","text":"Enable ssl proxy and rewriteEngine. Set proxy to preserve host. Set upgrade rule to websocket. Set proxypass rules redirecting to rmm location. Apache ssl config example: <VirtualHost *:443> ServerName rmm.blablabla.com.br:443 ServerAlias mesh.blablabla.com.br:443 api.blablabla.com.br:443 SSLEngine on SSLCertificateFile \"C:/Apache24/conf/ssl-rmm.blablabla.com.br/_.blablabla.com.br-chain.pem\" SSLCertificateKeyFile \"C:/Apache24/conf/ssl-rmm.blablabla.com.br/_.blablabla.com.br-key.pem\" SSLProxyEngine on RewriteEngine On ProxyPreserveHost On # When Upgrade:websocket header is present, redirect to ws # Using NC flag (case-insensitive) as some browsers will pass Websocket RewriteCond %{HTTP:Upgrade} =websocket [NC] RewriteRule ^/(.*) wss://192.168.0.212/$1 [P,L] ProxyPass \"/\" \"https://192.168.0..212/\" retry=3 ProxyPassReverse \"/\" \"https://192.168.0.212/\" retry=3 BrowserMatch \"MSIE [2-5]\" \\ nokeepalive ssl-unclean-shutdown \\ downgrade-1.0 force-response-1.0 </VirtualHost>","title":"APACHE"},{"location":"unsupported_proxies/#nginx-proxy-manager-double-proxy-method","text":"First, get your TRMM server installed with a standard config and working. Then in NPM, declare the hosts with the parameters: api.{domain} https | TRMM server DNS name | 443 ON: Cache Assets | Block Common Exploits | Websockets Support mesh.{domain} https | TRMM server DNS name | 443 ON: Block Common Exploits | Websockets Support Advanced: proxy_set_header Host $host; proxy_set_header CF-Connecting-IP $proxy_add_x_forwarded_for; proxy_set_header X-Forwarded-Host $host:$server_port; proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for; proxy_set_header X-Forwarded-Proto $scheme; rmm.{domain} https | TRMM server DNS name | 443 ON: Cache Assets | Block Common Exploits | Websockets Support Last thing you have to do, is setup the same certs on NPM and TRMM. TRMM cert location: /etc/letsencrypt/live/{yourdomain}/ NPM cert location: SSL Certificates tab Either: Setup SSL certs on NPM (optionally using Cloudflare API). Download and copy certs to TRMM. Then run ./update.sh --force OR: Run standard TRMM cert renew process using certbot. Then copy the files and upload: Certificate Key ( privkey.pem ), Certificate ( cert.pem ), and Intermediate Certificate ( chain.pem )","title":"Nginx Proxy Manager (double proxy method)"},{"location":"unsupported_proxies/#nginx-proxy-manager-alt-method","text":"Note Tested and working on the following: \u2705 TRMM hosted on Ubuntu 22.04 via Proxmox VM \u2705 Nginx Proxy Manager hosted on Debian 11 via Proxmox CT W/ Docker We'll use \"YOURDOMAIN\" in place of your actual domain name","title":"Nginx Proxy Manager Alt Method"},{"location":"unsupported_proxies/#step-1-install-and-test-trmm-with-no-proxy","text":"First and foremost, you need to disable Nginx Proxy Manager. To do this, on your routers firewall settings, forward ports 443 and 80 to the local ip that will be running your TRMM instance. This is only temporary as we want to make sure we can get TRMM installed and running with a STANDARD install FIRST. You will also need to make sure the following subdomains are pointing to your external IP: api.YOURDOMAIN.com rmm.YOURDOMAIN.com mesh.YOURDOMAIN.com Use curl icanhazip.com to pull your external IP if you don't know it. Once you have ports 443 and 80 forwarded correctly, go ahead and run a STANDARD install of TRMM on a FRESH machine. You can find the Install Documentation here .","title":"Step 1 - Install and test TRMM with no proxy"},{"location":"unsupported_proxies/#step-2-nginx-proxy-manager-proxy-host-configuration","text":"Assuming you installed TRMM properly and all of its features are working correctly, we will now get into setting up Nginx Proxy Manager to work with TRMM. Go ahead and forward ports 443 and 80 back to your Nginx Proxy Manager instance. Below you will find the 3 different Proxy Hosts you need to create on Nginx Proxy Manager.","title":"Step 2 - Nginx Proxy Manager Proxy Host Configuration"},{"location":"unsupported_proxies/#api-domain","text":"Details Tab: Domain Name: --> api.YOURDOMAIN.com Scheme: --> https Forward Hostname / IP: --> The Local IP of your TRMM instance. ie: 192.168.1.155 Forward Port: --> 443 Enabled Options: Cache Assets; Block Common Exploits; Websockets Support Access List: --> Publicly Accessible","title":"\"API\" Domain"},{"location":"unsupported_proxies/#mesh-domain","text":"Details Tab: Domain Name: --> mesh.YOURDOMAIN.com Scheme: --> http Forward Hostname / IP: --> The Local IP of your TRMM instance. ie: 192.168.1.155 Forward Port: --> 4430 Enabled Options: Block Common Exploits; Websockets Support Access List: --> Publicly Accessible Advanced Tab: Custom Nginx Configuration proxy_set_header Host $host; proxy_set_header CF-Connecting-IP $proxy_add_x_forwarded_for; proxy_set_header X-Forwarded-Host $host:$server_port; proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for; proxy_set_header X-Forwarded-Proto $scheme;","title":"\"MESH\" Domain"},{"location":"unsupported_proxies/#rmm-domain","text":"Details Tab: Domain Name: --> rmm.YOURDOMAIN.com Scheme: --> https Forward Hostname / IP: --> The Local IP of your TRMM instance. ie: 192.168.1.155 Forward Port: --> 443 Enabled Options: Cache Assets; Block Common Exploits; Websockets Support Access List: --> Publicly Accessible","title":"\"RMM\" Domain"},{"location":"unsupported_proxies/#npm-ssl-configuration","text":"In order for TRMM to work properly with NPM, you'll need to create a wildcard or multi-domain SSL Certificate. To do this, on the Nginx Proxy Manager Dashboard, click the SSL Certificates tab. Now in the top right, click \"Add SSL Certificate\". Select \"Let's Encrypt\". Add each of the domains listed above to the \"Domain Names\" field. Make sure you add them 1 at a time and click the dropdown of the domain to add it. Once you've added all 3 domains, enable the \"I agree\" tick and click save. You should now see something like this in your list of SSL Certs: Go ahead and download this certificate by clicking the 3 dots to the right of the cert entry and click \"Download\". I suggest you follow these instructions for adding the new certs to your TRMM instance. You will still need to keep TRMM's certs updated as well.","title":"NPM SSL Configuration"},{"location":"unsupported_proxies/#meshcentral-configuration","text":"Now you should have Nginx Proxy Manager completely setup. Lets move on to the MeshCentral Configuration. First, cd to /meshcentral/meshcentral-data Now edit the file named config.json . Make sure your config file looks like the one shown below. { \"settings\" : { \"cert\" : \"mesh.YOURDOMAIN.com\" , .... \"tlsOffload\" : \"Nginx Proxy Manager Local IP\" , \"trustedProxy\" : \"Nginx Proxy Manager Local IP\" , .... }, \"domains\" : { \"\" : { .... \"certUrl\" : \"https://mesh.YOURDOMAIN.com:443/\" , .... } } } If you want to enable logging in case anything goes wrong during this process, follow the instructions here . As of now, everything should be working. If you have any issues, feel free to join the discord . Keep in mind, this is considered an UNSUPPORTED installation. Developers are not obligated to fix any issues you may encounter. Good luck.","title":"MeshCentral Configuration"},{"location":"unsupported_proxies/#synology-nas-reverse-proxy-portal","text":"Follow HAProxy And set the \"CertUrl\" to point to the IP address of my NAS that was running the reserve proxy and had the certificates installed. In Synology NAS reverse proxy portal and added websockets to the rmm domains, especially the mesh domain under custom headers, by just clicking the create button and choosing WebSocket:","title":"Synology NAS Reverse Proxy Portal"},{"location":"unsupported_scripts/","text":"Unsupported Reference Scripts \u00b6 Note These are not supported scripts/configurations by Tactical RMM, but it's provided here for your reference. Although these aren't officially supported configurations, we generally will help point you in the right direction. Please use the Discord #unsupported channel to discuss issues related to these complex installations. Fail2ban \u00b6 Install fail2ban sudo apt install -y fail2ban python3-systemd There is a known issue on Debian 12 where fail2ban doesnt start, if its not running (check with systemctl status fail2ban ) if its not please check /etc/fail2ban/jail.local exists, if it doesn't, do the following: echo -e \"[sshd]\\nbackend=systemd\\nenabled=true\" | sudo tee /etc/fail2ban/jail.local Set Tactical fail2ban filter conf file tacticalfail2banfilter = \" $( cat << EOF [Definition] failregex = ^<HOST>.*400.17.*$ ignoreregex = ^<HOST>.*200.\\d+.*$ EOF ) \" sudo echo \" ${ tacticalfail2banfilter } \" > /etc/fail2ban/filter.d/tacticalrmm.conf Set Tactical fail2ban jail conf file tacticalfail2banjail = \" $( cat << EOF [tacticalrmm] enabled = true port = 80,443 filter = tacticalrmm action = iptables-allports[name=tactical] logpath = /rmm/api/tacticalrmm/tacticalrmm/private/log/access.log maxretry = 3 bantime = 14400 findtime = 14400 EOF ) \" sudo echo \" ${ tacticalfail2banjail } \" > /etc/fail2ban/jail.d/tacticalrmm.local Restart fail2ban sudo systemctl restart fail2ban.service Using your own certs with Docker \u00b6 If you are providing your own publicly signed certificates, ensure you download the full chain (combined CA/Root + Intermediary) certificate in pem format. If certificates are not provided, a self-signed certificate will be generated and most agent functions won't work. Restricting Access to rmm.EXAMPLE.COM \u00b6 Limit access to Tactical RMM's administration panel in Nginx to specific locations: Using DNS \u00b6 Create a file allowed-domain.list which contains the DNS names you want to grant access to your rmm: Edit /etc/nginx/allowed-domain.list and add: nom1.dyndns.tv nom2.dyndns.tv Create a bash script domain-resolver.sh which does the DNS lookups for you: Edit /etc/nginx/domain-resolver.sh #!/usr/bin/env bash filename = \" $1 \" while read -r line do ddns_record = \" $line \" if [[ ! -z $ddns_record ]] ; then resolved_ip = $( getent ahosts $line | awk '{ print $1 ; exit }' ) if [[ ! -z $resolved_ip ]] ; then echo \"allow $resolved_ip ;# from $ddns_record \" fi fi done < \" $filename \" Give the right permission to this script chmod +x /etc/nginx/domain-resolver.sh Add a cron job which produces a valid Nginx configuration and restarts Nginx: /etc/cron.hourly/domain-resolver #!/usr/bin/env bash /etc/nginx/domain-resolver.sh /etc/nginx/allowed-domain.list > /etc/nginx//allowed-ips-from-domains.conf service nginx reload > /dev/null 2 > & 1 This can be a hourly, daily, or monthly job or you can have it run at a specific time. Give the right permission to this script chmod +x /etc/cron.hourly/domain-resolver When run it will give something like this: Edit /etc/nginx//allowed-ips-from-domains.conf allow xxx.xxx.xxx.xxx;# from maison.nom1.dyndns.tv allow xxx.xxx.xxx.xxx;# from maison.nom2.dyndns.tv Update your Nginx's configuration to take this output into account: Edit /etc/nginx/sites-enabled/frontend.conf server { .... include /etc/nginx/allowed-ips-from-domains.conf; deny all; listen 443 ssl; .... } Using a fixed IP \u00b6 Create a file containg the fixed IP address (where xxx.xxx.xxx.xxx must be replaced by your real IP address): Edit /etc/nginx/allowed-ips.conf # Private IP address allow 192.168.0.0/16; allow 172.16.0.0/12; allow 10.0.0.0/8; # Public fixed IP address allow xxx.xxx.xxx.xxx Update your Nginx configuration to take this output into account. Edit /etc/nginx/sites-enabled/frontend.conf server { .... include /etc/nginx/allowed-ips.conf; deny all; .... } Automating SSL with Cloudflare \u00b6 Use Cloudflare API with certbot https://www.bjornjohansen.com/wildcard-certificate-letsencrypt-cloudflare You need to restart mesh and nginx for changes to take effect","title":"Unsupported Configs"},{"location":"unsupported_scripts/#unsupported-reference-scripts","text":"Note These are not supported scripts/configurations by Tactical RMM, but it's provided here for your reference. Although these aren't officially supported configurations, we generally will help point you in the right direction. Please use the Discord #unsupported channel to discuss issues related to these complex installations.","title":"Unsupported Reference Scripts"},{"location":"unsupported_scripts/#fail2ban","text":"Install fail2ban sudo apt install -y fail2ban python3-systemd There is a known issue on Debian 12 where fail2ban doesnt start, if its not running (check with systemctl status fail2ban ) if its not please check /etc/fail2ban/jail.local exists, if it doesn't, do the following: echo -e \"[sshd]\\nbackend=systemd\\nenabled=true\" | sudo tee /etc/fail2ban/jail.local Set Tactical fail2ban filter conf file tacticalfail2banfilter = \" $( cat << EOF [Definition] failregex = ^<HOST>.*400.17.*$ ignoreregex = ^<HOST>.*200.\\d+.*$ EOF ) \" sudo echo \" ${ tacticalfail2banfilter } \" > /etc/fail2ban/filter.d/tacticalrmm.conf Set Tactical fail2ban jail conf file tacticalfail2banjail = \" $( cat << EOF [tacticalrmm] enabled = true port = 80,443 filter = tacticalrmm action = iptables-allports[name=tactical] logpath = /rmm/api/tacticalrmm/tacticalrmm/private/log/access.log maxretry = 3 bantime = 14400 findtime = 14400 EOF ) \" sudo echo \" ${ tacticalfail2banjail } \" > /etc/fail2ban/jail.d/tacticalrmm.local Restart fail2ban sudo systemctl restart fail2ban.service","title":"Fail2ban"},{"location":"unsupported_scripts/#using-your-own-certs-with-docker","text":"If you are providing your own publicly signed certificates, ensure you download the full chain (combined CA/Root + Intermediary) certificate in pem format. If certificates are not provided, a self-signed certificate will be generated and most agent functions won't work.","title":"Using your own certs with Docker"},{"location":"unsupported_scripts/#restricting-access-to-rmmexamplecom","text":"Limit access to Tactical RMM's administration panel in Nginx to specific locations:","title":"Restricting Access to rmm.EXAMPLE.COM"},{"location":"unsupported_scripts/#using-dns","text":"Create a file allowed-domain.list which contains the DNS names you want to grant access to your rmm: Edit /etc/nginx/allowed-domain.list and add: nom1.dyndns.tv nom2.dyndns.tv Create a bash script domain-resolver.sh which does the DNS lookups for you: Edit /etc/nginx/domain-resolver.sh #!/usr/bin/env bash filename = \" $1 \" while read -r line do ddns_record = \" $line \" if [[ ! -z $ddns_record ]] ; then resolved_ip = $( getent ahosts $line | awk '{ print $1 ; exit }' ) if [[ ! -z $resolved_ip ]] ; then echo \"allow $resolved_ip ;# from $ddns_record \" fi fi done < \" $filename \" Give the right permission to this script chmod +x /etc/nginx/domain-resolver.sh Add a cron job which produces a valid Nginx configuration and restarts Nginx: /etc/cron.hourly/domain-resolver #!/usr/bin/env bash /etc/nginx/domain-resolver.sh /etc/nginx/allowed-domain.list > /etc/nginx//allowed-ips-from-domains.conf service nginx reload > /dev/null 2 > & 1 This can be a hourly, daily, or monthly job or you can have it run at a specific time. Give the right permission to this script chmod +x /etc/cron.hourly/domain-resolver When run it will give something like this: Edit /etc/nginx//allowed-ips-from-domains.conf allow xxx.xxx.xxx.xxx;# from maison.nom1.dyndns.tv allow xxx.xxx.xxx.xxx;# from maison.nom2.dyndns.tv Update your Nginx's configuration to take this output into account: Edit /etc/nginx/sites-enabled/frontend.conf server { .... include /etc/nginx/allowed-ips-from-domains.conf; deny all; listen 443 ssl; .... }","title":"Using DNS"},{"location":"unsupported_scripts/#using-a-fixed-ip","text":"Create a file containg the fixed IP address (where xxx.xxx.xxx.xxx must be replaced by your real IP address): Edit /etc/nginx/allowed-ips.conf # Private IP address allow 192.168.0.0/16; allow 172.16.0.0/12; allow 10.0.0.0/8; # Public fixed IP address allow xxx.xxx.xxx.xxx Update your Nginx configuration to take this output into account. Edit /etc/nginx/sites-enabled/frontend.conf server { .... include /etc/nginx/allowed-ips.conf; deny all; .... }","title":"Using a fixed IP"},{"location":"unsupported_scripts/#automating-ssl-with-cloudflare","text":"Use Cloudflare API with certbot https://www.bjornjohansen.com/wildcard-certificate-letsencrypt-cloudflare You need to restart mesh and nginx for changes to take effect","title":"Automating SSL with Cloudflare"},{"location":"unsupported_synology_docker_install/","text":"Installing on Synology NAS using docker install \u00b6 Docker Setup \u00b6 Docker installs are currently unsupported, as is trying to help someone get it working on their own Synology NAS... But here's how you do it! Follow the standard docker install documentation. Once the docker-compose file is downloaded, edit it and modify the ports used by the Nginx server to custom ports ( 13180 and 13443 in the example below): Setup the reverse proxy \u00b6 Go to Login Portal > Advanced > Reverse Proxy in the Control Panel. Create 2 entries for each tactical DNS entries, one for the HTTP port & one for the HTTPS: For the entries related to Mesh, add some custom headers and adjust the proxy timeout connection: Bonus: SSL Certificate \u00b6 In regards to the certificate, I followed this tutorial (in french but still clear after translation) to automatically update it and manually updating it on the NAS and in TRMM: docker exec Acme sh -c \"acme.sh --issue --keylength 4096 -d '*.EXAMPLE.COM' --dns dns_provider\" sed -i '/CERT_PUB_KEY/d' /path/to/tactical/.env sed -i '/CERT_PRIV_KEY/d' /path/to/tactical/.env echo \"CERT_PUB_KEY= $( sudo base64 -w 0 /volume1/docker/acme/ \\* .EXAMPLE.COM/fullchain.cer ) \" >> /path/to/tactical/.env echo \"CERT_PRIV_KEY= $( sudo base64 -w 0 /volume1/docker/acme/ \\* .EXAMPLE.COM/*.whitesnew.com.key ) \" >> /path/to/tactical/.env docker exec Acme sh -c \"acme.sh --deploy -d '*.EXAMPLE.COM' --deploy-hook synology_provider\" docker-compose -f /path/to/tactical/docker-compose.yml restart","title":"Installing in Synology Docker"},{"location":"unsupported_synology_docker_install/#installing-on-synology-nas-using-docker-install","text":"","title":"Installing on Synology NAS using docker install"},{"location":"unsupported_synology_docker_install/#docker-setup","text":"Docker installs are currently unsupported, as is trying to help someone get it working on their own Synology NAS... But here's how you do it! Follow the standard docker install documentation. Once the docker-compose file is downloaded, edit it and modify the ports used by the Nginx server to custom ports ( 13180 and 13443 in the example below):","title":"Docker Setup"},{"location":"unsupported_synology_docker_install/#setup-the-reverse-proxy","text":"Go to Login Portal > Advanced > Reverse Proxy in the Control Panel. Create 2 entries for each tactical DNS entries, one for the HTTP port & one for the HTTPS: For the entries related to Mesh, add some custom headers and adjust the proxy timeout connection:","title":"Setup the reverse proxy"},{"location":"unsupported_synology_docker_install/#bonus-ssl-certificate","text":"In regards to the certificate, I followed this tutorial (in french but still clear after translation) to automatically update it and manually updating it on the NAS and in TRMM: docker exec Acme sh -c \"acme.sh --issue --keylength 4096 -d '*.EXAMPLE.COM' --dns dns_provider\" sed -i '/CERT_PUB_KEY/d' /path/to/tactical/.env sed -i '/CERT_PRIV_KEY/d' /path/to/tactical/.env echo \"CERT_PUB_KEY= $( sudo base64 -w 0 /volume1/docker/acme/ \\* .EXAMPLE.COM/fullchain.cer ) \" >> /path/to/tactical/.env echo \"CERT_PRIV_KEY= $( sudo base64 -w 0 /volume1/docker/acme/ \\* .EXAMPLE.COM/*.whitesnew.com.key ) \" >> /path/to/tactical/.env docker exec Acme sh -c \"acme.sh --deploy -d '*.EXAMPLE.COM' --deploy-hook synology_provider\" docker-compose -f /path/to/tactical/docker-compose.yml restart","title":"Bonus: SSL Certificate"},{"location":"update_agents/","text":"Updating Agents \u00b6 Warning The agent's version is directly tied to the RMM's version. For example, as of May 2023 RMM version 0.15.9 is compatible with agent version 2.4.6 and lower. You should never attempt to manually update an agent to a newer version without first making sure your RMM is on the latest version. Updating from the Web UI \u00b6 Agents will automatically self-update themselves if you have auto self-update enabled in Settings > Global Settings . There is a background job that runs every hour, at 35 minutes past the hour and sends any online agents an update command if it detects they are on an older version. You can also trigger this background job to run on demand by clicking Agents > Update Agents in the web UI: You can individually choose which agents to update, or simply Select All. The RMM will automatically skip any agents that don't need updating. You can trigger this manual agent update anytime you want. It is safe to spam, and won't run if an agent update task is already running. It will also make sure agents update to the correct version, in case they are an older version that cannot be directly upgraded to the latest version. For example, agents older than version 1.3.0 must first be updated to 1.3.0 before they can go any further. Manually updating from the command line on the agent \u00b6 You should never need to do this but might be needed to troubleshoot agents that are not updating automatically. Download the tacticalagent-vX.X.X.exe installer from the link generated by the Manual install method and place it somewhere on the filesystem. Open CMD as admin and call the exe like so: tacticalagent-vX.X.X.exe /VERYSILENT /LOG=agentupdate.txt This command will return immediately since it spawns a background process to run the update. The agent will take around 30 seconds to fully update. You can check the agentupdate.txt log file that is created for troubleshooting.","title":"Updating Agents"},{"location":"update_agents/#updating-agents","text":"Warning The agent's version is directly tied to the RMM's version. For example, as of May 2023 RMM version 0.15.9 is compatible with agent version 2.4.6 and lower. You should never attempt to manually update an agent to a newer version without first making sure your RMM is on the latest version.","title":"Updating Agents"},{"location":"update_agents/#updating-from-the-web-ui","text":"Agents will automatically self-update themselves if you have auto self-update enabled in Settings > Global Settings . There is a background job that runs every hour, at 35 minutes past the hour and sends any online agents an update command if it detects they are on an older version. You can also trigger this background job to run on demand by clicking Agents > Update Agents in the web UI: You can individually choose which agents to update, or simply Select All. The RMM will automatically skip any agents that don't need updating. You can trigger this manual agent update anytime you want. It is safe to spam, and won't run if an agent update task is already running. It will also make sure agents update to the correct version, in case they are an older version that cannot be directly upgraded to the latest version. For example, agents older than version 1.3.0 must first be updated to 1.3.0 before they can go any further.","title":"Updating from the Web UI"},{"location":"update_agents/#manually-updating-from-the-command-line-on-the-agent","text":"You should never need to do this but might be needed to troubleshoot agents that are not updating automatically. Download the tacticalagent-vX.X.X.exe installer from the link generated by the Manual install method and place it somewhere on the filesystem. Open CMD as admin and call the exe like so: tacticalagent-vX.X.X.exe /VERYSILENT /LOG=agentupdate.txt This command will return immediately since it spawns a background process to run the update. The agent will take around 30 seconds to fully update. You can check the agentupdate.txt log file that is created for troubleshooting.","title":"Manually updating from the command line on the agent"},{"location":"update_docker/","text":"Updating the RMM (Docker) \u00b6 Updating to the latest RMM version \u00b6 Question You have a backup , right? RIGHT?! Tactical RMM updates the docker images on every release and should be available within a few minutes. SSH into your server as a user that is in the docker group and run the below commands: cd [ dir/with/compose/file ] mv docker-compose.yml docker-compose.yml.old wget https://raw.githubusercontent.com/amidaware/tacticalrmm/master/docker/docker-compose.yml docker compose pull docker compose down docker compose up -d --remove-orphans If your user isn't in the docker group you can add yourself to the group with: sudo usermod -aG docker [user] Keep in mind that you will most likely need to log out and then back in Keeping your Let's Encrypt certificate up to date \u00b6 To renew your Let's Encrypt wildcard cert, run the following command, replacing example.com with your domain and admin@example.com with your email: sudo certbot certonly --manual -d *.example.com --agree-tos --no-bootstrap --manual-public-ip-logging-ok --preferred-challenges dns -m admin@example.com --no-eff-email Verify the domain with the TXT record. Once issued, run the below commands to base64 encode the certificates and add them to the .env file. echo \"CERT_PUB_KEY= $( sudo base64 -w 0 /etc/letsencrypt/live/ ${ rootdomain } /fullchain.pem ) \" >> .env echo \"CERT_PRIV_KEY= $( sudo base64 -w 0 /etc/letsencrypt/live/ ${ rootdomain } /privkey.pem ) \" >> .env Warning You must remove the old and any duplicate entries for CERT_PUB_KEY and CERT_PRIV_KEY in the .env file. Now run docker compose up -d restart and the new certificate will be in effect. Bonus: Upgrade postgres13 to 14","title":"Updating the RMM (Docker)"},{"location":"update_docker/#updating-the-rmm-docker","text":"","title":"Updating the RMM (Docker)"},{"location":"update_docker/#updating-to-the-latest-rmm-version","text":"Question You have a backup , right? RIGHT?! Tactical RMM updates the docker images on every release and should be available within a few minutes. SSH into your server as a user that is in the docker group and run the below commands: cd [ dir/with/compose/file ] mv docker-compose.yml docker-compose.yml.old wget https://raw.githubusercontent.com/amidaware/tacticalrmm/master/docker/docker-compose.yml docker compose pull docker compose down docker compose up -d --remove-orphans If your user isn't in the docker group you can add yourself to the group with: sudo usermod -aG docker [user] Keep in mind that you will most likely need to log out and then back in","title":"Updating to the latest RMM version"},{"location":"update_docker/#keeping-your-lets-encrypt-certificate-up-to-date","text":"To renew your Let's Encrypt wildcard cert, run the following command, replacing example.com with your domain and admin@example.com with your email: sudo certbot certonly --manual -d *.example.com --agree-tos --no-bootstrap --manual-public-ip-logging-ok --preferred-challenges dns -m admin@example.com --no-eff-email Verify the domain with the TXT record. Once issued, run the below commands to base64 encode the certificates and add them to the .env file. echo \"CERT_PUB_KEY= $( sudo base64 -w 0 /etc/letsencrypt/live/ ${ rootdomain } /fullchain.pem ) \" >> .env echo \"CERT_PRIV_KEY= $( sudo base64 -w 0 /etc/letsencrypt/live/ ${ rootdomain } /privkey.pem ) \" >> .env Warning You must remove the old and any duplicate entries for CERT_PUB_KEY and CERT_PRIV_KEY in the .env file. Now run docker compose up -d restart and the new certificate will be in effect. Bonus: Upgrade postgres13 to 14","title":"Keeping your Let's Encrypt certificate up to date"},{"location":"update_server/","text":"Updating the RMM \u00b6 Keeping your Linux server up to date Updating to the latest RMM version Keeping your Let's Encrypt certificate up to date Video Walkthru Keeping your Linux server up to date \u00b6 You should periodically run sudo apt update and sudo apt -y upgrade to keep your server up to date. Other than this, you should avoid making any changes to your server and let the update.sh script handle everything else for you. Danger Do NOT attempt in-place OS upgrades, such as trying to in-place upgrade from Debian 11 to 12. You will break your server! Instead, you must backup and restore to the new OS. Backup/restore functionality supports transition not only between different operating systems but also between architectures! For instance, you can back up an Ubuntu 20.04 system on an x86 architecture and restore it to an Oracle Cloud Free Tier ARM architecture running Debian 12. Updating to the latest RMM version \u00b6 Danger Do not attempt to manually edit the update script or any configuration files unless specifically told to by one of the developers. Since this software is completely self hosted and we have no access to your server, we have to assume you have not made any config changes to any of the files or services on your server, and the update script will assume this. You should also never attempt to automate running the update script via cron. The update script will update itself if needed to the latest version when you run it, and then prompt you to run it again. Sometimes, manual intervention will be required during an update in the form of yes/no prompts, so attempting to automate this will ignore these prompts and cause your installation to break. SSH into your server as the user you created during install (eg tactical ). Danger Never run any update scripts or commands as the root user. This will mess up permissions and break your installation. Question You have a backup , right? You've reviewed all release notes between your current version and the latest version, right? Download the update script and run it: wget -N https://raw.githubusercontent.com/amidaware/tacticalrmm/master/update.sh chmod +x update.sh ./update.sh If you are already on the latest version, the update script will notify you of this and return immediately. You can pass the optional --force flag to the update script to forcefully run through an update, which will bypass the check for latest version. wget -N https://raw.githubusercontent.com/amidaware/tacticalrmm/master/update.sh chmod +x update.sh ./update.sh --force This is useful for a botched update that might have not completed fully. The update script will also fix any permissions that might have gotten messed up during a botched update, or if you accidentally ran the update script as the root user. Warning Do not attempt to manually update MeshCentral to a newer version. You should let the update.sh script handle this for you. The developers will test MeshCentral and make sure integration does not break before bumping the mesh version. Keeping your SSL certificates up to date \u00b6 Let's Encrypt Certs BYO (Bring Your Own) Wildcard Certs Info Currently, the update script does not automatically renew your Let's Encrypt wildcard certificate, which expires every 3 months, since this is non-trivial to automate using the DNS TXT record method. Update SSL: To renew and update your Let's Encrypt wildcard SSL certificate, run the following command, replacing example.com with your domain and admin@example.com with your email: sudo certbot certonly --manual -d *.example.com --agree-tos --no-bootstrap --preferred-challenges dns -m admin@example.com --no-eff-email Same instructions as during install for verifying the TXT record has propagated before hitting Enter . You're not done yet, keep reading! After renewing the certificate, it still needs to be applied to Tactical RMM. Now run the update.sh script, passing it the --force flag: ./update.sh --force Replace the certificate and private key at the paths chosen during installation. Ensure they are readable by the Tactical Linux user. Restart the necessary services to apply the changes: sudo systemctl restart nginx meshcentral rmm daphne Video Walkthru \u00b6 Update FAQ \u00b6 Based on years of feedback, if your server was working, you updated...and now it's not working you probably did one of these things: Not running certbot with the correct linux username (the one you installed TRMM with) Didn't put the *. in front of your domain name in the certbot command (or other certbot command typo). You didn't do-release-upgrade did you? Running an #unsupported proxy and assumed your reverse proxy was the only cert you needed to update?","title":"Updating the RMM"},{"location":"update_server/#updating-the-rmm","text":"Keeping your Linux server up to date Updating to the latest RMM version Keeping your Let's Encrypt certificate up to date Video Walkthru","title":"Updating the RMM"},{"location":"update_server/#keeping-your-linux-server-up-to-date","text":"You should periodically run sudo apt update and sudo apt -y upgrade to keep your server up to date. Other than this, you should avoid making any changes to your server and let the update.sh script handle everything else for you. Danger Do NOT attempt in-place OS upgrades, such as trying to in-place upgrade from Debian 11 to 12. You will break your server! Instead, you must backup and restore to the new OS. Backup/restore functionality supports transition not only between different operating systems but also between architectures! For instance, you can back up an Ubuntu 20.04 system on an x86 architecture and restore it to an Oracle Cloud Free Tier ARM architecture running Debian 12.","title":"Keeping your Linux server up to date"},{"location":"update_server/#updating-to-the-latest-rmm-version","text":"Danger Do not attempt to manually edit the update script or any configuration files unless specifically told to by one of the developers. Since this software is completely self hosted and we have no access to your server, we have to assume you have not made any config changes to any of the files or services on your server, and the update script will assume this. You should also never attempt to automate running the update script via cron. The update script will update itself if needed to the latest version when you run it, and then prompt you to run it again. Sometimes, manual intervention will be required during an update in the form of yes/no prompts, so attempting to automate this will ignore these prompts and cause your installation to break. SSH into your server as the user you created during install (eg tactical ). Danger Never run any update scripts or commands as the root user. This will mess up permissions and break your installation. Question You have a backup , right? You've reviewed all release notes between your current version and the latest version, right? Download the update script and run it: wget -N https://raw.githubusercontent.com/amidaware/tacticalrmm/master/update.sh chmod +x update.sh ./update.sh If you are already on the latest version, the update script will notify you of this and return immediately. You can pass the optional --force flag to the update script to forcefully run through an update, which will bypass the check for latest version. wget -N https://raw.githubusercontent.com/amidaware/tacticalrmm/master/update.sh chmod +x update.sh ./update.sh --force This is useful for a botched update that might have not completed fully. The update script will also fix any permissions that might have gotten messed up during a botched update, or if you accidentally ran the update script as the root user. Warning Do not attempt to manually update MeshCentral to a newer version. You should let the update.sh script handle this for you. The developers will test MeshCentral and make sure integration does not break before bumping the mesh version.","title":"Updating to the latest RMM version"},{"location":"update_server/#keeping-your-ssl-certificates-up-to-date","text":"Let's Encrypt Certs BYO (Bring Your Own) Wildcard Certs Info Currently, the update script does not automatically renew your Let's Encrypt wildcard certificate, which expires every 3 months, since this is non-trivial to automate using the DNS TXT record method. Update SSL: To renew and update your Let's Encrypt wildcard SSL certificate, run the following command, replacing example.com with your domain and admin@example.com with your email: sudo certbot certonly --manual -d *.example.com --agree-tos --no-bootstrap --preferred-challenges dns -m admin@example.com --no-eff-email Same instructions as during install for verifying the TXT record has propagated before hitting Enter . You're not done yet, keep reading! After renewing the certificate, it still needs to be applied to Tactical RMM. Now run the update.sh script, passing it the --force flag: ./update.sh --force Replace the certificate and private key at the paths chosen during installation. Ensure they are readable by the Tactical Linux user. Restart the necessary services to apply the changes: sudo systemctl restart nginx meshcentral rmm daphne","title":"Keeping your SSL certificates up to date"},{"location":"update_server/#video-walkthru","text":"","title":"Video Walkthru"},{"location":"update_server/#update-faq","text":"Based on years of feedback, if your server was working, you updated...and now it's not working you probably did one of these things: Not running certbot with the correct linux username (the one you installed TRMM with) Didn't put the *. in front of your domain name in the certbot command (or other certbot command typo). You didn't do-release-upgrade did you? Running an #unsupported proxy and assumed your reverse proxy was the only cert you needed to update?","title":"Update FAQ"},{"location":"ee/reporting/reporting_overview/","text":"Reporting Overview \u00b6 Released in TRMM v0.17.0 (Nov 1, 2023) The reporting addon allows you to access your Tactical RMM data and represent in the format of your choice. This could be a PDF file, a simple csv, or a complex interactive web dashboard. It is best to get started with using the shared templates and go from there (you can import these directly from the TRMM web UI with 1 click.) The pages below will help you get familiar with the terminology and the syntax. Check back here frequently in the coming days/weeks/months as we will be constantly updating and improving the Reporting docs and adding video tutorials. FAQ The Basics Base Templates Variables Data Queries Report Assets Tips and Tricks","title":"Overview"},{"location":"ee/reporting/reporting_overview/#reporting-overview","text":"Released in TRMM v0.17.0 (Nov 1, 2023) The reporting addon allows you to access your Tactical RMM data and represent in the format of your choice. This could be a PDF file, a simple csv, or a complex interactive web dashboard. It is best to get started with using the shared templates and go from there (you can import these directly from the TRMM web UI with 1 click.) The pages below will help you get familiar with the terminology and the syntax. Check back here frequently in the coming days/weeks/months as we will be constantly updating and improving the Reporting docs and adding video tutorials. FAQ The Basics Base Templates Variables Data Queries Report Assets Tips and Tricks","title":"Reporting Overview"},{"location":"ee/reporting/functions/examples/","text":"Example Reports \u00b6 Agent Uptime \u00b6 Import the Agent Uptime_By Client (html) report from the Shared Templates Report library Check at least one overdue item in agent settings Run report and enjoy! Windows 11 Upgrade Compatible list \u00b6 To get a Windows 10 upgrade to Windows 11 compatibility list you'll want to: Create an agent custom field Create an automation policy that applies to all your workstations Import one of the Windows 11 Compatible Reports Enjoy! Antivirus Report \u00b6 To get a report of the active Antivirus on an agent you'll want to: Create an agent custom field Clone Antivirus - Verify Status Community script and add the -customField Script arg Create an automation policy that applies to all your workstations Import one of the Antivirus Reports Enjoy! NOC Dashboard \u00b6 Got a TV? Load it up for the team! Want quick searchable agent status with more data? Load it locally! The Restrict Summary button is for only showing agents that are offline and have an overdue alert set (eg critical machines). If it's on a hands off device make sure you set the refresh every so it's reloading data regularly. Software Inventory \u00b6 Software Inventory_By Software Name Search for software, sort by different columns Software Report - Advanced DataTables","title":"- Examples"},{"location":"ee/reporting/functions/examples/#example-reports","text":"","title":"Example Reports"},{"location":"ee/reporting/functions/examples/#agent-uptime","text":"Import the Agent Uptime_By Client (html) report from the Shared Templates Report library Check at least one overdue item in agent settings Run report and enjoy!","title":"Agent Uptime"},{"location":"ee/reporting/functions/examples/#windows-11-upgrade-compatible-list","text":"To get a Windows 10 upgrade to Windows 11 compatibility list you'll want to: Create an agent custom field Create an automation policy that applies to all your workstations Import one of the Windows 11 Compatible Reports Enjoy!","title":"Windows 11 Upgrade Compatible list"},{"location":"ee/reporting/functions/examples/#antivirus-report","text":"To get a report of the active Antivirus on an agent you'll want to: Create an agent custom field Clone Antivirus - Verify Status Community script and add the -customField Script arg Create an automation policy that applies to all your workstations Import one of the Antivirus Reports Enjoy!","title":"Antivirus Report"},{"location":"ee/reporting/functions/examples/#noc-dashboard","text":"Got a TV? Load it up for the team! Want quick searchable agent status with more data? Load it locally! The Restrict Summary button is for only showing agents that are offline and have an overdue alert set (eg critical machines). If it's on a hands off device make sure you set the refresh every so it's reloading data regularly.","title":"NOC Dashboard"},{"location":"ee/reporting/functions/examples/#software-inventory","text":"Software Inventory_By Software Name Search for software, sort by different columns Software Report - Advanced DataTables","title":"Software Inventory"},{"location":"ee/reporting/functions/faq/","text":"Reporting FAQ \u00b6 Pricing \u00b6 Existing sponsors as of Oct 31, 2023: As a thank you for all your support and patience, you will get our Founders Edition perpetual reporting license which will be included in your existing sponsorship. To enable reporting, simply update your instance as you normally do and reporting will automatically be enabled. For all others, Reporting will be included for all Tier 2 and higher packages. Exceptions will be made for Non-Profits who will only require Tier 1. How do I enable reporting as a new sponsor? \u00b6 Make sure your server has an appropriate code signing token saved ( Settings > Code Signing). Run the update script with the --force flag (see instructions below for standard vs docker installs): Hard reload the web page. Make sure you use your browser's reload button to hard reload the page. Standard install Docker install cd ~ wget -N https://raw.githubusercontent.com/amidaware/tacticalrmm/master/update.sh chmod +x update.sh ./update.sh --force docker compose down docker compose up -d If there's a problem, open a ticket . How do I add charts/graphs to my report templates? \u00b6 A bug was discovered with the chart/graph implementation right before release and it had to be pulled. It wil be released in a future update.","title":"- FAQ"},{"location":"ee/reporting/functions/faq/#reporting-faq","text":"","title":"Reporting FAQ"},{"location":"ee/reporting/functions/faq/#pricing","text":"Existing sponsors as of Oct 31, 2023: As a thank you for all your support and patience, you will get our Founders Edition perpetual reporting license which will be included in your existing sponsorship. To enable reporting, simply update your instance as you normally do and reporting will automatically be enabled. For all others, Reporting will be included for all Tier 2 and higher packages. Exceptions will be made for Non-Profits who will only require Tier 1.","title":"Pricing"},{"location":"ee/reporting/functions/faq/#how-do-i-enable-reporting-as-a-new-sponsor","text":"Make sure your server has an appropriate code signing token saved ( Settings > Code Signing). Run the update script with the --force flag (see instructions below for standard vs docker installs): Hard reload the web page. Make sure you use your browser's reload button to hard reload the page. Standard install Docker install cd ~ wget -N https://raw.githubusercontent.com/amidaware/tacticalrmm/master/update.sh chmod +x update.sh ./update.sh --force docker compose down docker compose up -d If there's a problem, open a ticket .","title":"How do I enable reporting as a new sponsor?"},{"location":"ee/reporting/functions/faq/#how-do-i-add-chartsgraphs-to-my-report-templates","text":"A bug was discovered with the chart/graph implementation right before release and it had to be pulled. It wil be released in a future update.","title":"How do I add charts/graphs to my report templates?"},{"location":"ee/reporting/functions/reporting_assets/","text":"Assets \u00b6 The Reports Manager gives the ability to upload and store static assets for use in any report. These can be used in html or PDF reports. In Report Templates, report assets are referenced by their unique ID so they can be renamed and moved without messing up the links. Managing Assets \u00b6 Open Reports Manager and click on the Report Assets button at the top. This will take you to the root of the reporting assets directory. You can drill into folders by double-clicking and there is a right-click menu to perform other operations. Adding folders \u00b6 Navigate to the directory you want to create the folder. Use the Add Folder button at the top and give the folder a name. The folder will show up in the list. Uploading assets \u00b6 Navigate to the directory you want to upload the file(s). Click on the Upload button at the top and a dialog will open. You can specify multiple assets and click Upload. If there is a name conflict, a set of random characters will be appended. Downloading assets \u00b6 Use the right-click menu item to download report assets. If you download a folder it will zip it prior to download. Downloading a file will download the file without zipping. Deleting assets. \u00b6 There are two ways to delete assets. You can use the right-click menu to select a folder or asset to delete. This will remove the folder and anything under it. There is also a bulk delete option by selecting multiple items. Select all of the items you want to delete and click the Bulk Actions button. Select Delete and confirm. Renaming assets \u00b6 Use the right-click menu to rename folders or files. If there is a name conflict, a set of random characters will be appended. Using assets in report templates \u00b6 In the Report Template editor, click on the Image button on the toolbar. Select the Report Assets radio button and browse to the asset you want to add. Select it and press insert. This will add a link with a url that looks something like asset://{uuid} . The reporting engine will resolve this url to the asset and generate an appropriate url based on if the report output format is HTML or PDF.","title":"- Assets"},{"location":"ee/reporting/functions/reporting_assets/#assets","text":"The Reports Manager gives the ability to upload and store static assets for use in any report. These can be used in html or PDF reports. In Report Templates, report assets are referenced by their unique ID so they can be renamed and moved without messing up the links.","title":"Assets"},{"location":"ee/reporting/functions/reporting_assets/#managing-assets","text":"Open Reports Manager and click on the Report Assets button at the top. This will take you to the root of the reporting assets directory. You can drill into folders by double-clicking and there is a right-click menu to perform other operations.","title":"Managing Assets"},{"location":"ee/reporting/functions/reporting_assets/#adding-folders","text":"Navigate to the directory you want to create the folder. Use the Add Folder button at the top and give the folder a name. The folder will show up in the list.","title":"Adding folders"},{"location":"ee/reporting/functions/reporting_assets/#uploading-assets","text":"Navigate to the directory you want to upload the file(s). Click on the Upload button at the top and a dialog will open. You can specify multiple assets and click Upload. If there is a name conflict, a set of random characters will be appended.","title":"Uploading assets"},{"location":"ee/reporting/functions/reporting_assets/#downloading-assets","text":"Use the right-click menu item to download report assets. If you download a folder it will zip it prior to download. Downloading a file will download the file without zipping.","title":"Downloading assets"},{"location":"ee/reporting/functions/reporting_assets/#deleting-assets","text":"There are two ways to delete assets. You can use the right-click menu to select a folder or asset to delete. This will remove the folder and anything under it. There is also a bulk delete option by selecting multiple items. Select all of the items you want to delete and click the Bulk Actions button. Select Delete and confirm.","title":"Deleting assets."},{"location":"ee/reporting/functions/reporting_assets/#renaming-assets","text":"Use the right-click menu to rename folders or files. If there is a name conflict, a set of random characters will be appended.","title":"Renaming assets"},{"location":"ee/reporting/functions/reporting_assets/#using-assets-in-report-templates","text":"In the Report Template editor, click on the Image button on the toolbar. Select the Report Assets radio button and browse to the asset you want to add. Select it and press insert. This will add a link with a url that looks something like asset://{uuid} . The reporting engine will resolve this url to the asset and generate an appropriate url based on if the report output format is HTML or PDF.","title":"Using assets in report templates"},{"location":"ee/reporting/functions/reporting_basetemplates/","text":"Base Templates \u00b6 Base Templates are used to apply the same formatting to multiple templates. The base template will declare one or more \"blocks\" that are then filled in by the child template. Base templates use the Jinja syntax for inheriting and extending. You can see the reference Here . Note Even though the examples for base templates are in html, you can use any format you want. Adding base templates \u00b6 To add a base template you can browse to Reports Manager > Base Templates > Add . From there you can create your base template in the editor and click save. Using a base template in your report template \u00b6 To use the base template, we will need to open up the Report Template editor ( Reports Manager > double-click on the template ), then select the base template from the dropdown. Note This will automatically add the {% extends ... %} tag at the beginning of the report template on the backend. If you are looking through the Jinja base template documentation, you can omit that line. Using blocks \u00b6 See below for a basic base template that specifies one block. < html > < head > < style > { {css } } </ style > </ head > < body > {% block content%}{% endblock %} </ body > </ html > In the template that is inheriting the base template above, you can fill in these blocks like so: {% block content%} This will show up between the <body> tags in the base template/ {% endblock %} Multiple blocks \u00b6 We can also fill in multiple blocks if they are specified in the base template. Any blocks that aren't used will just be blank. < html > < head > < style > { {css } } </ style > </ head > < body > < div id = \"header\" > {% block header %}{% endblock %} </ div > < div id = \"content\" > {% block content %}{% endblock %} </ div > < div id = \"footer\" > {% block footer %}{% endblock %} </ div > </ body > </ html > In the template, we just need to use the same blocks and it will fill in the data. {% block header %} This is the header {% endblock %} {% block content %} This is the content {% endblock %} {% block footer %} This is the footeer {% endblock %} Variable analysis \u00b6 In the Report Template editor, you can quickly see what blocks the base template has available. You can click on the > button in the top-left of the editor (Under the report name field) and at the top it will give a warning if it doesn't see the blocks listed. You can also click on the blocks to copy them to the clipboard to be pasted into the template.","title":"- Base Templates"},{"location":"ee/reporting/functions/reporting_basetemplates/#base-templates","text":"Base Templates are used to apply the same formatting to multiple templates. The base template will declare one or more \"blocks\" that are then filled in by the child template. Base templates use the Jinja syntax for inheriting and extending. You can see the reference Here . Note Even though the examples for base templates are in html, you can use any format you want.","title":"Base Templates"},{"location":"ee/reporting/functions/reporting_basetemplates/#adding-base-templates","text":"To add a base template you can browse to Reports Manager > Base Templates > Add . From there you can create your base template in the editor and click save.","title":"Adding base templates"},{"location":"ee/reporting/functions/reporting_basetemplates/#using-a-base-template-in-your-report-template","text":"To use the base template, we will need to open up the Report Template editor ( Reports Manager > double-click on the template ), then select the base template from the dropdown. Note This will automatically add the {% extends ... %} tag at the beginning of the report template on the backend. If you are looking through the Jinja base template documentation, you can omit that line.","title":"Using a base template in your report template"},{"location":"ee/reporting/functions/reporting_basetemplates/#using-blocks","text":"See below for a basic base template that specifies one block. < html > < head > < style > { {css } } </ style > </ head > < body > {% block content%}{% endblock %} </ body > </ html > In the template that is inheriting the base template above, you can fill in these blocks like so: {% block content%} This will show up between the <body> tags in the base template/ {% endblock %}","title":"Using blocks"},{"location":"ee/reporting/functions/reporting_basetemplates/#multiple-blocks","text":"We can also fill in multiple blocks if they are specified in the base template. Any blocks that aren't used will just be blank. < html > < head > < style > { {css } } </ style > </ head > < body > < div id = \"header\" > {% block header %}{% endblock %} </ div > < div id = \"content\" > {% block content %}{% endblock %} </ div > < div id = \"footer\" > {% block footer %}{% endblock %} </ div > </ body > </ html > In the template, we just need to use the same blocks and it will fill in the data. {% block header %} This is the header {% endblock %} {% block content %} This is the content {% endblock %} {% block footer %} This is the footeer {% endblock %}","title":"Multiple blocks"},{"location":"ee/reporting/functions/reporting_basetemplates/#variable-analysis","text":"In the Report Template editor, you can quickly see what blocks the base template has available. You can click on the > button in the top-left of the editor (Under the report name field) and at the top it will give a warning if it doesn't see the blocks listed. You can also click on the blocks to copy them to the clipboard to be pasted into the template.","title":"Variable analysis"},{"location":"ee/reporting/functions/reporting_basics/","text":"The Basics \u00b6 This template will show case the basics of reporting and also give some examples on how to use them. The toolbar along the top has various formating options for text and some useful functions for building dynamic reports. Reports are built using the Jinja templating engine. A reference guide and be found Here . Reporting formats \u00b6 You can write report templates using Markdown , HTML , or Plain Text . HTML and Markdown reports will look the same regardless of choice. Templates cannot be converted between formats, but it would be easy enough to do the conversion manually between markdown and HTML Markdown templates \u00b6 Do note that HTML is valid in markdown and should be used when the Markdown syntax doesn't do exactly what you need. An example would be for using the <table> tag. Also note that the markdown is rendered to HTML anyway. See this reference for Markdown syntax Plain text templates \u00b6 Plain Text templates are a great choice if you just want to generate some text without all of the formatting. This is very useful if you want a CSV export of some data. The toolbar \u00b6 The toolbar along the top of the editor provides some shortcuts for commonly used functions. Most of the buttons are used for text formatting, but there are some shortcuts for adding/editing data queries, base templates, and inserting charts and tables. Hovering over the button will display its function. Variables \u00b6 You can add in variables in the right editor pane. The variables pane can be toggled on/off using the vars button on the toolbar. The variables are adding in yaml format and can be referenced using {{variable_name}} in the template. The value of the variable will be substituted when the template is rendered. If the value of the variables is nested within an object, you can use dot notation to render the value like {{ object.variable_name }} . If there is a space in the name you can use {{ object[\"variable name\"] }} . Variable analysis \u00b6 With data sources and other dynamic sources, it can be difficult to view what the data looks like to use in report templates. With variable analysis, the query is ran and the available properties are returned. Click on the > arrow on the top left of the editor window (under the toolbar) to see the available properties from the variables section. You can then click on them to copy and you can paste them into the template. For array values, you can click the For loop button and paste in a Jinja for loop to easily loop over the properties. Data queries \u00b6 Data queries are a way to save commonly used queries and use them in templates. Data queries are added under the data_sources key in the variables section. If the key doesn't exist, it will be created Adding data queries \u00b6 Using the Add Data Query button on the toolbar, it will open the data query editor. This editor will let you know the valid syntax of the query and supports auto-complete. If you are stumped and need to know all of the values that are supported you can press Ctrl+Space and a dropdown will show. Once you add the query, it will be auto-inserted into the template. You can also add a data query from the Report Manager and open the Data Queries button along the top. This is the save function as using the toolbar, but it will save the query to allow it to be used in templates. Inserting saved data queries \u00b6 You can insert a saved data query using the Insert Data Query button on the toolbar. You just have to select the data query from the drop down and it will insert it into the template. Editing data queries \u00b6 You can edit data queries in the template by clicking the Edit Data Query button on the toolbar. This will list the currently added data_sources into a dropdown and allow you to edit them in the auto complete editor. Clicking save will replace the data query in the variables with the updated one. Report output format \u00b6 Reports can be output in either HTML , PDF , or in Plain Text format. HTML and Markdown Template types \u00b6 HTML and Markdown template types and be output in PDF or HTML formats. These template types don't support plain text output. Plain Text \u00b6 Plain text template types can be output in PDF or text. This template type doesn't support html output. Putting markdown or anything else in a plain text template will just output the same markdown. It isn't processed through the markdown library. CSS \u00b6 CSS can be embedded in the report template using the CSS tab on the top right on the report template editor. The CSS class can be referenced in the report template for styling. If you are using markdown, you can add ids and classes to html elements by using {#id_name} and {.class_name} beside the template. This will render an h1 html tag with an id of 'id-name' {#id-name} This will render an h1 html tag with a class of 'class-name' {.class-name} Report assets \u00b6 Assets can be served from your Tactical RMM instance. They will need to be uploaded to the Asset Manager first. This can be accessed from the Reporting Manager windows by clicking on the Report Assets. Once uploaded, click on the Image button on the toolbar and select the Report Asset radio button. From there you can click on an asset and go to Insert. Base templates \u00b6 Base Templates allow you to use the same report structure throughout multiple reports. The base template should be a full html document enclosed in an html tag. To specify content that should be overridden in the child template, you can use Jinja blocks in the base template. See this example in the Jinja documentation. You can add a base template from the report template editor by clicking the base button on the toolbar. When you select a base template (using the dropdown) in a report template, the extends block will automatically be inserted. You can click on the variable analysis button (top-left arrow) to see which blocks in the base template need to be overridden yet. Clicking on the block in variable analysis will copy the text to the clipboard and will need to be copied into the template. Template dependencies \u00b6 Sometimes you need to provide data during a reports runtime. This could be a specific client, a date range, etc. This is achievable by setting a template dependency using the Template Dependencies dropdown on the report editor. Then default values are Client, Site, and Agent. You can type additional values that are required for the report. In your variables and report template, you can use these dependencies by enclosing the same of the dependency like so: {{agent.hostname}} or {{client.name}} . For custom dependencies you can just type in {{ dependency_name }} . These are case sensitive. Report preview \u00b6 You can easily see what a report is going to look like by pressing the Preview button on the top right of the editor window. You can choose between an HTML or PDF output using the radio buttons. If you have report dependencies, a dialog box will show asking you to fill in the values that should be used to generate the report. Debug \u00b6 if you need additional info showing the values of the variables and the rendered HTML, you can check the debug button. This will show at the bottom of the preview window. Running a report \u00b6 Running a report can be done from the Reporting Manager by right-clicking on the report template and either running as an HTML or PDF report. The report will open up in a separate window. If there are report dependencies, a dialog will prompt to populate the values. You can save the URL or bookmark it to easily generate the same report without having to populate the dependencies. If you have a Client, Site, or Agent dependency specified in the report, you can also right-click on the respective entity in Tactical RMM and go to Integrations > Run Report . You can then specify a report output type and the entity that you right-clicked on will automatically populate as a dependency.","title":"- The Basics"},{"location":"ee/reporting/functions/reporting_basics/#the-basics","text":"This template will show case the basics of reporting and also give some examples on how to use them. The toolbar along the top has various formating options for text and some useful functions for building dynamic reports. Reports are built using the Jinja templating engine. A reference guide and be found Here .","title":"The Basics"},{"location":"ee/reporting/functions/reporting_basics/#reporting-formats","text":"You can write report templates using Markdown , HTML , or Plain Text . HTML and Markdown reports will look the same regardless of choice. Templates cannot be converted between formats, but it would be easy enough to do the conversion manually between markdown and HTML","title":"Reporting formats"},{"location":"ee/reporting/functions/reporting_basics/#markdown-templates","text":"Do note that HTML is valid in markdown and should be used when the Markdown syntax doesn't do exactly what you need. An example would be for using the <table> tag. Also note that the markdown is rendered to HTML anyway. See this reference for Markdown syntax","title":"Markdown templates"},{"location":"ee/reporting/functions/reporting_basics/#plain-text-templates","text":"Plain Text templates are a great choice if you just want to generate some text without all of the formatting. This is very useful if you want a CSV export of some data.","title":"Plain text templates"},{"location":"ee/reporting/functions/reporting_basics/#the-toolbar","text":"The toolbar along the top of the editor provides some shortcuts for commonly used functions. Most of the buttons are used for text formatting, but there are some shortcuts for adding/editing data queries, base templates, and inserting charts and tables. Hovering over the button will display its function.","title":"The toolbar"},{"location":"ee/reporting/functions/reporting_basics/#variables","text":"You can add in variables in the right editor pane. The variables pane can be toggled on/off using the vars button on the toolbar. The variables are adding in yaml format and can be referenced using {{variable_name}} in the template. The value of the variable will be substituted when the template is rendered. If the value of the variables is nested within an object, you can use dot notation to render the value like {{ object.variable_name }} . If there is a space in the name you can use {{ object[\"variable name\"] }} .","title":"Variables"},{"location":"ee/reporting/functions/reporting_basics/#variable-analysis","text":"With data sources and other dynamic sources, it can be difficult to view what the data looks like to use in report templates. With variable analysis, the query is ran and the available properties are returned. Click on the > arrow on the top left of the editor window (under the toolbar) to see the available properties from the variables section. You can then click on them to copy and you can paste them into the template. For array values, you can click the For loop button and paste in a Jinja for loop to easily loop over the properties.","title":"Variable analysis"},{"location":"ee/reporting/functions/reporting_basics/#data-queries","text":"Data queries are a way to save commonly used queries and use them in templates. Data queries are added under the data_sources key in the variables section. If the key doesn't exist, it will be created","title":"Data queries"},{"location":"ee/reporting/functions/reporting_basics/#adding-data-queries","text":"Using the Add Data Query button on the toolbar, it will open the data query editor. This editor will let you know the valid syntax of the query and supports auto-complete. If you are stumped and need to know all of the values that are supported you can press Ctrl+Space and a dropdown will show. Once you add the query, it will be auto-inserted into the template. You can also add a data query from the Report Manager and open the Data Queries button along the top. This is the save function as using the toolbar, but it will save the query to allow it to be used in templates.","title":"Adding data queries"},{"location":"ee/reporting/functions/reporting_basics/#inserting-saved-data-queries","text":"You can insert a saved data query using the Insert Data Query button on the toolbar. You just have to select the data query from the drop down and it will insert it into the template.","title":"Inserting saved data queries"},{"location":"ee/reporting/functions/reporting_basics/#editing-data-queries","text":"You can edit data queries in the template by clicking the Edit Data Query button on the toolbar. This will list the currently added data_sources into a dropdown and allow you to edit them in the auto complete editor. Clicking save will replace the data query in the variables with the updated one.","title":"Editing data queries"},{"location":"ee/reporting/functions/reporting_basics/#report-output-format","text":"Reports can be output in either HTML , PDF , or in Plain Text format.","title":"Report output format"},{"location":"ee/reporting/functions/reporting_basics/#html-and-markdown-template-types","text":"HTML and Markdown template types and be output in PDF or HTML formats. These template types don't support plain text output.","title":"HTML and Markdown Template types"},{"location":"ee/reporting/functions/reporting_basics/#plain-text","text":"Plain text template types can be output in PDF or text. This template type doesn't support html output. Putting markdown or anything else in a plain text template will just output the same markdown. It isn't processed through the markdown library.","title":"Plain Text"},{"location":"ee/reporting/functions/reporting_basics/#css","text":"CSS can be embedded in the report template using the CSS tab on the top right on the report template editor. The CSS class can be referenced in the report template for styling. If you are using markdown, you can add ids and classes to html elements by using {#id_name} and {.class_name} beside the template. This will render an h1 html tag with an id of 'id-name' {#id-name} This will render an h1 html tag with a class of 'class-name' {.class-name}","title":"CSS"},{"location":"ee/reporting/functions/reporting_basics/#report-assets","text":"Assets can be served from your Tactical RMM instance. They will need to be uploaded to the Asset Manager first. This can be accessed from the Reporting Manager windows by clicking on the Report Assets. Once uploaded, click on the Image button on the toolbar and select the Report Asset radio button. From there you can click on an asset and go to Insert.","title":"Report assets"},{"location":"ee/reporting/functions/reporting_basics/#base-templates","text":"Base Templates allow you to use the same report structure throughout multiple reports. The base template should be a full html document enclosed in an html tag. To specify content that should be overridden in the child template, you can use Jinja blocks in the base template. See this example in the Jinja documentation. You can add a base template from the report template editor by clicking the base button on the toolbar. When you select a base template (using the dropdown) in a report template, the extends block will automatically be inserted. You can click on the variable analysis button (top-left arrow) to see which blocks in the base template need to be overridden yet. Clicking on the block in variable analysis will copy the text to the clipboard and will need to be copied into the template.","title":"Base templates"},{"location":"ee/reporting/functions/reporting_basics/#template-dependencies","text":"Sometimes you need to provide data during a reports runtime. This could be a specific client, a date range, etc. This is achievable by setting a template dependency using the Template Dependencies dropdown on the report editor. Then default values are Client, Site, and Agent. You can type additional values that are required for the report. In your variables and report template, you can use these dependencies by enclosing the same of the dependency like so: {{agent.hostname}} or {{client.name}} . For custom dependencies you can just type in {{ dependency_name }} . These are case sensitive.","title":"Template dependencies"},{"location":"ee/reporting/functions/reporting_basics/#report-preview","text":"You can easily see what a report is going to look like by pressing the Preview button on the top right of the editor window. You can choose between an HTML or PDF output using the radio buttons. If you have report dependencies, a dialog box will show asking you to fill in the values that should be used to generate the report.","title":"Report preview"},{"location":"ee/reporting/functions/reporting_basics/#debug","text":"if you need additional info showing the values of the variables and the rendered HTML, you can check the debug button. This will show at the bottom of the preview window.","title":"Debug"},{"location":"ee/reporting/functions/reporting_basics/#running-a-report","text":"Running a report can be done from the Reporting Manager by right-clicking on the report template and either running as an HTML or PDF report. The report will open up in a separate window. If there are report dependencies, a dialog will prompt to populate the values. You can save the URL or bookmark it to easily generate the same report without having to populate the dependencies. If you have a Client, Site, or Agent dependency specified in the report, you can also right-click on the respective entity in Tactical RMM and go to Integrations > Run Report . You can then specify a report output type and the entity that you right-clicked on will automatically populate as a dependency.","title":"Running a report"},{"location":"ee/reporting/functions/reporting_dataqueries/","text":"Data Queries \u00b6 Introduction \u00b6 Data queries allow you to pull information from the Tactical RMM database to use in your Templates. Data queries are defined in the variables editor under the data_sources object. There is a predefined format that the data query must follow and it is defined using a JSON or yaml syntax. At it's simplest form, a data query just specifies a model. Doing this will pull all of the records and columns available from the table. This is an example of a data query that pulls all columns and rows from the sites table. data_sources : sites : model : site Once this is specified in the variables, you can use this data in the template like this: {{data_sources.sites}} . This will just dump the data into the template, but it isn't very useful. We can actually loop over this data query to format it using a Jinja for loop. {% for item in data_sources.sites %} {{item.name}} {% endfor %} This will print out the name of every site on a new line. We can have multiple data_sources specified also like so. data_sources : sites : model : site clients : model : client The same rules apply for the second query. You can reference it in your templates using {{data_sources.clients}} . Template Dependencies \u00b6 Template dependencies allow you to pass information to a report at runtime. This could be a client, site, or agent. These are covered in detail in the documentation, but just know that you can use template dependencies in your data queries by using the {{ }} in place of the data you want to replace. See the example below for a client dependency: data_sources : sites : model : site filter : client_id : '{{ client.id }}' Note Note that quotes are required around {{}} tags in the variables section Data Query Editor \u00b6 There is a data query editor that supports auto-complete so that you can more easily determine which columns and relations are available. It is recommended to always use this editor to avoid typos and errors when generating reports. You can open the query editor by going to Reports Manager > Data Queries > New or in the template editor by clicking Add Data Query or Edit Data Query toolbar button in the template. Do note that the Query Editor uses JSON syntax to provide the auto-complete functionality. You can either start typing to trigger the auto-complete list, or press the Ctrl+Alt key. Syntax \u00b6 Below are the allowed properties in a data query. You can combine these properties together is the same data query unless specifically noted. model - string \u00b6 The only required field for a data query is the model . This tells the system which database table to pull the data from. The available models are: Visualized version agent agentcustomfield agenthistory note alert auditlog automatedtask check checkhistory checkresult chocosoftware client clientcustomfield debuglog globalkvstore pendingaction policy site taskresult winupdate winupdatepolicy only - array of strings \u00b6 Only is useful for only pulling certain columns. This is recommended if you are pulling data from the agents table since services and wmi_detail columns are very large and can take a long time to run. A few examples of using only. data_sources : sites : model : site only : - name - failing_checks clients : model : client only : - name - failing_checks agents : model : agent only : - hostname - operating_system - plat defer \u00b6 To not load some fields by default to limit data from being pulled, unless it is needed later for some reason. custom_fields - array of strings \u00b6 This is only applicable to the client , site , and agent model. You can pass an array of strings with names of custom fields and it will inject them into the data. Lets say we have these custom fields configured: Client - custom_field - Custom Field 2 Site - another Custom Field - no_spaces Agent - agent_custom_field We can pull this data in a data query like this: data_sources : clients : model : client only : - name - failing_checks custom_fields : - custom_field - Custom Field 2 sites : model : site only : - name - failing_checks custom_fields : - another Custom Field - no_spaces agents : model : agent only : - hostname - operating_system - plat custom_fields : - agent_custom_field The custom field names are case sensitive and the custom field must be configured in the system or no custom data will be pulled. A custom_fields object is added to the data and is accessible in the template. You can access the custom field data for the clients data query like this: {% for item in data_source.clients %} {{ item.custom_fields.custom_field }} {{ item.custom_fields[\"Custom Field 2\"] }} {% endfor %} Note that you can't use dot notation for a property if it has spaces. See the above example for the Custom Field 2 property properties - array of strings \u00b6 This will allow injecting model @property fields into the data. The current supported fields are: Agent client timezone is_posix arch status checks pending_actions_count cpu_model graphics local_ips make_model physical_disks serial_number AgentCustomField value Alert assigned_agent site client get_result Policy is_default_server_policy is_default_workstation_policy Automated Task schedule Check readable_desc CheckResult history_info Client live_agent_count Site live_agent_count Client Custom Field value Site Custom Field value We can pull this data in a data query like this: data_sources : agents : model : agent only : - hostname - operating_system - plat properties : - status - is_posix - make_model - cpu_model checks : model : check properties : - readable_desc You can access the property data directly on the agent in the template like this: {% for item in data_source.agents %} {{ item.status }} {{ item.make_model }} {% endfor %} filter - object \u00b6 Using the filter property, you can filter the amount of rows that are returned. This is useful if you only want a agents for a particular client or site, or you only want agents tht are pending a reboot. See below for an example: data_sources : agents : model : agent only : - hostname - operating_system - plat - needs_reboot filter : needs_reboot : True This data query will only return agents that need a reboot. We can also add a second filter like so. data_sources : agents : model : agent only : - hostname - operating_system - plat - needs_reboot filter : needs_reboot : True plat : \"windows\" The above is just doing an equals comparison to make sure the rows match. You can also use other operations like greater than, contains, etc. data_sources : agents : model : agent only : - hostname - operating_system - plat - needs_reboot filter : operating_system__contains : \"22H2\" To use the contains filter, we need to append two underscores (_) and type in the field lookup. This just uses the django built in field lookups.A full list can be found Here exclude - object \u00b6 We can use this to exclude rows from our data. The same rules apply for filter apply here. (See above) Example data_sources : agents : model : agent only : - hostname - operating_system - plat - needs_reboot exclude : plat : \"linux\" limit - number \u00b6 This will limit the number of returned rows in the data. Example data_sources : agents : model : agent only : - hostname - operating_system - plat - needs_reboot limit : 400 get - boolean \u00b6 Instead of returning a list, the data query will attempt to return a single object. This is best used with a filter that guarantees a single row returned, i.e: filtering by id. This will error out if the query returns more than one object. Example data_sources : agent : model : agent only : - hostname - operating_system - plat - needs_reboot filter : agent_id : hjk1hj23hj23hkj2hjh3j2h3 get : true In the template, you can use the properties directly instead of looping {{data_sources.agent.hostname}} {{data_sources.agent.operating_system}} first - boolean \u00b6 This will return the first row in a table. This is guaranteed to always return one result. You can apply other properties (like filter or exclude) also to limit the data. Example data_sources : agent : model : agent only : - hostname - operating_system - plat - needs_reboot first : true In the template, you can use the properties directly instead of looping {{data_sources.agent.hostname}} {{data_sources.agent.operating_system}} count - boolean \u00b6 This allows you to return the number of rows found. Can be used with filter or exclude. Example data_sources : agent : model : agent only : - hostname - operating_system - plat - needs_reboot count : true order_by - string \u00b6 This allows you to sort/reorder the returned data based on a specific column. Putting a '-' before the column puts it in descending order and the default is ascending order Ascending Example data_sources : agent : model : agent only : - hostname - operating_system - plat - needs_reboot order_by : hostname Descending Example data_sources : agent : model : agent only : - hostname - operating_system - plat - needs_reboot order_by : -hostname csv - boolean | object \u00b6 This is a shorthand to return a string formatted as a csv. Example data_sources : agents : model : agent only : - hostname - operating_system - plat - needs_reboot - site__name - site__client__name filter : site__client__name : \"Client Name\" csv : true This will add a site__name and site__client__name column on the returned data. We use a double underscore every time we want to go to another table. The site column exists directly on the agents table. So in order to get the name (which resides on the sites table) we need to use the double underscore. Same thing with the client name. We need to go through the sites table in order to get the client name so we use another double underscore. Usage in template {{data_sources.agents}} Output will look something like: hostname,operating_system, plat,needs_reboot,site__name,site__client__name data,data,data,data,data,data You can also rename the columns by passing a mapping into csv like so: data_sources : agents : model : agent only : - hostname - operating_system - plat - needs_reboot - site__name - site__client__name filter : site__client__name : \"Client Name\" csv : hostname : Hostname operating_system : Operating System plat : Platform needs_reboot : Needs Reboot site__name : Site Name site__client__name : Client Name Which would return something like Hostname,Operating System,Platform,Needs Reboot,Site Name,Client Name data,data,data,data,data,data json - boolean \u00b6 This will return a json string representation of the object. This is useful if you are passing the data source to be processed by javascript. Example data_sources : agents : model : agent only : - hostname - operating_system - plat - needs_reboot - site__name - site__client__name filter : site__client__name : \"Client Name\" json : true Usage in template {{data_sources.agents}} Output will look something like: hostname,operating_system, plat,needs_reboot,site__name,site__client__name data,data,data,data,data,data Relations \u00b6 You can include columns from a related model by using the double underscore syntax. You may have a data query using the agents table, but want to include the Site name and the Client name. See the example below: data_sources : agents : model : agent only : - hostname - operating_system - plat - needs_reboot - site__name - site__client__name This will add a site__name and site__client__name column on the returned data. We use a double underscore every time we want to go to another table. The site column exists directly on the agents table. So in order to get the name (which resides on the sites table) we need to use the double underscore. Same thing with the client name. We need to go through the sites table in order to get the client name so we use another double underscore. All available combinations are listed in the query editor To display these columns in the template you can do this: This will return a json string representation of the object. This is useful if you are passing the data source to be processed by javascript or you just want to create your own custom api endpoint. {% for item in data_source.agents %} {{ item.site__name }} {{ item.site__client__name }} {% endfor %} We can also filter based on relations. See below: data_sources : agents : model : agent only : - hostname - operating_system - plat - needs_reboot - site__name - site__client__name filter : site__client__name : \"Client Name\"","title":"- Data Queries"},{"location":"ee/reporting/functions/reporting_dataqueries/#data-queries","text":"","title":"Data Queries"},{"location":"ee/reporting/functions/reporting_dataqueries/#introduction","text":"Data queries allow you to pull information from the Tactical RMM database to use in your Templates. Data queries are defined in the variables editor under the data_sources object. There is a predefined format that the data query must follow and it is defined using a JSON or yaml syntax. At it's simplest form, a data query just specifies a model. Doing this will pull all of the records and columns available from the table. This is an example of a data query that pulls all columns and rows from the sites table. data_sources : sites : model : site Once this is specified in the variables, you can use this data in the template like this: {{data_sources.sites}} . This will just dump the data into the template, but it isn't very useful. We can actually loop over this data query to format it using a Jinja for loop. {% for item in data_sources.sites %} {{item.name}} {% endfor %} This will print out the name of every site on a new line. We can have multiple data_sources specified also like so. data_sources : sites : model : site clients : model : client The same rules apply for the second query. You can reference it in your templates using {{data_sources.clients}} .","title":"Introduction"},{"location":"ee/reporting/functions/reporting_dataqueries/#template-dependencies","text":"Template dependencies allow you to pass information to a report at runtime. This could be a client, site, or agent. These are covered in detail in the documentation, but just know that you can use template dependencies in your data queries by using the {{ }} in place of the data you want to replace. See the example below for a client dependency: data_sources : sites : model : site filter : client_id : '{{ client.id }}' Note Note that quotes are required around {{}} tags in the variables section","title":"Template Dependencies"},{"location":"ee/reporting/functions/reporting_dataqueries/#data-query-editor","text":"There is a data query editor that supports auto-complete so that you can more easily determine which columns and relations are available. It is recommended to always use this editor to avoid typos and errors when generating reports. You can open the query editor by going to Reports Manager > Data Queries > New or in the template editor by clicking Add Data Query or Edit Data Query toolbar button in the template. Do note that the Query Editor uses JSON syntax to provide the auto-complete functionality. You can either start typing to trigger the auto-complete list, or press the Ctrl+Alt key.","title":"Data Query Editor"},{"location":"ee/reporting/functions/reporting_dataqueries/#syntax","text":"Below are the allowed properties in a data query. You can combine these properties together is the same data query unless specifically noted.","title":"Syntax"},{"location":"ee/reporting/functions/reporting_dataqueries/#model-string","text":"The only required field for a data query is the model . This tells the system which database table to pull the data from. The available models are: Visualized version agent agentcustomfield agenthistory note alert auditlog automatedtask check checkhistory checkresult chocosoftware client clientcustomfield debuglog globalkvstore pendingaction policy site taskresult winupdate winupdatepolicy","title":"model - string"},{"location":"ee/reporting/functions/reporting_dataqueries/#only-array-of-strings","text":"Only is useful for only pulling certain columns. This is recommended if you are pulling data from the agents table since services and wmi_detail columns are very large and can take a long time to run. A few examples of using only. data_sources : sites : model : site only : - name - failing_checks clients : model : client only : - name - failing_checks agents : model : agent only : - hostname - operating_system - plat","title":"only - array of strings"},{"location":"ee/reporting/functions/reporting_dataqueries/#defer","text":"To not load some fields by default to limit data from being pulled, unless it is needed later for some reason.","title":"defer"},{"location":"ee/reporting/functions/reporting_dataqueries/#custom_fields-array-of-strings","text":"This is only applicable to the client , site , and agent model. You can pass an array of strings with names of custom fields and it will inject them into the data. Lets say we have these custom fields configured: Client - custom_field - Custom Field 2 Site - another Custom Field - no_spaces Agent - agent_custom_field We can pull this data in a data query like this: data_sources : clients : model : client only : - name - failing_checks custom_fields : - custom_field - Custom Field 2 sites : model : site only : - name - failing_checks custom_fields : - another Custom Field - no_spaces agents : model : agent only : - hostname - operating_system - plat custom_fields : - agent_custom_field The custom field names are case sensitive and the custom field must be configured in the system or no custom data will be pulled. A custom_fields object is added to the data and is accessible in the template. You can access the custom field data for the clients data query like this: {% for item in data_source.clients %} {{ item.custom_fields.custom_field }} {{ item.custom_fields[\"Custom Field 2\"] }} {% endfor %} Note that you can't use dot notation for a property if it has spaces. See the above example for the Custom Field 2 property","title":"custom_fields - array of strings"},{"location":"ee/reporting/functions/reporting_dataqueries/#properties-array-of-strings","text":"This will allow injecting model @property fields into the data. The current supported fields are: Agent client timezone is_posix arch status checks pending_actions_count cpu_model graphics local_ips make_model physical_disks serial_number AgentCustomField value Alert assigned_agent site client get_result Policy is_default_server_policy is_default_workstation_policy Automated Task schedule Check readable_desc CheckResult history_info Client live_agent_count Site live_agent_count Client Custom Field value Site Custom Field value We can pull this data in a data query like this: data_sources : agents : model : agent only : - hostname - operating_system - plat properties : - status - is_posix - make_model - cpu_model checks : model : check properties : - readable_desc You can access the property data directly on the agent in the template like this: {% for item in data_source.agents %} {{ item.status }} {{ item.make_model }} {% endfor %}","title":"properties - array of strings"},{"location":"ee/reporting/functions/reporting_dataqueries/#filter-object","text":"Using the filter property, you can filter the amount of rows that are returned. This is useful if you only want a agents for a particular client or site, or you only want agents tht are pending a reboot. See below for an example: data_sources : agents : model : agent only : - hostname - operating_system - plat - needs_reboot filter : needs_reboot : True This data query will only return agents that need a reboot. We can also add a second filter like so. data_sources : agents : model : agent only : - hostname - operating_system - plat - needs_reboot filter : needs_reboot : True plat : \"windows\" The above is just doing an equals comparison to make sure the rows match. You can also use other operations like greater than, contains, etc. data_sources : agents : model : agent only : - hostname - operating_system - plat - needs_reboot filter : operating_system__contains : \"22H2\" To use the contains filter, we need to append two underscores (_) and type in the field lookup. This just uses the django built in field lookups.A full list can be found Here","title":"filter - object"},{"location":"ee/reporting/functions/reporting_dataqueries/#exclude-object","text":"We can use this to exclude rows from our data. The same rules apply for filter apply here. (See above) Example data_sources : agents : model : agent only : - hostname - operating_system - plat - needs_reboot exclude : plat : \"linux\"","title":"exclude - object"},{"location":"ee/reporting/functions/reporting_dataqueries/#limit-number","text":"This will limit the number of returned rows in the data. Example data_sources : agents : model : agent only : - hostname - operating_system - plat - needs_reboot limit : 400","title":"limit - number"},{"location":"ee/reporting/functions/reporting_dataqueries/#get-boolean","text":"Instead of returning a list, the data query will attempt to return a single object. This is best used with a filter that guarantees a single row returned, i.e: filtering by id. This will error out if the query returns more than one object. Example data_sources : agent : model : agent only : - hostname - operating_system - plat - needs_reboot filter : agent_id : hjk1hj23hj23hkj2hjh3j2h3 get : true In the template, you can use the properties directly instead of looping {{data_sources.agent.hostname}} {{data_sources.agent.operating_system}}","title":"get - boolean"},{"location":"ee/reporting/functions/reporting_dataqueries/#first-boolean","text":"This will return the first row in a table. This is guaranteed to always return one result. You can apply other properties (like filter or exclude) also to limit the data. Example data_sources : agent : model : agent only : - hostname - operating_system - plat - needs_reboot first : true In the template, you can use the properties directly instead of looping {{data_sources.agent.hostname}} {{data_sources.agent.operating_system}}","title":"first - boolean"},{"location":"ee/reporting/functions/reporting_dataqueries/#count-boolean","text":"This allows you to return the number of rows found. Can be used with filter or exclude. Example data_sources : agent : model : agent only : - hostname - operating_system - plat - needs_reboot count : true","title":"count - boolean"},{"location":"ee/reporting/functions/reporting_dataqueries/#order_by-string","text":"This allows you to sort/reorder the returned data based on a specific column. Putting a '-' before the column puts it in descending order and the default is ascending order Ascending Example data_sources : agent : model : agent only : - hostname - operating_system - plat - needs_reboot order_by : hostname Descending Example data_sources : agent : model : agent only : - hostname - operating_system - plat - needs_reboot order_by : -hostname","title":"order_by - string"},{"location":"ee/reporting/functions/reporting_dataqueries/#csv-boolean-object","text":"This is a shorthand to return a string formatted as a csv. Example data_sources : agents : model : agent only : - hostname - operating_system - plat - needs_reboot - site__name - site__client__name filter : site__client__name : \"Client Name\" csv : true This will add a site__name and site__client__name column on the returned data. We use a double underscore every time we want to go to another table. The site column exists directly on the agents table. So in order to get the name (which resides on the sites table) we need to use the double underscore. Same thing with the client name. We need to go through the sites table in order to get the client name so we use another double underscore. Usage in template {{data_sources.agents}} Output will look something like: hostname,operating_system, plat,needs_reboot,site__name,site__client__name data,data,data,data,data,data You can also rename the columns by passing a mapping into csv like so: data_sources : agents : model : agent only : - hostname - operating_system - plat - needs_reboot - site__name - site__client__name filter : site__client__name : \"Client Name\" csv : hostname : Hostname operating_system : Operating System plat : Platform needs_reboot : Needs Reboot site__name : Site Name site__client__name : Client Name Which would return something like Hostname,Operating System,Platform,Needs Reboot,Site Name,Client Name data,data,data,data,data,data","title":"csv - boolean | object"},{"location":"ee/reporting/functions/reporting_dataqueries/#json-boolean","text":"This will return a json string representation of the object. This is useful if you are passing the data source to be processed by javascript. Example data_sources : agents : model : agent only : - hostname - operating_system - plat - needs_reboot - site__name - site__client__name filter : site__client__name : \"Client Name\" json : true Usage in template {{data_sources.agents}} Output will look something like: hostname,operating_system, plat,needs_reboot,site__name,site__client__name data,data,data,data,data,data","title":"json - boolean"},{"location":"ee/reporting/functions/reporting_dataqueries/#relations","text":"You can include columns from a related model by using the double underscore syntax. You may have a data query using the agents table, but want to include the Site name and the Client name. See the example below: data_sources : agents : model : agent only : - hostname - operating_system - plat - needs_reboot - site__name - site__client__name This will add a site__name and site__client__name column on the returned data. We use a double underscore every time we want to go to another table. The site column exists directly on the agents table. So in order to get the name (which resides on the sites table) we need to use the double underscore. Same thing with the client name. We need to go through the sites table in order to get the client name so we use another double underscore. All available combinations are listed in the query editor To display these columns in the template you can do this: This will return a json string representation of the object. This is useful if you are passing the data source to be processed by javascript or you just want to create your own custom api endpoint. {% for item in data_source.agents %} {{ item.site__name }} {{ item.site__client__name }} {% endfor %} We can also filter based on relations. See below: data_sources : agents : model : agent only : - hostname - operating_system - plat - needs_reboot - site__name - site__client__name filter : site__client__name : \"Client Name\"","title":"Relations"},{"location":"ee/reporting/functions/reporting_variables/","text":"Variables \u00b6 Variables provide a way to enrich your report with data. Variables are entered using YAML syntax and can be edited directly in the template by using the variables editor on the right. Everything with YAML is case-sensitive, so make sure to check for typos! YAML syntax and features reference can be found Here Some sample variables and how to use them in the template \u00b6 Variables title : Title Name listOfData : [ 12 , 13 , 14 ] an_object : key : value key2 : value2 key with a space : value3 an_array_of_objects : - key : value key2 : value2 the space : value3 - key : value key2 : value2 the space : value3 Markdown Template # {{title}} ## A list of numbers {% for item in listOfData %} * {{item}} {% endfor %} ## List the object keys * {{an_object.key}} * {{an_object.key2}} * {{an_object[\"key with a space\"]}} ## List of objects {% for item in an_array_of_objects %} * {{item.key}} * {{item.key2}} * {{item[\"the space\"]}} {% endfor %} Rendered Output # Title Name ## List of numbers * 12 * 13 * 14 # List the object keys * value * value2 * value3 ## List of objects * value * value2 * value3 * value * value2 * value3 Dependencies \u00b6 Dependencies offer a way to provide information to the templating engine at the reports runtime. The three built in dependencies are client , site , and agent . The dependencies dropdown also allows for custom values to be entered. When you run the report, a dialog box will show that requires you to provide the values for the dependencies. If you ran the report from a right-click context menu item for client, site, or agent, the dependency will auto-populate in the report. Dependencies are actually merged into the variables behind the scenes, so any properties on the dependency are available to the template to use. Built-in dependencies \u00b6 You can access the built-in dependencies directly in the template using {{client.name}}, {{agent.hostname}}, etc. Custom dependencies \u00b6 You can type in custom dependencies in the dropdown to prompt for other information at report runtime. Custom dependencies only support string values at this time and are referenced in the template using {{ custom_dependency_name }}. Using Template Dependencies in variables \u00b6 Note: You can use dependencies in data queries to filter data. See Data Queries You can also use dependencies in the variables section. The syntax is still the same as using them in the template, but you need to make sure that the {{}} is surrounded with quotes. Example with client and a custom_dep dependency title : '{{client.name}} Summary' dependency : '{{custom_dep}} some value' Variable Analysis \u00b6 If you want to see what your data will look like and how to use it in your template, you can click on the > icon on the top-left of the editor windows. (Under the Template Name field). This will run the report template variables server-side and send the results back. This is really useful for data queries and other dynamic information that isn't immediately apparent. You can also click on the property to copy the template tag to the clipboard. There is also a button for arrays to generate a for loop. You can clip in the loop button and it will put the text in the clipboard to be pasted into the template. If you are using dependencies, you will need to click on the Preview tab and fill in the dependencies before the variables analysis will run. Python modules available in template \u00b6 datetime \u00b6 See https://docs.python.org/3/library/datetime.html for all properties and functions. Formatted dates use strftime {{ datetime . datetime . fromtimestamp ( item . boot_time , ZoneInfo ( 'America/New_York' )) . strftime ( '%Y-%m- %d %H:%M:%S' ) }} datetime.datetime \u00b6 Example usage in template {{ datetime.datetime.now() }} datetime.date \u00b6 Example usage in template {{ datetime.date.today() }} datetime.timedelta \u00b6 Example usage in template {{ datetime.datetime.now() - datetime.timedelta(days=30) }} re \u00b6 See https://docs.python.org/3/library/re.html for all properties and functions Example usage in template {% set matches = re.search('this', 'inthisstring') %} {{matches}} ZoneInfo \u00b6 See https://docs.python.org/3/library/zoneinfo.html for all properties and functions Example usage in template {% for item in data_sources.agentsList %} {% set pst_zone = ZoneInfo('America/Los_Angeles') %} {% set last_seen_pst = item.last_seen.astimezone(pst_zone) %} Last seen in PST: {{ last_seen_pst.strftime('%Y-%m-%d %H:%M:%S %Z') }} {% endfor %} Custom jinja filters \u00b6 In addition to the builtin jinja filters , TRMM also ships with custom jijna filters. We can write custom filters based on your requests so please ask one of the developers in Discord or in this github issue if you would like a custom filter written to make parsing data in templates easier for you. The list of custom jijna filters are listed here and here are video examples of how to use them: as_tz: local_ips: Custom processors \u00b6 Custom processors are provided to the yaml parser and allow shortcuts or provide functionality that isn't possible using the template and variables alone. !now \u00b6 Provides a timestamp at the report runtime. Example report_run_timestamp : !now You can also get a timestamp in the future or the past by passing a parameter. The supported time intervals are: weeks days hours minutes seconds microseconds If you want a timestamp in the future 5 days you would do: five_days_from_now : !now days=5 If you want a timestamp 4 hours in the past you would do: four_hours_ago : !now hours=-4 You can also specify a value from a dependency. Note: The !now must be outside of the quotes. last_seen_time : !now 'hours=-{{last_seen}}' If we ran the report and put in 5 it would output last_seen_time : !!now 'hours=-5'","title":"- Variables"},{"location":"ee/reporting/functions/reporting_variables/#variables","text":"Variables provide a way to enrich your report with data. Variables are entered using YAML syntax and can be edited directly in the template by using the variables editor on the right. Everything with YAML is case-sensitive, so make sure to check for typos! YAML syntax and features reference can be found Here","title":"Variables"},{"location":"ee/reporting/functions/reporting_variables/#some-sample-variables-and-how-to-use-them-in-the-template","text":"Variables title : Title Name listOfData : [ 12 , 13 , 14 ] an_object : key : value key2 : value2 key with a space : value3 an_array_of_objects : - key : value key2 : value2 the space : value3 - key : value key2 : value2 the space : value3 Markdown Template # {{title}} ## A list of numbers {% for item in listOfData %} * {{item}} {% endfor %} ## List the object keys * {{an_object.key}} * {{an_object.key2}} * {{an_object[\"key with a space\"]}} ## List of objects {% for item in an_array_of_objects %} * {{item.key}} * {{item.key2}} * {{item[\"the space\"]}} {% endfor %} Rendered Output # Title Name ## List of numbers * 12 * 13 * 14 # List the object keys * value * value2 * value3 ## List of objects * value * value2 * value3 * value * value2 * value3","title":"Some sample variables and how to use them in the template"},{"location":"ee/reporting/functions/reporting_variables/#dependencies","text":"Dependencies offer a way to provide information to the templating engine at the reports runtime. The three built in dependencies are client , site , and agent . The dependencies dropdown also allows for custom values to be entered. When you run the report, a dialog box will show that requires you to provide the values for the dependencies. If you ran the report from a right-click context menu item for client, site, or agent, the dependency will auto-populate in the report. Dependencies are actually merged into the variables behind the scenes, so any properties on the dependency are available to the template to use.","title":"Dependencies"},{"location":"ee/reporting/functions/reporting_variables/#built-in-dependencies","text":"You can access the built-in dependencies directly in the template using {{client.name}}, {{agent.hostname}}, etc.","title":"Built-in dependencies"},{"location":"ee/reporting/functions/reporting_variables/#custom-dependencies","text":"You can type in custom dependencies in the dropdown to prompt for other information at report runtime. Custom dependencies only support string values at this time and are referenced in the template using {{ custom_dependency_name }}.","title":"Custom dependencies"},{"location":"ee/reporting/functions/reporting_variables/#using-template-dependencies-in-variables","text":"Note: You can use dependencies in data queries to filter data. See Data Queries You can also use dependencies in the variables section. The syntax is still the same as using them in the template, but you need to make sure that the {{}} is surrounded with quotes. Example with client and a custom_dep dependency title : '{{client.name}} Summary' dependency : '{{custom_dep}} some value'","title":"Using Template Dependencies in variables"},{"location":"ee/reporting/functions/reporting_variables/#variable-analysis","text":"If you want to see what your data will look like and how to use it in your template, you can click on the > icon on the top-left of the editor windows. (Under the Template Name field). This will run the report template variables server-side and send the results back. This is really useful for data queries and other dynamic information that isn't immediately apparent. You can also click on the property to copy the template tag to the clipboard. There is also a button for arrays to generate a for loop. You can clip in the loop button and it will put the text in the clipboard to be pasted into the template. If you are using dependencies, you will need to click on the Preview tab and fill in the dependencies before the variables analysis will run.","title":"Variable Analysis"},{"location":"ee/reporting/functions/reporting_variables/#python-modules-available-in-template","text":"","title":"Python modules available in template"},{"location":"ee/reporting/functions/reporting_variables/#datetime","text":"See https://docs.python.org/3/library/datetime.html for all properties and functions. Formatted dates use strftime {{ datetime . datetime . fromtimestamp ( item . boot_time , ZoneInfo ( 'America/New_York' )) . strftime ( '%Y-%m- %d %H:%M:%S' ) }}","title":"datetime"},{"location":"ee/reporting/functions/reporting_variables/#datetimedatetime","text":"Example usage in template {{ datetime.datetime.now() }}","title":"datetime.datetime"},{"location":"ee/reporting/functions/reporting_variables/#datetimedate","text":"Example usage in template {{ datetime.date.today() }}","title":"datetime.date"},{"location":"ee/reporting/functions/reporting_variables/#datetimetimedelta","text":"Example usage in template {{ datetime.datetime.now() - datetime.timedelta(days=30) }}","title":"datetime.timedelta"},{"location":"ee/reporting/functions/reporting_variables/#re","text":"See https://docs.python.org/3/library/re.html for all properties and functions Example usage in template {% set matches = re.search('this', 'inthisstring') %} {{matches}}","title":"re"},{"location":"ee/reporting/functions/reporting_variables/#zoneinfo","text":"See https://docs.python.org/3/library/zoneinfo.html for all properties and functions Example usage in template {% for item in data_sources.agentsList %} {% set pst_zone = ZoneInfo('America/Los_Angeles') %} {% set last_seen_pst = item.last_seen.astimezone(pst_zone) %} Last seen in PST: {{ last_seen_pst.strftime('%Y-%m-%d %H:%M:%S %Z') }} {% endfor %}","title":"ZoneInfo"},{"location":"ee/reporting/functions/reporting_variables/#custom-jinja-filters","text":"In addition to the builtin jinja filters , TRMM also ships with custom jijna filters. We can write custom filters based on your requests so please ask one of the developers in Discord or in this github issue if you would like a custom filter written to make parsing data in templates easier for you. The list of custom jijna filters are listed here and here are video examples of how to use them: as_tz: local_ips:","title":"Custom jinja filters"},{"location":"ee/reporting/functions/reporting_variables/#custom-processors","text":"Custom processors are provided to the yaml parser and allow shortcuts or provide functionality that isn't possible using the template and variables alone.","title":"Custom processors"},{"location":"ee/reporting/functions/reporting_variables/#now","text":"Provides a timestamp at the report runtime. Example report_run_timestamp : !now You can also get a timestamp in the future or the past by passing a parameter. The supported time intervals are: weeks days hours minutes seconds microseconds If you want a timestamp in the future 5 days you would do: five_days_from_now : !now days=5 If you want a timestamp 4 hours in the past you would do: four_hours_ago : !now hours=-4 You can also specify a value from a dependency. Note: The !now must be outside of the quotes. last_seen_time : !now 'hours=-{{last_seen}}' If we ran the report and put in 5 it would output last_seen_time : !!now 'hours=-5'","title":"!now"},{"location":"ee/reporting/functions/tipsntricks/","text":"Tips n' Tricks \u00b6 Formatting matters \u00b6 Make sure your tabs are at the right level. Quickly generate reports from client/site tree \u00b6 Right click on a client or site to quickly run/download a report. Change PDF Orientation to Landscape \u00b6 Making API Calls from Within a Report Template \u00b6 If you plan to make API calls (e.g., using axios or fetch) from within a report template, you need to configure additional settings to ensure proper functionality: Append the following code to /rmm/api/tacticalrmm/tacticalrmm/local_settings.py : from corsheaders.defaults import default_headers CORS_ALLOW_HEADERS = ( * default_headers , \"x-api-key\" , ) Then restart the rmm service: sudo systemctl restart rmm","title":"- Tips n' Tricks"},{"location":"ee/reporting/functions/tipsntricks/#tips-n-tricks","text":"","title":"Tips n' Tricks"},{"location":"ee/reporting/functions/tipsntricks/#formatting-matters","text":"Make sure your tabs are at the right level.","title":"Formatting matters"},{"location":"ee/reporting/functions/tipsntricks/#quickly-generate-reports-from-clientsite-tree","text":"Right click on a client or site to quickly run/download a report.","title":"Quickly generate reports from client/site tree"},{"location":"ee/reporting/functions/tipsntricks/#change-pdf-orientation-to-landscape","text":"","title":"Change PDF Orientation to Landscape"},{"location":"ee/reporting/functions/tipsntricks/#making-api-calls-from-within-a-report-template","text":"If you plan to make API calls (e.g., using axios or fetch) from within a report template, you need to configure additional settings to ensure proper functionality: Append the following code to /rmm/api/tacticalrmm/tacticalrmm/local_settings.py : from corsheaders.defaults import default_headers CORS_ALLOW_HEADERS = ( * default_headers , \"x-api-key\" , ) Then restart the rmm service: sudo systemctl restart rmm","title":"Making API Calls from Within a Report Template"},{"location":"ee/sso/sso/","text":"SSO - Single Sign-on \u00b6 Version added: v0.20.0 Intro \u00b6 Tactical RMM's Single Sign-On (SSO) feature supports all OIDC-compatible authentication providers out of the box, allowing flexible integration with providers like Google, Microsoft, or any other that supports the OpenID Connect (OIDC) standard. This approach enables you to configure any compatible provider by simply entering its URL, giving you the freedom to choose the identity provider that best suits your needs without specific provider dependencies. Video Walkthru \u00b6 License \u00b6 The SSO feature is released under the Tactical RMM Enterprise License and requires a Tier 1 or higher sponsorship. Enable SSO \u00b6 SSO can be enabled via Global Settings > SSO . There is also an option to block regular user logins, allowing only SSO sign-ons (with the exception of local superusers). Add OIDC Provider \u00b6 Provider Name: A unique identifier for the SSO provider. Name this whatever you want, but avoid spaces and special characters, as this will be part of the callback URL. This name will appear on the Tactical RMM Login page. Issuer URL: The OpenID Connect Issuer URL provided by the SSO provider. This is typically the base URL where the provider hosts their OIDC configuration. Issuer URL examples GitLab: https://gitlab.com Apple: https://appleid.apple.com Twitch: https://id.twitch.tv/oauth2 Facebook: https://www.facebook.com Mattermost: https://developers.mattermost.com/integrate/admin-guide/admin-oauth2/#oauth-endpoints Client ID: A unique identifier provided by your OIDC provider that represents your application, allowing the provider to recognize it during the authentication process. Secret: A secure key provided by your OIDC provider, used in combination with the Client ID to authenticate your application and ensure secure communication between your app and the provider. Default User Role: The Tactical RMM Role that should be assigned to the SSO user on first sign in. Examples \u00b6 Google Workspace \u00b6 Info Using Google as an OAuth provider is only supported if you are using Google Workspace. 1. Create a Project Open the google cloud console Create a project or use an existing one Go to the Auth Overview page and click on the 'Getting Started' button to setup the project. Select Internal for the user type. 2. Setup Branding Setup Branding (OAuth consent screen) Make sure that \"Authorized domains\" includes the root domain of your instance. 3. Create a Client Create a client Application type: Web application Name: Tactical RMM Do not add javascript or redirect urls yet, we'll come back to this. Click Create. Click on the newly created client to open it and then copy the Client ID and Secret. 4. Add Provider in TRMM Provider Name: Google Issuer URL: https://accounts.google.com Client ID and Secret: what you just copied. Default User Role: choose a role. Click Submit 5. Add Callback URLs Right click on the provider in TRMM and copy both the Callback URL as well as the Allowed Javascript Origin Go back to the Client screen in the Google console and paste in the 2 copied urls. Note: Callback URL = Authorized redirect URI Microsoft Entra ID / Azure \u00b6 1. Register an application Go to https://entra.microsoft.com (Previously Azure Active Directory), in the left sidebar select Applications > App registrations Click \"+ New registration\" Name: TacticalRMM Choose \"Accounts in this organizational directory only\" Click Register 2. Tenant ID Copy the \"Directory (tenant) ID\" and save it somewhere. 3. API Permissions Select \"API permissions\" from the left sidebar, click \"Add a permission\" > \"Microsoft Graph\" > \"Delegated permissions\" and select \"email\", \"offline_access\" and \"profile\" 4. Certificates and secrets Select \"Certificates and secrets\" in the left sidebar, Select \"+ New client secret\", name it something like \"tacticalrmm\", choose and expiration date and make a note of the resulting secret value . 5. Add Provider in TRMM Provider Name: Microsoft Issuer URL: https://login.microsoftonline.com/ replace with tenant ID /v2.0 Replace the tenant ID with the ID from step 2 above. For example: https://login.microsoftonline.com/cefd9a11-7c82-4795-81cd-06a91053e814/v2.0 Client ID: copy this from the Overview tab in the Entra portal: Secret: paste in the secret you copied from Step 4. Default User Role: choose a role. Click Submit 6. Add Redirect URI Copy the Callback URL from the TRMM Providers List In the Entra portal, go to the Authentication tab in the left sidebar, click \"+ Add a platform\", choose \"Web\" and enter the Calllback URL you just copied. Note : When logging in for the first time, you MUST check \"Consent on behalf of your organization\". Authentik \u00b6 Assumes you've already installed Authentik . Can use DNS name (recommended) or IP for Authentik server. In TRMM Click Add OIDC Provider button Give Provider Name: Authentik In Authentik Create Provider > OAuth2/OpenID Provider Name: TacticalRMM Authentication Flow: default-authentication-flow (Welcome to authentik!) Authorization flow: default-provider-authorization-explicit-consent (Authorize Application) Client Type: Confidential Client ID: Copy from Authentik and paste into TRMM Client ID Client Secret: Copy from Authentik and paste into TRMM Secret Redirect URIs/Origins (Regex): Adjust this to your TRMM servers API URL and paste https://<TRMM API URL ie api.example.com>/accounts/oidc/Authentik/login/callback/ (also found in the right-click menu of the TRMMs SSO Provider) Signing Key: authentik Self-signed Certificate Create Authentik Application Name: TacticalRMM Slug: tacticalrmm Provider: Choose TacticalRMM and Create In TRMM Issuer URL: https://<your authentik IP or domain>/application/o/tacticalrmm/.well-known/openid-configuration Select your desired Default User Role from TRMM Permissions Submit and test! Keycloak \u00b6 In TRMM Click Add OIDC Provider button Give Provider Name: KeyCloak In KeyCloak Click Clients. Create client Client type: OpenID Connect Client ID: tacticalrmm . Also paste into TRMM \"Client ID\" field Name: TacticalRMM Hit Next Enable Client Authentication Hit Next Root URL: https://<TRMM rmm url ie rmm.tacticalrmm.app> Enter Valid Redirect URL: https://<TRMM API URL ie api.example.com>/accounts/oidc/KeyCloak/login/callback/ Web Origins: https://<TRMM rmm url ie rmm.tacticalrmm.app> Hit Save Go to Credentials tab and copy Client Secret. In TRMM Paste into TRMMs Secret field Issuer URL: https://<KeyCloak server dns/ip>:8443/realms/master/.well-known/openid-configuration Set Default User Role and Submit In KeyCloak Create Role Users Create new user or use existing Go to Users and assign Role via Role Mapping Tactical RMM Add SSO Provider Name: KeyCloak Client ID from step 1 in Create Client Secret from Step 8 Assign default roles Save Authelia \u00b6 Generate Client secret with https://www.authelia.com/integration/openid-connect/frequently-asked-questions/#client-secret Add config to bottom of Authelia Config (presumably all setup already) identity_providers: oidc: ## The other portions of the mandatory OpenID Connect 1.0 configuration go here. ## See: https://www.authelia.com/c/oidc clients: - client_id: 'tacticalrmm' client_name: 'TacticalRMM' client_secret: '$pbkdf2-sha512$310000$RJhFsh2Vz.18TX81znDaeA$wDEv6CQSE8zK8ApzfQyzd69fUjuIwSEduircgT/cQnlOm4qrgfxq9JMzmtGQrGV2ZgI812tomyqnFBGQrLXyWQ' public: false authorization_policy: 'two_factor' require_pkce: true pkce_challenge_method: 'S256' redirect_uris: - 'https://api.tacticalrmm.app/accounts/oidc/Authelia/login/callback/' scopes: - 'openid' - 'profile' - 'groups' - 'email' userinfo_signed_response_alg: 'none' token_endpoint_auth_method: 'client_secret_basic' pre_configured_consent_duration: '1 year' Warnings \u00b6 Names AND vaLUES in TRMM and your SSO application are interdependant, must match and are cAse sEnsitive. Following these instructions and copying/pasting names exactly will result in successful connections. Security \u00b6 When using SSO, the security of your application depends on the configuration of your chosen authentication provider. While local TRMM accounts enforce mandatory 2FA for enhanced security, SSO providers may not require 2FA by default. To maintain strong security, ensure that your SSO provider is configured with 2FA or equivalent measures to protect user accounts. For those who have no interest in using this feature and want it completely disabled, SSO can be disabled at the filesystem level, which will override the setting in Global Settings in the web interface. Disable SSO at the filesystem level Standard install Docker install Append the following variable to /rmm/api/tacticalrmm/tacticalrmm/local_settings.py TRMM_DISABLE_SSO = True Restart the following services: sudo systemctl restart rmm daphne Add TRMM_DISABLE_SSO=True to your .env file and run docker compose down && docker compose up -d How do I activate SSO as a new sponsor? \u00b6 Ignore the following if you're an existing sponsor upgrading from a version below 0.20.0, as SSO will automatically be activated for you during the upgrade process. Make sure your server has an appropriate code signing token saved ( Settings > Code Signing). Run the update script with the --force flag (see instructions below for standard vs docker installs): Hard reload the web page. Make sure you use your browser's reload button to hard reload the page. Standard install Docker install cd ~ wget -N https://raw.githubusercontent.com/amidaware/tacticalrmm/master/update.sh chmod +x update.sh ./update.sh --force docker compose down docker compose up -d For any issues with activating SSO, open a ticket . Troubleshooting \u00b6 Note SSO errors are typically logged on your provider's side. Check your authentication provider's error logs for more detailed messages. There was an error logging into your provider \u00b6 If you encounter the following error message: \"There was an error logging into your provider.\" this typically indicates one of the following issues: Email Address Conflict This error often occurs if there is an existing TRMM local account with the same email address as the SSO account you are trying to log in with. To resolve this: Option 1 : Edit the TRMM local user and update its email address to a different value, such as user@fakedomain.com . Note: The email address field for local users is not currently used for any functionality, so it can be set to any value. Option 2 : Delete the conflicting TRMM local user. Microsoft Entra Configuration Issue If you are using Microsoft Entra, this error may occur if you did not select the \"Consent on behalf of your organization\" option when first signing in. Ensure this option is checked during the initial login process.","title":"Single Sign-On (SSO)"},{"location":"ee/sso/sso/#sso-single-sign-on","text":"Version added: v0.20.0","title":"SSO - Single Sign-on"},{"location":"ee/sso/sso/#intro","text":"Tactical RMM's Single Sign-On (SSO) feature supports all OIDC-compatible authentication providers out of the box, allowing flexible integration with providers like Google, Microsoft, or any other that supports the OpenID Connect (OIDC) standard. This approach enables you to configure any compatible provider by simply entering its URL, giving you the freedom to choose the identity provider that best suits your needs without specific provider dependencies.","title":"Intro"},{"location":"ee/sso/sso/#video-walkthru","text":"","title":"Video Walkthru"},{"location":"ee/sso/sso/#license","text":"The SSO feature is released under the Tactical RMM Enterprise License and requires a Tier 1 or higher sponsorship.","title":"License"},{"location":"ee/sso/sso/#enable-sso","text":"SSO can be enabled via Global Settings > SSO . There is also an option to block regular user logins, allowing only SSO sign-ons (with the exception of local superusers).","title":"Enable SSO"},{"location":"ee/sso/sso/#add-oidc-provider","text":"Provider Name: A unique identifier for the SSO provider. Name this whatever you want, but avoid spaces and special characters, as this will be part of the callback URL. This name will appear on the Tactical RMM Login page. Issuer URL: The OpenID Connect Issuer URL provided by the SSO provider. This is typically the base URL where the provider hosts their OIDC configuration. Issuer URL examples GitLab: https://gitlab.com Apple: https://appleid.apple.com Twitch: https://id.twitch.tv/oauth2 Facebook: https://www.facebook.com Mattermost: https://developers.mattermost.com/integrate/admin-guide/admin-oauth2/#oauth-endpoints Client ID: A unique identifier provided by your OIDC provider that represents your application, allowing the provider to recognize it during the authentication process. Secret: A secure key provided by your OIDC provider, used in combination with the Client ID to authenticate your application and ensure secure communication between your app and the provider. Default User Role: The Tactical RMM Role that should be assigned to the SSO user on first sign in.","title":"Add OIDC Provider"},{"location":"ee/sso/sso/#examples","text":"","title":"Examples"},{"location":"ee/sso/sso/#google-workspace","text":"Info Using Google as an OAuth provider is only supported if you are using Google Workspace. 1. Create a Project Open the google cloud console Create a project or use an existing one Go to the Auth Overview page and click on the 'Getting Started' button to setup the project. Select Internal for the user type. 2. Setup Branding Setup Branding (OAuth consent screen) Make sure that \"Authorized domains\" includes the root domain of your instance. 3. Create a Client Create a client Application type: Web application Name: Tactical RMM Do not add javascript or redirect urls yet, we'll come back to this. Click Create. Click on the newly created client to open it and then copy the Client ID and Secret. 4. Add Provider in TRMM Provider Name: Google Issuer URL: https://accounts.google.com Client ID and Secret: what you just copied. Default User Role: choose a role. Click Submit 5. Add Callback URLs Right click on the provider in TRMM and copy both the Callback URL as well as the Allowed Javascript Origin Go back to the Client screen in the Google console and paste in the 2 copied urls. Note: Callback URL = Authorized redirect URI","title":"Google Workspace"},{"location":"ee/sso/sso/#microsoft-entra-id-azure","text":"1. Register an application Go to https://entra.microsoft.com (Previously Azure Active Directory), in the left sidebar select Applications > App registrations Click \"+ New registration\" Name: TacticalRMM Choose \"Accounts in this organizational directory only\" Click Register 2. Tenant ID Copy the \"Directory (tenant) ID\" and save it somewhere. 3. API Permissions Select \"API permissions\" from the left sidebar, click \"Add a permission\" > \"Microsoft Graph\" > \"Delegated permissions\" and select \"email\", \"offline_access\" and \"profile\" 4. Certificates and secrets Select \"Certificates and secrets\" in the left sidebar, Select \"+ New client secret\", name it something like \"tacticalrmm\", choose and expiration date and make a note of the resulting secret value . 5. Add Provider in TRMM Provider Name: Microsoft Issuer URL: https://login.microsoftonline.com/ replace with tenant ID /v2.0 Replace the tenant ID with the ID from step 2 above. For example: https://login.microsoftonline.com/cefd9a11-7c82-4795-81cd-06a91053e814/v2.0 Client ID: copy this from the Overview tab in the Entra portal: Secret: paste in the secret you copied from Step 4. Default User Role: choose a role. Click Submit 6. Add Redirect URI Copy the Callback URL from the TRMM Providers List In the Entra portal, go to the Authentication tab in the left sidebar, click \"+ Add a platform\", choose \"Web\" and enter the Calllback URL you just copied. Note : When logging in for the first time, you MUST check \"Consent on behalf of your organization\".","title":"Microsoft Entra ID / Azure"},{"location":"ee/sso/sso/#authentik","text":"Assumes you've already installed Authentik . Can use DNS name (recommended) or IP for Authentik server. In TRMM Click Add OIDC Provider button Give Provider Name: Authentik In Authentik Create Provider > OAuth2/OpenID Provider Name: TacticalRMM Authentication Flow: default-authentication-flow (Welcome to authentik!) Authorization flow: default-provider-authorization-explicit-consent (Authorize Application) Client Type: Confidential Client ID: Copy from Authentik and paste into TRMM Client ID Client Secret: Copy from Authentik and paste into TRMM Secret Redirect URIs/Origins (Regex): Adjust this to your TRMM servers API URL and paste https://<TRMM API URL ie api.example.com>/accounts/oidc/Authentik/login/callback/ (also found in the right-click menu of the TRMMs SSO Provider) Signing Key: authentik Self-signed Certificate Create Authentik Application Name: TacticalRMM Slug: tacticalrmm Provider: Choose TacticalRMM and Create In TRMM Issuer URL: https://<your authentik IP or domain>/application/o/tacticalrmm/.well-known/openid-configuration Select your desired Default User Role from TRMM Permissions Submit and test!","title":"Authentik"},{"location":"ee/sso/sso/#keycloak","text":"In TRMM Click Add OIDC Provider button Give Provider Name: KeyCloak In KeyCloak Click Clients. Create client Client type: OpenID Connect Client ID: tacticalrmm . Also paste into TRMM \"Client ID\" field Name: TacticalRMM Hit Next Enable Client Authentication Hit Next Root URL: https://<TRMM rmm url ie rmm.tacticalrmm.app> Enter Valid Redirect URL: https://<TRMM API URL ie api.example.com>/accounts/oidc/KeyCloak/login/callback/ Web Origins: https://<TRMM rmm url ie rmm.tacticalrmm.app> Hit Save Go to Credentials tab and copy Client Secret. In TRMM Paste into TRMMs Secret field Issuer URL: https://<KeyCloak server dns/ip>:8443/realms/master/.well-known/openid-configuration Set Default User Role and Submit In KeyCloak Create Role Users Create new user or use existing Go to Users and assign Role via Role Mapping Tactical RMM Add SSO Provider Name: KeyCloak Client ID from step 1 in Create Client Secret from Step 8 Assign default roles Save","title":"Keycloak"},{"location":"ee/sso/sso/#authelia","text":"Generate Client secret with https://www.authelia.com/integration/openid-connect/frequently-asked-questions/#client-secret Add config to bottom of Authelia Config (presumably all setup already) identity_providers: oidc: ## The other portions of the mandatory OpenID Connect 1.0 configuration go here. ## See: https://www.authelia.com/c/oidc clients: - client_id: 'tacticalrmm' client_name: 'TacticalRMM' client_secret: '$pbkdf2-sha512$310000$RJhFsh2Vz.18TX81znDaeA$wDEv6CQSE8zK8ApzfQyzd69fUjuIwSEduircgT/cQnlOm4qrgfxq9JMzmtGQrGV2ZgI812tomyqnFBGQrLXyWQ' public: false authorization_policy: 'two_factor' require_pkce: true pkce_challenge_method: 'S256' redirect_uris: - 'https://api.tacticalrmm.app/accounts/oidc/Authelia/login/callback/' scopes: - 'openid' - 'profile' - 'groups' - 'email' userinfo_signed_response_alg: 'none' token_endpoint_auth_method: 'client_secret_basic' pre_configured_consent_duration: '1 year'","title":"Authelia"},{"location":"ee/sso/sso/#warnings","text":"Names AND vaLUES in TRMM and your SSO application are interdependant, must match and are cAse sEnsitive. Following these instructions and copying/pasting names exactly will result in successful connections.","title":"Warnings"},{"location":"ee/sso/sso/#security","text":"When using SSO, the security of your application depends on the configuration of your chosen authentication provider. While local TRMM accounts enforce mandatory 2FA for enhanced security, SSO providers may not require 2FA by default. To maintain strong security, ensure that your SSO provider is configured with 2FA or equivalent measures to protect user accounts. For those who have no interest in using this feature and want it completely disabled, SSO can be disabled at the filesystem level, which will override the setting in Global Settings in the web interface. Disable SSO at the filesystem level Standard install Docker install Append the following variable to /rmm/api/tacticalrmm/tacticalrmm/local_settings.py TRMM_DISABLE_SSO = True Restart the following services: sudo systemctl restart rmm daphne Add TRMM_DISABLE_SSO=True to your .env file and run docker compose down && docker compose up -d","title":"Security"},{"location":"ee/sso/sso/#how-do-i-activate-sso-as-a-new-sponsor","text":"Ignore the following if you're an existing sponsor upgrading from a version below 0.20.0, as SSO will automatically be activated for you during the upgrade process. Make sure your server has an appropriate code signing token saved ( Settings > Code Signing). Run the update script with the --force flag (see instructions below for standard vs docker installs): Hard reload the web page. Make sure you use your browser's reload button to hard reload the page. Standard install Docker install cd ~ wget -N https://raw.githubusercontent.com/amidaware/tacticalrmm/master/update.sh chmod +x update.sh ./update.sh --force docker compose down docker compose up -d For any issues with activating SSO, open a ticket .","title":"How do I activate SSO as a new sponsor?"},{"location":"ee/sso/sso/#troubleshooting","text":"Note SSO errors are typically logged on your provider's side. Check your authentication provider's error logs for more detailed messages.","title":"Troubleshooting"},{"location":"ee/sso/sso/#there-was-an-error-logging-into-your-provider","text":"If you encounter the following error message: \"There was an error logging into your provider.\" this typically indicates one of the following issues: Email Address Conflict This error often occurs if there is an existing TRMM local account with the same email address as the SSO account you are trying to log in with. To resolve this: Option 1 : Edit the TRMM local user and update its email address to a different value, such as user@fakedomain.com . Note: The email address field for local users is not currently used for any functionality, so it can be set to any value. Option 2 : Delete the conflicting TRMM local user. Microsoft Entra Configuration Issue If you are using Microsoft Entra, this error may occur if you did not select the \"Consent on behalf of your organization\" option when first signing in. Ensure this option is checked during the initial login process.","title":"There was an error logging into your provider"},{"location":"functions/alerting/","text":"Alerting Overview \u00b6 Alerting and notifications can be managed centrally using Alert Templates. All an alert template does is configure the Email, Text, and Dashboard alert check boxes on Agents, Checks, and Automated Tasks. Using Alert Templates also enables additional features like: Periodic notifications if an alert is left unresolved. Being able to notify on certain alert severities. Sending notifications when an alert is resolved. Executing scripts when an alert is triggered or resolved. Setting up Email Alert Examples Supported Notifications \u00b6 Email Alerts - Sends email to configured set of email addresses. SMS Alerts - Sends text messages to configured set of numbers. Dashboard Alerts - A notification popup will show up and be visible in the dashboard. Webhooks - Send an API request. Alert Severities \u00b6 Info Agent overdue alerts are always of severity: Error Alert severities are configured directly on the Check or Automated Task. When the Check or Automated Task fails, it will create an alert of the specified severity. The severity types are: Informational Warning Error Creating Alert Templates \u00b6 To create an alert template, go to Settings > Alerts Manager , then click New . The available options are: General Settings \u00b6 Name - The name that is used to identify the Alert Template in the dashboard. Email Recipients - Sets the list of email recipients. If this isn't set the email recipients in global settings will be used. From Email - Sets the From email address of the notification. If this isn't set the From address from global settings is used. SMS Recipients - Sets the list of text recipients. If this isn't set the sms list from global settings is used. Alert Action Settings \u00b6 For optionally triggering an additional task (Send a Web Hook, Run Script on Agent, Run script on TRMM Server) when desired (can be left blank for no action). Alert Failure Settings / Alert Resolved Settings \u00b6 Send a Web Hook \u00b6 You can create your own webhooks to be sent out on alert failure/resolved events, like a script check or task failing or an agent going overdue. You have access to any of the variables as well as custom fields / global keystore inside the json payload of the webhook as well as in the URL patter. Create your Web Hooks Choose the Web Hook you wish to be ran as the alert failure and/or resolved action. Run script on Agent \u00b6 Script - Runs the selected script once. It attempts to run it on the agent in question, but if not online TRMM selects a random agent to run on. Script arguments - Optionally pass in arguments to the script. Script environment vars - Optionally pass in env vars to the script. Action Timeout - Sets the timeout for the script. Run script on Server \u00b6 Warning This is a dangerous feature and you must ensure permissions are appropriate for your environment. This runs the script on your TRMM server. To ensure proper execution, you must specify the interpreter for your script using a shebang line at the top of each script. Also make sure that the specified interpreter is installed on your TRMM server. Just like with webhooks, you also have access to the same variables as well as custom fields / global keystore in the script's arguments or environment variables. Python (included with TRMM) Python (system python) Bash Powershell (7 PWSH) node (included with TRMM) deno (must be installed) Shell type: Shell #!/rmm/api/env/bin/python import sys print ( sys . version ) Shell type: Shell #!/usr/bin/python3 import sys print ( sys . version ) Shell type: Shell #!/usr/bin/env bash echo \"hello world\" To install: https://learn.microsoft.com/en-us/powershell/scripting/install/install-debian Shell type: Powershell #!/usr/bin/pwsh Write-Output \"Hello World\" Shell type: Shell #!/usr/bin/node console.log(\"Hello World\") Shell type: Deno #!/usr/bin/env -S /usr/local/bin/deno run --allow-allow async function gatherSystemInfo() { const os = Deno.build.os; const arch = Deno.build.arch; const memory = Deno.systemMemoryInfo(); const info = ` OS: ${os} Architecture: ${arch} Total Memory: ${(await memory).total / 1024 / 1024} MB Free Memory: ${(await memory).free / 1024 / 1024} MB `; console.log(info); } gatherSystemInfo().catch(console.error); Script - Runs the selected script once on the TRMM server. Script arguments - Optionally pass in arguments to the script. Script environment vars - Optionally pass in env vars to the script. Action Timeout - Sets the timeout for the script. Run actions only on \u00b6 Turn the switch on if you want the above Alert Failure/Alert Resolved script to run on: Agents - If Enabled, will run script failure / resolved actions on agent overdue alerts, else no alert actions will be triggered for agent overdue alerts. Checks - If Enabled, will run script failure / resolved actions on check alerts, else no alert actions will be triggered check alerts. Tasks - If Enabled, will run script failure / resolved actions on automated task alerts, else no alert actions will be triggered automated task alerts. Agent Overdue Setting \u00b6 Email - When Enabled , will send an email notification and override the Email Alert checkbox on the Agent / Check / Task. When Not Configured , the Email Alert checkbox on the Agent / Check / Task will take effect. If Disabled , no email notifications will be sent and will override any Email alert checkbox on the Agent / Check / Task. Text - When Enabled , will send a text notification and override the SMS Alert checkbox on the Agent / Check / Task. When Not Configured , the SMS Alert checkbox on the Agent / Check / Task will take effect. If Disabled , no SMS notifications will be sent and will override any SMS Alert checkbox on the Agent / Check / Task. Dashboard - When Enabled , will send a dashboard notification and override the Dashboard Alert checkbox on the Agent / Check / Task. When Not Configured , the Dashboard Alert checkbox on the Agent / Check / Task will take effect. If Disabled , no SMS notifications will be sent and will override any Dashboard Alert checkbox on the Agent / Check / Task. Alert again if not resolved after (days) - This sends another notification if the alert isn't resolved after the set amount of days. Set to 0 to disable this. Alert on severity - Only applicable to Check and Task alert notifications. This will only send alerts when they are of the configured severity. Info Alert on Severity needs to be configured for check and task notifications to be sent! Check Settings / Automated Task Settings \u00b6 Email - If enabled, sends an email notification when an alert is resolved. Text - If enabled, sends a text messaged when an alert is resolved. Applying Alert Templates \u00b6 Alert templates can be configured: Globally at the Server Level By Automation Policy Manually at the Client Level Manually at the Site Level To apply Globally , navigate to Settings > Global Settings . Set the Alert Template dropdown and save. You can configure an alert template on an automation policy by navigating to Settings > Automation Manager , and clicking the Assign Alert Template click on the policy, or right-clicking the policy and selecting Assign Alert Template . To configure on a Client or Site right-click on one in the Client / Site tree view and select Assign Alert Template . Alert Template Exclusions \u00b6 You can exclude Clients, Sites, and Agents from Alert Templates. To do this you can: Right-click on the Alert Template in Alerts Manager and select Exclusions . Select the Alert Exclusions link in the Alert Template row. You can also Exclude Desktops from the alert template. This is useful if you only care about servers. Alert Template Inheritance \u00b6 Alerts are applied in the following order. The agent picks the closest matching alert template. Policy w/ Alert Template applied to Site Site Policy w/ Alert Template applied to Client Client Default Alert Template Setting up Alert Severities with scripts \u00b6 If scripting for alert severities please see below, Create a script with exit codes. The exit codes can be anything other than 0 (which is reserved for passing). Below we are using 2 as a Warning and 5 as Informational, any other code will be assumed to be an Error) If (!(test-path c:\\ProgramData\\TacticalRMM\\temp)) { New-Item -ItemType Directory -Force -Path \"C:\\ProgramData\\TacticalRMM\\temp\" $exitcode = 2 $host.SetShouldExit($exitcode) exit } Else { Write-Output \"found folder\" $exitcode = 5 $host.SetShouldExit($exitcode) exit } Setup a script check and fill in the corresponding Warning and Informational codes (don't forget to hit enter). Save script check and you should now have the different Severities.","title":"Alerting"},{"location":"functions/alerting/#alerting-overview","text":"Alerting and notifications can be managed centrally using Alert Templates. All an alert template does is configure the Email, Text, and Dashboard alert check boxes on Agents, Checks, and Automated Tasks. Using Alert Templates also enables additional features like: Periodic notifications if an alert is left unresolved. Being able to notify on certain alert severities. Sending notifications when an alert is resolved. Executing scripts when an alert is triggered or resolved. Setting up Email Alert Examples","title":"Alerting Overview"},{"location":"functions/alerting/#supported-notifications","text":"Email Alerts - Sends email to configured set of email addresses. SMS Alerts - Sends text messages to configured set of numbers. Dashboard Alerts - A notification popup will show up and be visible in the dashboard. Webhooks - Send an API request.","title":"Supported Notifications"},{"location":"functions/alerting/#alert-severities","text":"Info Agent overdue alerts are always of severity: Error Alert severities are configured directly on the Check or Automated Task. When the Check or Automated Task fails, it will create an alert of the specified severity. The severity types are: Informational Warning Error","title":"Alert Severities"},{"location":"functions/alerting/#creating-alert-templates","text":"To create an alert template, go to Settings > Alerts Manager , then click New . The available options are:","title":"Creating Alert Templates"},{"location":"functions/alerting/#general-settings","text":"Name - The name that is used to identify the Alert Template in the dashboard. Email Recipients - Sets the list of email recipients. If this isn't set the email recipients in global settings will be used. From Email - Sets the From email address of the notification. If this isn't set the From address from global settings is used. SMS Recipients - Sets the list of text recipients. If this isn't set the sms list from global settings is used.","title":"General Settings"},{"location":"functions/alerting/#alert-action-settings","text":"For optionally triggering an additional task (Send a Web Hook, Run Script on Agent, Run script on TRMM Server) when desired (can be left blank for no action).","title":"Alert Action Settings"},{"location":"functions/alerting/#alert-failure-settings-alert-resolved-settings","text":"","title":"Alert Failure Settings / Alert Resolved Settings"},{"location":"functions/alerting/#send-a-web-hook","text":"You can create your own webhooks to be sent out on alert failure/resolved events, like a script check or task failing or an agent going overdue. You have access to any of the variables as well as custom fields / global keystore inside the json payload of the webhook as well as in the URL patter. Create your Web Hooks Choose the Web Hook you wish to be ran as the alert failure and/or resolved action.","title":"Send a Web Hook"},{"location":"functions/alerting/#run-script-on-agent","text":"Script - Runs the selected script once. It attempts to run it on the agent in question, but if not online TRMM selects a random agent to run on. Script arguments - Optionally pass in arguments to the script. Script environment vars - Optionally pass in env vars to the script. Action Timeout - Sets the timeout for the script.","title":"Run script on Agent"},{"location":"functions/alerting/#run-script-on-server","text":"Warning This is a dangerous feature and you must ensure permissions are appropriate for your environment. This runs the script on your TRMM server. To ensure proper execution, you must specify the interpreter for your script using a shebang line at the top of each script. Also make sure that the specified interpreter is installed on your TRMM server. Just like with webhooks, you also have access to the same variables as well as custom fields / global keystore in the script's arguments or environment variables. Python (included with TRMM) Python (system python) Bash Powershell (7 PWSH) node (included with TRMM) deno (must be installed) Shell type: Shell #!/rmm/api/env/bin/python import sys print ( sys . version ) Shell type: Shell #!/usr/bin/python3 import sys print ( sys . version ) Shell type: Shell #!/usr/bin/env bash echo \"hello world\" To install: https://learn.microsoft.com/en-us/powershell/scripting/install/install-debian Shell type: Powershell #!/usr/bin/pwsh Write-Output \"Hello World\" Shell type: Shell #!/usr/bin/node console.log(\"Hello World\") Shell type: Deno #!/usr/bin/env -S /usr/local/bin/deno run --allow-allow async function gatherSystemInfo() { const os = Deno.build.os; const arch = Deno.build.arch; const memory = Deno.systemMemoryInfo(); const info = ` OS: ${os} Architecture: ${arch} Total Memory: ${(await memory).total / 1024 / 1024} MB Free Memory: ${(await memory).free / 1024 / 1024} MB `; console.log(info); } gatherSystemInfo().catch(console.error); Script - Runs the selected script once on the TRMM server. Script arguments - Optionally pass in arguments to the script. Script environment vars - Optionally pass in env vars to the script. Action Timeout - Sets the timeout for the script.","title":"Run script on Server"},{"location":"functions/alerting/#run-actions-only-on","text":"Turn the switch on if you want the above Alert Failure/Alert Resolved script to run on: Agents - If Enabled, will run script failure / resolved actions on agent overdue alerts, else no alert actions will be triggered for agent overdue alerts. Checks - If Enabled, will run script failure / resolved actions on check alerts, else no alert actions will be triggered check alerts. Tasks - If Enabled, will run script failure / resolved actions on automated task alerts, else no alert actions will be triggered automated task alerts.","title":"Run actions only on"},{"location":"functions/alerting/#agent-overdue-setting","text":"Email - When Enabled , will send an email notification and override the Email Alert checkbox on the Agent / Check / Task. When Not Configured , the Email Alert checkbox on the Agent / Check / Task will take effect. If Disabled , no email notifications will be sent and will override any Email alert checkbox on the Agent / Check / Task. Text - When Enabled , will send a text notification and override the SMS Alert checkbox on the Agent / Check / Task. When Not Configured , the SMS Alert checkbox on the Agent / Check / Task will take effect. If Disabled , no SMS notifications will be sent and will override any SMS Alert checkbox on the Agent / Check / Task. Dashboard - When Enabled , will send a dashboard notification and override the Dashboard Alert checkbox on the Agent / Check / Task. When Not Configured , the Dashboard Alert checkbox on the Agent / Check / Task will take effect. If Disabled , no SMS notifications will be sent and will override any Dashboard Alert checkbox on the Agent / Check / Task. Alert again if not resolved after (days) - This sends another notification if the alert isn't resolved after the set amount of days. Set to 0 to disable this. Alert on severity - Only applicable to Check and Task alert notifications. This will only send alerts when they are of the configured severity. Info Alert on Severity needs to be configured for check and task notifications to be sent!","title":"Agent Overdue Setting"},{"location":"functions/alerting/#check-settings-automated-task-settings","text":"Email - If enabled, sends an email notification when an alert is resolved. Text - If enabled, sends a text messaged when an alert is resolved.","title":"Check Settings / Automated Task Settings"},{"location":"functions/alerting/#applying-alert-templates","text":"Alert templates can be configured: Globally at the Server Level By Automation Policy Manually at the Client Level Manually at the Site Level To apply Globally , navigate to Settings > Global Settings . Set the Alert Template dropdown and save. You can configure an alert template on an automation policy by navigating to Settings > Automation Manager , and clicking the Assign Alert Template click on the policy, or right-clicking the policy and selecting Assign Alert Template . To configure on a Client or Site right-click on one in the Client / Site tree view and select Assign Alert Template .","title":"Applying Alert Templates"},{"location":"functions/alerting/#alert-template-exclusions","text":"You can exclude Clients, Sites, and Agents from Alert Templates. To do this you can: Right-click on the Alert Template in Alerts Manager and select Exclusions . Select the Alert Exclusions link in the Alert Template row. You can also Exclude Desktops from the alert template. This is useful if you only care about servers.","title":"Alert Template Exclusions"},{"location":"functions/alerting/#alert-template-inheritance","text":"Alerts are applied in the following order. The agent picks the closest matching alert template. Policy w/ Alert Template applied to Site Site Policy w/ Alert Template applied to Client Client Default Alert Template","title":"Alert Template Inheritance"},{"location":"functions/alerting/#setting-up-alert-severities-with-scripts","text":"If scripting for alert severities please see below, Create a script with exit codes. The exit codes can be anything other than 0 (which is reserved for passing). Below we are using 2 as a Warning and 5 as Informational, any other code will be assumed to be an Error) If (!(test-path c:\\ProgramData\\TacticalRMM\\temp)) { New-Item -ItemType Directory -Force -Path \"C:\\ProgramData\\TacticalRMM\\temp\" $exitcode = 2 $host.SetShouldExit($exitcode) exit } Else { Write-Output \"found folder\" $exitcode = 5 $host.SetShouldExit($exitcode) exit } Setup a script check and fill in the corresponding Warning and Informational codes (don't forget to hit enter). Save script check and you should now have the different Severities.","title":"Setting up Alert Severities with scripts"},{"location":"functions/api/","text":"API Access \u00b6 Tactical RMM uses a Django Rest Framework backend which is designed to be consumed by a VueJS frontend . Therefore, anything you can do via the web interface, you can do via the API. However this makes it difficult to document the API as it has only been designed to be consumed by our vue frontend. The easiest way to see what endpoint/payload you need to send is to open your browser's developer tools > Network tab. Then, perform the action you wish to do via the api in Tactical's web interface and watch the network tab to see the endpoint and the payload that is generated, and use that as an example of how to structure your api request. Please note that using an API key will bypass 2FA authentication. When creating the key you'll need to choose a user, which will reflect what permissions the key has based on the user's role. Navigate to Settings > Global Settings > API Keys to generate a key. Warning Pay attention to your trailing / they matter. Headers: { \"Content-Type\" : \"application/json\" , \"X-API-KEY\" : \"J57BXCFDA2WBCXH0XTELBR5KAI69CNCZ\" } Example curl request: curl https://api.example.com/clients/ -H \"X-API-KEY: Y57BXCFAA9WBCXH0XTEL6R5KAK69CNCZ\" Enable Swagger \u00b6 This will let you add a browser interface to see how you can use the API better. Open /rmm/api/tacticalrmm/tacticalrmm/local_settings.py and add SWAGGER_ENABLED = True Restart Django: sudo systemctl restart rmm.service Then visit https://api.example.com/api/schema/swagger-ui/ to see it in action. Beta API \u00b6 Version added: Tactical RMM v0.16.5 A beta API is now available at /beta/v1 which supports filtering and pagination. To activate it, first enable swagger (see above) and then add the following line to /rmm/api/tacticalrmm/tacticalrmm/local_settings.py : BETA_API_ENABLED = True Then restart Django with: sudo systemctl restart rmm.service and check Swagger for usage. Querying the API \u00b6 Here are some examples: Example Code Python PowerShell 1 PowerShell 2 Requests Windows Update check to run against agent ID import requests API = \"http://api.example.com\" HEADERS = { \"Content-Type\" : \"application/json\" , \"X-API-KEY\" : \"DKNRPTHSAPCKT8A36MCAMNZREWWWFPWI\" , } def trigger_update_scan (): agents = requests . get ( f \" { API } /agents/?detail=false\" , headers = HEADERS ) for agent in agents . json (): r = requests . post ( f \" { API } /winupdate/ { agent [ 'agent_id' ] } /scan/\" , headers = HEADERS ) print ( r . json ()) if __name__ == \"__main__\" : trigger_update_scan () # Example - Get all agents using API $headers = @{ 'X-API-KEY' = 'ABC1234567890987654321' } $url = \"https://api.yourdomain.com/agents/\" $agentsResult = Invoke-RestMethod -Method 'Get' -Uri $url -Headers $headers -ContentType \"application/json\" foreach ( $agent in $agentsResult ) { Write-Host $agent #Write-Host $agent.hostname } # Example - Send PowerShell command to agent. Make sure to pass {{agent.agent_id}} as a parameter param ( $AgentId ) $headers = @{ 'X-API-KEY' = 'ABC1234567890987654321' } $url = \"https://api.yourdomain.com/agents/$AgentId/cmd/\" $body = @{ \"shell\" = \"powershell\" \"cmd\" = \"dir c:\\\\users\" \"timeout\" = 30 } $commandResult = Invoke-RestMethod -Method 'Post' -Uri $url -Body ( $body | ConvertTo-Json ) -Headers $headers -ContentType \"application/json\" Write-Host $commandResult Running a Script on an Agent Using the API \u00b6 First get the script ID from the Script library by hovering your mouse over it in the script list and looking at the tooltip. POST to the endpoint /agents/<agentid>/runscript/ this: { \"output\": \"forget\", \"emails\": [], \"emailMode\": \"default\", \"custom_field\": null, \"save_all_output\": false, \"script\": 89, // primary key of script in postgres \"args\": [ \"arg1\", \"arg2\" ], \"env_vars\": [], \"run_as_user\": false, \"timeout\": 90 // seconds } Example: Run a script on an agent PowerShell $apiUrl = 'https://api.example.com/agents/CHANGEME/runscript/' $jsonPayload = @{ output = \"wait\" emails = @() emailMode = \"default\" custom_field = $null save_all_output = $false script = 89 args = @() env_vars = @() run_as_user = $false timeout = 90 } | ConvertTo-Json $headers = @{ 'Content-Type' = 'application/json' 'X-API-KEY' = 'changeme' } $response = Invoke-RestMethod -Uri $apiUrl -Method Post -Body $jsonPayload -Headers $headers $response API via CLI \u00b6 https://gitlab.com/NiceGuyIT/trmm-cli API Examples \u00b6 Listing all software on all agents: \u00b6 import requests API = \"https://api.example.com\" HEADERS = { \"Content-Type\" : \"application/json\" , \"X-API-KEY\" : \"9SI43IFUMPEVRWOZR4NC8PGP4ZLA9PYX\" , } def get_software (): agents = requests . get ( f \" { API } /agents/?detail=false\" , headers = HEADERS ) # get a list of all agents for agent in agents . json (): # loop thru all agents and print list of installed software r = requests . get ( f \" { API } /software/ { agent [ 'agent_id' ] } /\" , headers = HEADERS ) print ( r . json ()) if __name__ == \"__main__\" : get_software () List Agents \u00b6 # Query the TRMM API with PowerShell . .\\ dotenv . ps1 $Agents_Endpoint = GetURL ( \"agents\" ) $Agents = Invoke-RestMethod $Agents_Endpoint -Headers $Headers -ContentType \"application/json\" -Method \"Get\" # $Agents | ConvertTo-Json $Agents . foreach ({ $_ }) | Select-Object Agent_ID , Hostname , Site_Name , Client_Name , Monitoring_Type | Format-Table List Tasks \u00b6 # Query the TRMM API with PowerShell . .\\ dotenv . ps1 $Tasks_Endpoint = GetURL ( \"tasks\" ) $Response = Invoke-RestMethod $Tasks_Endpoint -Headers $Headers -ContentType \"application/json\" -Method \"Get\" # $Response | ConvertTo-Json $Response . foreach ({ $_ }) | Select-Object ID , Policy , Name , Custom_Field | Format-Table Get Custom Fields \u00b6 $TRMM_API_Base_Endpoint = Read-Host \"Please provide your API domain i.e https://api.domain.com\" $TRMM_API_Key = Read-Host \"Please provide your API Key\" $TRMM_API_CustomFields_Endpoint = $TRMM_API_Base_Endpoint + \"/core/customfields\" $TRMM_Request_Headers = @{ \"X-API-KEY\" = $TRMM_API_Key } $Request = Invoke-RestMethod $TRMM_API_CustomFields_Endpoint -Headers $TRMM_Request_Headers -Method Get $TRMM_Agent_ExistingCustomFields = ( $Request | ? { $_ . model -eq 'Agent' }) # Gets all of the Windows Features and places it in an array to parse later # This is to ensure that TRMM has all Windows Feature roles available as a Custom Field $AllWindowsFeatures = Get-WindowsFeature $TRMM_Role_AllCustomFields = @() foreach ( $WindowsFeature in $AllWindowsFeatures ){ if ( $WindowsFeature . Depth -eq 1 ){ $PrimaryRole = $WindowsFeature . DisplayName } else { $TRMM_Role_AllCustomFields += [PSCustomObject] @{ \"Role\" = $PrimaryRole \"Value\" = $WindowsFeature . DisplayName } } } $Unique_Roles = $TRMM_Role_AllCustomFields | Select -Unique Role #Loop through each WindowsFeature foreach ( $WindowsFeature in $Unique_Roles ){ if ( $TRMM_Agent_ExistingCustomFields . Name -like \"* $( $WindowsFeature . Role ) *\" ){ # Need to check if it also contains the value } else { # Check to see if the Role is an Array or an Object # Convert to Array otherwise if ((( $TRMM_Role_AllCustomFields | ? { $_ . Role -eq $WindowsFeature . Role }). Value ) -isnot [array] ){ $CustomFieldOptions = @(( $TRMM_Role_AllCustomFields | ? { $_ . Role -eq $WindowsFeature . Role }). Value ) } else { $CustomFieldOptions = ( $TRMM_Role_AllCustomFields | ? { $_ . Role -eq $WindowsFeature . Role }). Value } # Create the Custom Field body $CustomFieldData = @{ model = \"agent\" name = \"Server Role - \" + $WindowsFeature . Role type = \"multiple\" options = $CustomFieldOptions } $CreateCustomField = Invoke-RestMethod $TRMM_API_CustomFields_Endpoint -Headers $TRMM_Request_Headers -Method Post -Body ( $CustomFieldData | ConvertTo-Json ) -ContentType \"application/json\" } } Get Custom Fields \u00b6 https://discord.com/channels/736478043522072608/888474369544847430/1004184193078669522 import requests import json API = \"https://api.example.com\" HEADERS = { \"Content-Type\" : \"application/json\" , \"X-API-KEY\" : \"changeme\" , } payload = { \"custom_fields\" : [{ \"string_value\" : \"66666\" , \"field\" : 2 }]} r = requests . put ( f \" { API } /agents/IcAhWvOHlADwjuYmndAkjbJuhSdWvWjtvYcYjCZk/\" , data = json . dumps ( payload ), headers = HEADERS , ) print ( r . __dict__ ) Create Collector Tasks \u00b6 https://discord.com/channels/736478043522072608/888474369544847430/1004383584070676610 # Query the TRMM API with PowerShell # Add this to dotenv.ps1 #$TRMM_API_KEY = \"\" #$TRMM_API_DOMAIN = \"\" . .\\ dotenv . ps1 function GetURL { param ( [string] $Path ) return \"https://${TRMM_API_DOMAIN}/${Path}/\" } $Headers = @{ 'X-API-KEY' = $TRMM_API_KEY } $Collector = [PSCustomObject] @{ policy = 1 actions = @(@{ name = \"Collector - Location - City and State\" type = \"script\" script = 121 timeout = 90 script_args = @() }) assigned_check = $null custom_field = 14 name = \"Get city and state from API\" # expire_date = $null run_time_date = \"2022-08-02T08:00:00Z\" # run_time_bit_weekdays = $null weekly_interval = 1 daily_interval = 1 # monthly_months_of_year = $null # monthly_days_of_month = $null # monthly_weeks_of_month = $null # task_instance_policy = 0 # task_repetition_interval = $null # task_repetition_duration = $null # stop_task_at_duration_end = $false # random_task_delay = $null # remove_if_not_scheduled = $false run_asap_after_missed = $true task_type = \"daily\" alert_severity = \"info\" # collector_all_output = $false # continue_on_error = $false } $Tasks_Endpoint = GetURL ( \"tasks\" ) $Payload = $Collector | ConvertTo-Json $Response = Invoke-RestMethod $Tasks_Endpoint -Headers $Headers -ContentType \"application/json\" -Method \"Post\" -Body $Payload if (! $?) { Write-Output \"Failed to submit request: $( $error [ 0 ]. ToString () ) \" Write-Output \"Stacktrace: $( $error [ 0 ]. Exception . ToString () ) \" Exit ( 1 ) } $Response | ConvertTo-Json Show Tasks \u00b6 # Query the TRMM API with PowerShell . .\\ dotenv . ps1 $Tasks_Endpoint = GetURL ( \"tasks\" ) $Response = Invoke-RestMethod $Tasks_Endpoint -Headers $Headers -ContentType \"application/json\" -Method \"Get\" # $Response | ConvertTo-Json $Response . foreach ({ $_ }) | Select-Object ID , Policy , Name , Custom_Field | Format-Table Show Task/collector results \u00b6 # Query the TRMM API with PowerShell . .\\ dotenv . ps1 $Agents_Endpoint = GetURL ( \"agents\" ) $Agents = Invoke-RestMethod $Agents_Endpoint -Headers $Headers -ContentType \"application/json\" -Method \"Get\" # $Agents | ConvertTo-Json # $Agents.foreach({ $_ }) | Select-Object Agent_ID, Hostname, Site_Name, Client_Name, Monitoring_Type | Format-Table $Agent_ID = \"AGENT ID FROM TABLE\" $Agents . foreach ({ if ( $_ . Agent_ID -ne $Agent_ID ) { return } $Fields_Endpoint = GetURL ( \"agents/ $( $_ . Agent_ID ) /tasks\" ) $Fields = Invoke-RestMethod $Fields_Endpoint -Headers $Headers -ContentType \"application/json\" -Method \"Get\" # $Fields | ConvertTo-Json $Fields . foreach ({ $_ }) | Select-Object ID , Check_Name , Name , Actions , Task_Result | Format-Table }) or to see results # Query the TRMM API with PowerShell . .\\ dotenv . ps1 $Agents_Endpoint = GetURL ( \"agents\" ) $Agents = Invoke-RestMethod $Agents_Endpoint -Headers $Headers -ContentType \"application/json\" -Method \"Get\" # $Agents | ConvertTo-Json # $Agents.foreach({ $_ }) | Select-Object Agent_ID, Hostname, Site_Name, Client_Name, Monitoring_Type | Format-Table $Agent_ID = \"AGENT ID FROM TABLE\" $Agents . foreach ({ if ( $_ . Agent_ID -ne $Agent_ID ) { return } $Fields_Endpoint = GetURL ( \"agents/ $( $_ . Agent_ID ) /tasks\" ) $Fields = Invoke-RestMethod $Fields_Endpoint -Headers $Headers -ContentType \"application/json\" -Method \"Get\" # $Fields | ConvertTo-Json $Fields . foreach ({ $_ . Task_Result | Format-Table }) }) List Custom Fields of Agent \u00b6 # Query the TRMM API with PowerShell . .\\ dotenv . ps1 $Agent_ID = \"ENTER AGENT ID HERE\" $Agents_Endpoint = GetURL ( \"agents/ $( $Agent_ID ) \" ) $Agents = Invoke-RestMethod $Agents_Endpoint -Headers $Headers -ContentType \"application/json\" -Method \"Get\" ConvertTo-Json $Agents . Custom_Fields $Agents . Custom_Fields Update Custom Fields \u00b6 https://discord.com/channels/736478043522072608/888474369544847430/1004422340815360111 This will update the custom fields for an agent. The field value come from the custom fields two posts above. Other fields that exist will not be updated. If you want to update only 1 custom field, use only 1 entry in the array. # Query the TRMM API with PowerShell . .\\ dotenv . ps1 $Agent_ID = \"AGENT ID GOES HERE\" $Endpoint = GetURL ( \"agents/ $( $Agent_ID ) \" ) $Custom_Fields = [PSCustomObject] @{ custom_fields = @( @{ field = 13 string_value = \"Value updated from the API\" }, @{ field = 14 string_value = \"Another value from the API\" } ) } $Payload = $Custom_Fields | ConvertTo-Json $Response = Invoke-RestMethod $Endpoint -Headers $Headers -ContentType \"application/json\" -Method Put -Body $Payload if (! $?) { Write-Output \"Failed to submit request: $( $error [ 0 ]. ToString () ) \" Write-Output \"Stacktrace: $( $error [ 0 ]. Exception . ToString () ) \" Exit ( 1 ) } $Response | ConvertTo-Json List service information from Agent \u00b6 # Query the TRMM API with PowerShell . .\\ dotenv . ps1 $Payload = [PSCustomObject] @{ code = [string] ( Get-Content -Path .\\ TRMM-Run-Cmd-Remote . ps1 -Raw -Encoding UTF8 ) timeout = 90 args = @() shell = \"powershell\" } $Agent_ID = \"ENTER AGENT ID HERE\" $Rest_Params = @{ Uri = GetURL ( \"scripts/${Agent_ID}/test\" ) Headers = $Headers ContentType = \"application/json\" Method = \"POST\" Body = $Payload | ConvertTo-Json } # Write-Output $Rest_Params[\"Body\"] # Prefer to handle the error ourselves rather than fill the screen with red text. $ErrorActionPreference = 'SilentlyContinue' $Response = Invoke-RestMethod @Rest_Params if (! $?) { Write-Output \"Failed to submit request: $( $error [ 0 ]. ToString () ) \" Write-Output \"Stacktrace: $( $error [ 0 ]. Exception . ToString () ) \" Exit ( 1 ) } # $Response | ConvertTo-Json $Services = [System.Text.Encoding] :: UTF8 . GetString ( [System.Convert] :: FromBase64String ( $Response )) ConvertFrom-Json $Services Combining scripts \u00b6 This will iterate over all agents, filter out non-Windows and offline agents, run the PowerShell above to the first 5 services that are running, and compile the information in a Servers array. # Query the TRMM API with PowerShell . .\\ dotenv . ps1 # Default parameters. Body is missing because GET does not include the body. $Rest_Params = @{ Uri = \"\" Headers = $Headers ContentType = \"application/json\" Method = \"GET\" } # Prefer to handle the error ourselves rather than fill the screen with red text. $ErrorActionPreference = 'SilentlyContinue' $Rest_Params [ \"Uri\" ] = GetURL ( \"agents\" ) $Agents = Invoke-RestMethod @Rest_Params if (! $?) { Write-Output \"Failed to get list of agents from API: $( $error [ 0 ]. ToString () ) \" Write-Output \"Stacktrace: $( $error [ 0 ]. Exception . ToString () ) \" Exit ( 1 ) } # Remote command to run. $Payload = [PSCustomObject] @{ # Without the type casting to [string], this was returning properties relating to Get-Content. code = [string] ( Get-Content -Path .\\ TRMM-Run-Cmd-Remote . ps1 -Raw -Encoding UTF8 ) timeout = 90 args = @() shell = \"powershell\" } $Rest_Params [ \"Body\" ] = [string] ( $Payload | ConvertTo-Json ) $Rest_Params [ \"Method\" ] = \"POST\" $Servers = @() foreach ( $Agent in $Agents ) { # Build this object to match your needs. $Server = [PSCustomObject] @{ Agent_ID = $Agent . agent_id # Services = \"Error / Unavailable\" Service_Name = \"N/A\" Service_Status = \"N/A\" Service_DisplayName = \"N/A\" Hostname = $Agent . hostname Platform = $Agent . plat Status = $Agent . status } if ( $Agent . plat -ne \"windows\" -or $Agent . status -ne \"online\" ) { # Only process online Windows agents. Add other checks as necessary. # Uncomment this if you want to include filtered servers in the output. # $Servers += $Server.PSObject.Copy() continue } $Rest_Params [ \"Uri\" ] = GetURL ( \"scripts/ $( $Agent . Agent_ID ) /test\" ) $Response = Invoke-RestMethod @Rest_Params if (! $?) { $Servers += $Server . PSObject . Copy () continue } # Create a new server object for every item returned from the remote agent (Services in this case). $Services = ConvertFrom-Json ( [System.Text.Encoding] :: UTF8 . GetString ( [System.Convert] :: FromBase64String ( $Response ))) foreach ( $Service in $Services ) { $Server . Service_Name = $Service . Name $Server . Service_Status = $Service . Status $Server . Service_DisplayName = $Service . DisplayName $Servers += $Server . PSObject . Copy () } } $Servers | Format-Table Agent_ID , Hostname , Status , Service_Name , Service_Status , Service_DisplayName # $Servers Pulling Audit Logs \u00b6 <?php $ApiKey = \"XXX\" ; $BasicUrl = \"https://api.trmm.xxx.xxx/\" ; $Url = \"/logs/audit/\" ; $curl = curl_init (); curl_setopt ( $curl , CURLOPT_URL , $BasicUrl . $Url ); $payload = '{\"pagination\":{\"sortBy\":\"entry_time\",\"descending\":true,\"page\":1,\"rowsPerPage\":1000,\"rowsNumber\":2},\"agentFilter\":[\"QFhdnzJcFnodMibCGJYmfIwRyjgIazjajjMSvVWX\"],\"actionFilter\":[\"modify\"]}' ; curl_setopt ( $curl , CURLOPT_POSTFIELDS , $payload ); curl_setopt ( $curl , CURLOPT_RETURNTRANSFER , true ); $headers = [ 'Content-Type: application/json' , 'X-API-KEY: ' . $ApiKey ]; curl_setopt ( $curl , CURLOPT_HTTPHEADER , $headers ); curl_setopt ( $curl , CURLOPT_CUSTOMREQUEST , 'PATCH' ); $data = curl_exec ( $curl ); curl_close ( $curl ); $audit = json_decode ( $data , true ); var_dump ( $audit ); ?> Update software using API \u00b6 #!/rmm/api/env/bin/python import concurrent.futures import requests API = \"https://api.CHANGEME.com\" API_KEY = \"CHANGEME\" HEADERS = { \"Content-Type\" : \"application/json\" , \"X-API-KEY\" : API_KEY , } MAX_WORKERS = 10 def create_list_of_urls (): ret = [] agents = requests . get ( f \" { API } /agents/?detail=false\" , headers = HEADERS ) for agent in agents . json (): ret . append ( f \" { API } /software/ { agent [ 'agent_id' ] } /\" ) # refresh software endpoint return ret def do_software_refresh ( url ): r = requests . put ( url , headers = HEADERS ) return r . json () with concurrent . futures . ThreadPoolExecutor ( max_workers = MAX_WORKERS ) as executor : futures = [] for url in create_list_of_urls (): futures . append ( executor . submit ( do_software_refresh , url )) for future in concurrent . futures . as_completed ( futures ): print ( future . result ())","title":"API Access"},{"location":"functions/api/#api-access","text":"Tactical RMM uses a Django Rest Framework backend which is designed to be consumed by a VueJS frontend . Therefore, anything you can do via the web interface, you can do via the API. However this makes it difficult to document the API as it has only been designed to be consumed by our vue frontend. The easiest way to see what endpoint/payload you need to send is to open your browser's developer tools > Network tab. Then, perform the action you wish to do via the api in Tactical's web interface and watch the network tab to see the endpoint and the payload that is generated, and use that as an example of how to structure your api request. Please note that using an API key will bypass 2FA authentication. When creating the key you'll need to choose a user, which will reflect what permissions the key has based on the user's role. Navigate to Settings > Global Settings > API Keys to generate a key. Warning Pay attention to your trailing / they matter. Headers: { \"Content-Type\" : \"application/json\" , \"X-API-KEY\" : \"J57BXCFDA2WBCXH0XTELBR5KAI69CNCZ\" } Example curl request: curl https://api.example.com/clients/ -H \"X-API-KEY: Y57BXCFAA9WBCXH0XTEL6R5KAK69CNCZ\"","title":"API Access"},{"location":"functions/api/#enable-swagger","text":"This will let you add a browser interface to see how you can use the API better. Open /rmm/api/tacticalrmm/tacticalrmm/local_settings.py and add SWAGGER_ENABLED = True Restart Django: sudo systemctl restart rmm.service Then visit https://api.example.com/api/schema/swagger-ui/ to see it in action.","title":"Enable Swagger"},{"location":"functions/api/#beta-api","text":"Version added: Tactical RMM v0.16.5 A beta API is now available at /beta/v1 which supports filtering and pagination. To activate it, first enable swagger (see above) and then add the following line to /rmm/api/tacticalrmm/tacticalrmm/local_settings.py : BETA_API_ENABLED = True Then restart Django with: sudo systemctl restart rmm.service and check Swagger for usage.","title":"Beta API"},{"location":"functions/api/#querying-the-api","text":"Here are some examples: Example Code Python PowerShell 1 PowerShell 2 Requests Windows Update check to run against agent ID import requests API = \"http://api.example.com\" HEADERS = { \"Content-Type\" : \"application/json\" , \"X-API-KEY\" : \"DKNRPTHSAPCKT8A36MCAMNZREWWWFPWI\" , } def trigger_update_scan (): agents = requests . get ( f \" { API } /agents/?detail=false\" , headers = HEADERS ) for agent in agents . json (): r = requests . post ( f \" { API } /winupdate/ { agent [ 'agent_id' ] } /scan/\" , headers = HEADERS ) print ( r . json ()) if __name__ == \"__main__\" : trigger_update_scan () # Example - Get all agents using API $headers = @{ 'X-API-KEY' = 'ABC1234567890987654321' } $url = \"https://api.yourdomain.com/agents/\" $agentsResult = Invoke-RestMethod -Method 'Get' -Uri $url -Headers $headers -ContentType \"application/json\" foreach ( $agent in $agentsResult ) { Write-Host $agent #Write-Host $agent.hostname } # Example - Send PowerShell command to agent. Make sure to pass {{agent.agent_id}} as a parameter param ( $AgentId ) $headers = @{ 'X-API-KEY' = 'ABC1234567890987654321' } $url = \"https://api.yourdomain.com/agents/$AgentId/cmd/\" $body = @{ \"shell\" = \"powershell\" \"cmd\" = \"dir c:\\\\users\" \"timeout\" = 30 } $commandResult = Invoke-RestMethod -Method 'Post' -Uri $url -Body ( $body | ConvertTo-Json ) -Headers $headers -ContentType \"application/json\" Write-Host $commandResult","title":"Querying the API"},{"location":"functions/api/#running-a-script-on-an-agent-using-the-api","text":"First get the script ID from the Script library by hovering your mouse over it in the script list and looking at the tooltip. POST to the endpoint /agents/<agentid>/runscript/ this: { \"output\": \"forget\", \"emails\": [], \"emailMode\": \"default\", \"custom_field\": null, \"save_all_output\": false, \"script\": 89, // primary key of script in postgres \"args\": [ \"arg1\", \"arg2\" ], \"env_vars\": [], \"run_as_user\": false, \"timeout\": 90 // seconds } Example: Run a script on an agent PowerShell $apiUrl = 'https://api.example.com/agents/CHANGEME/runscript/' $jsonPayload = @{ output = \"wait\" emails = @() emailMode = \"default\" custom_field = $null save_all_output = $false script = 89 args = @() env_vars = @() run_as_user = $false timeout = 90 } | ConvertTo-Json $headers = @{ 'Content-Type' = 'application/json' 'X-API-KEY' = 'changeme' } $response = Invoke-RestMethod -Uri $apiUrl -Method Post -Body $jsonPayload -Headers $headers $response","title":"Running a Script on an Agent Using the API"},{"location":"functions/api/#api-via-cli","text":"https://gitlab.com/NiceGuyIT/trmm-cli","title":"API via CLI"},{"location":"functions/api/#api-examples","text":"","title":"API Examples"},{"location":"functions/api/#listing-all-software-on-all-agents","text":"import requests API = \"https://api.example.com\" HEADERS = { \"Content-Type\" : \"application/json\" , \"X-API-KEY\" : \"9SI43IFUMPEVRWOZR4NC8PGP4ZLA9PYX\" , } def get_software (): agents = requests . get ( f \" { API } /agents/?detail=false\" , headers = HEADERS ) # get a list of all agents for agent in agents . json (): # loop thru all agents and print list of installed software r = requests . get ( f \" { API } /software/ { agent [ 'agent_id' ] } /\" , headers = HEADERS ) print ( r . json ()) if __name__ == \"__main__\" : get_software ()","title":"Listing all software on all agents:"},{"location":"functions/api/#list-agents","text":"# Query the TRMM API with PowerShell . .\\ dotenv . ps1 $Agents_Endpoint = GetURL ( \"agents\" ) $Agents = Invoke-RestMethod $Agents_Endpoint -Headers $Headers -ContentType \"application/json\" -Method \"Get\" # $Agents | ConvertTo-Json $Agents . foreach ({ $_ }) | Select-Object Agent_ID , Hostname , Site_Name , Client_Name , Monitoring_Type | Format-Table","title":"List Agents"},{"location":"functions/api/#list-tasks","text":"# Query the TRMM API with PowerShell . .\\ dotenv . ps1 $Tasks_Endpoint = GetURL ( \"tasks\" ) $Response = Invoke-RestMethod $Tasks_Endpoint -Headers $Headers -ContentType \"application/json\" -Method \"Get\" # $Response | ConvertTo-Json $Response . foreach ({ $_ }) | Select-Object ID , Policy , Name , Custom_Field | Format-Table","title":"List Tasks"},{"location":"functions/api/#get-custom-fields","text":"$TRMM_API_Base_Endpoint = Read-Host \"Please provide your API domain i.e https://api.domain.com\" $TRMM_API_Key = Read-Host \"Please provide your API Key\" $TRMM_API_CustomFields_Endpoint = $TRMM_API_Base_Endpoint + \"/core/customfields\" $TRMM_Request_Headers = @{ \"X-API-KEY\" = $TRMM_API_Key } $Request = Invoke-RestMethod $TRMM_API_CustomFields_Endpoint -Headers $TRMM_Request_Headers -Method Get $TRMM_Agent_ExistingCustomFields = ( $Request | ? { $_ . model -eq 'Agent' }) # Gets all of the Windows Features and places it in an array to parse later # This is to ensure that TRMM has all Windows Feature roles available as a Custom Field $AllWindowsFeatures = Get-WindowsFeature $TRMM_Role_AllCustomFields = @() foreach ( $WindowsFeature in $AllWindowsFeatures ){ if ( $WindowsFeature . Depth -eq 1 ){ $PrimaryRole = $WindowsFeature . DisplayName } else { $TRMM_Role_AllCustomFields += [PSCustomObject] @{ \"Role\" = $PrimaryRole \"Value\" = $WindowsFeature . DisplayName } } } $Unique_Roles = $TRMM_Role_AllCustomFields | Select -Unique Role #Loop through each WindowsFeature foreach ( $WindowsFeature in $Unique_Roles ){ if ( $TRMM_Agent_ExistingCustomFields . Name -like \"* $( $WindowsFeature . Role ) *\" ){ # Need to check if it also contains the value } else { # Check to see if the Role is an Array or an Object # Convert to Array otherwise if ((( $TRMM_Role_AllCustomFields | ? { $_ . Role -eq $WindowsFeature . Role }). Value ) -isnot [array] ){ $CustomFieldOptions = @(( $TRMM_Role_AllCustomFields | ? { $_ . Role -eq $WindowsFeature . Role }). Value ) } else { $CustomFieldOptions = ( $TRMM_Role_AllCustomFields | ? { $_ . Role -eq $WindowsFeature . Role }). Value } # Create the Custom Field body $CustomFieldData = @{ model = \"agent\" name = \"Server Role - \" + $WindowsFeature . Role type = \"multiple\" options = $CustomFieldOptions } $CreateCustomField = Invoke-RestMethod $TRMM_API_CustomFields_Endpoint -Headers $TRMM_Request_Headers -Method Post -Body ( $CustomFieldData | ConvertTo-Json ) -ContentType \"application/json\" } }","title":"Get Custom Fields"},{"location":"functions/api/#get-custom-fields_1","text":"https://discord.com/channels/736478043522072608/888474369544847430/1004184193078669522 import requests import json API = \"https://api.example.com\" HEADERS = { \"Content-Type\" : \"application/json\" , \"X-API-KEY\" : \"changeme\" , } payload = { \"custom_fields\" : [{ \"string_value\" : \"66666\" , \"field\" : 2 }]} r = requests . put ( f \" { API } /agents/IcAhWvOHlADwjuYmndAkjbJuhSdWvWjtvYcYjCZk/\" , data = json . dumps ( payload ), headers = HEADERS , ) print ( r . __dict__ )","title":"Get Custom Fields"},{"location":"functions/api/#create-collector-tasks","text":"https://discord.com/channels/736478043522072608/888474369544847430/1004383584070676610 # Query the TRMM API with PowerShell # Add this to dotenv.ps1 #$TRMM_API_KEY = \"\" #$TRMM_API_DOMAIN = \"\" . .\\ dotenv . ps1 function GetURL { param ( [string] $Path ) return \"https://${TRMM_API_DOMAIN}/${Path}/\" } $Headers = @{ 'X-API-KEY' = $TRMM_API_KEY } $Collector = [PSCustomObject] @{ policy = 1 actions = @(@{ name = \"Collector - Location - City and State\" type = \"script\" script = 121 timeout = 90 script_args = @() }) assigned_check = $null custom_field = 14 name = \"Get city and state from API\" # expire_date = $null run_time_date = \"2022-08-02T08:00:00Z\" # run_time_bit_weekdays = $null weekly_interval = 1 daily_interval = 1 # monthly_months_of_year = $null # monthly_days_of_month = $null # monthly_weeks_of_month = $null # task_instance_policy = 0 # task_repetition_interval = $null # task_repetition_duration = $null # stop_task_at_duration_end = $false # random_task_delay = $null # remove_if_not_scheduled = $false run_asap_after_missed = $true task_type = \"daily\" alert_severity = \"info\" # collector_all_output = $false # continue_on_error = $false } $Tasks_Endpoint = GetURL ( \"tasks\" ) $Payload = $Collector | ConvertTo-Json $Response = Invoke-RestMethod $Tasks_Endpoint -Headers $Headers -ContentType \"application/json\" -Method \"Post\" -Body $Payload if (! $?) { Write-Output \"Failed to submit request: $( $error [ 0 ]. ToString () ) \" Write-Output \"Stacktrace: $( $error [ 0 ]. Exception . ToString () ) \" Exit ( 1 ) } $Response | ConvertTo-Json","title":"Create Collector Tasks"},{"location":"functions/api/#show-tasks","text":"# Query the TRMM API with PowerShell . .\\ dotenv . ps1 $Tasks_Endpoint = GetURL ( \"tasks\" ) $Response = Invoke-RestMethod $Tasks_Endpoint -Headers $Headers -ContentType \"application/json\" -Method \"Get\" # $Response | ConvertTo-Json $Response . foreach ({ $_ }) | Select-Object ID , Policy , Name , Custom_Field | Format-Table","title":"Show Tasks"},{"location":"functions/api/#show-taskcollector-results","text":"# Query the TRMM API with PowerShell . .\\ dotenv . ps1 $Agents_Endpoint = GetURL ( \"agents\" ) $Agents = Invoke-RestMethod $Agents_Endpoint -Headers $Headers -ContentType \"application/json\" -Method \"Get\" # $Agents | ConvertTo-Json # $Agents.foreach({ $_ }) | Select-Object Agent_ID, Hostname, Site_Name, Client_Name, Monitoring_Type | Format-Table $Agent_ID = \"AGENT ID FROM TABLE\" $Agents . foreach ({ if ( $_ . Agent_ID -ne $Agent_ID ) { return } $Fields_Endpoint = GetURL ( \"agents/ $( $_ . Agent_ID ) /tasks\" ) $Fields = Invoke-RestMethod $Fields_Endpoint -Headers $Headers -ContentType \"application/json\" -Method \"Get\" # $Fields | ConvertTo-Json $Fields . foreach ({ $_ }) | Select-Object ID , Check_Name , Name , Actions , Task_Result | Format-Table }) or to see results # Query the TRMM API with PowerShell . .\\ dotenv . ps1 $Agents_Endpoint = GetURL ( \"agents\" ) $Agents = Invoke-RestMethod $Agents_Endpoint -Headers $Headers -ContentType \"application/json\" -Method \"Get\" # $Agents | ConvertTo-Json # $Agents.foreach({ $_ }) | Select-Object Agent_ID, Hostname, Site_Name, Client_Name, Monitoring_Type | Format-Table $Agent_ID = \"AGENT ID FROM TABLE\" $Agents . foreach ({ if ( $_ . Agent_ID -ne $Agent_ID ) { return } $Fields_Endpoint = GetURL ( \"agents/ $( $_ . Agent_ID ) /tasks\" ) $Fields = Invoke-RestMethod $Fields_Endpoint -Headers $Headers -ContentType \"application/json\" -Method \"Get\" # $Fields | ConvertTo-Json $Fields . foreach ({ $_ . Task_Result | Format-Table }) })","title":"Show Task/collector results"},{"location":"functions/api/#list-custom-fields-of-agent","text":"# Query the TRMM API with PowerShell . .\\ dotenv . ps1 $Agent_ID = \"ENTER AGENT ID HERE\" $Agents_Endpoint = GetURL ( \"agents/ $( $Agent_ID ) \" ) $Agents = Invoke-RestMethod $Agents_Endpoint -Headers $Headers -ContentType \"application/json\" -Method \"Get\" ConvertTo-Json $Agents . Custom_Fields $Agents . Custom_Fields","title":"List Custom Fields of Agent"},{"location":"functions/api/#update-custom-fields","text":"https://discord.com/channels/736478043522072608/888474369544847430/1004422340815360111 This will update the custom fields for an agent. The field value come from the custom fields two posts above. Other fields that exist will not be updated. If you want to update only 1 custom field, use only 1 entry in the array. # Query the TRMM API with PowerShell . .\\ dotenv . ps1 $Agent_ID = \"AGENT ID GOES HERE\" $Endpoint = GetURL ( \"agents/ $( $Agent_ID ) \" ) $Custom_Fields = [PSCustomObject] @{ custom_fields = @( @{ field = 13 string_value = \"Value updated from the API\" }, @{ field = 14 string_value = \"Another value from the API\" } ) } $Payload = $Custom_Fields | ConvertTo-Json $Response = Invoke-RestMethod $Endpoint -Headers $Headers -ContentType \"application/json\" -Method Put -Body $Payload if (! $?) { Write-Output \"Failed to submit request: $( $error [ 0 ]. ToString () ) \" Write-Output \"Stacktrace: $( $error [ 0 ]. Exception . ToString () ) \" Exit ( 1 ) } $Response | ConvertTo-Json","title":"Update Custom Fields"},{"location":"functions/api/#list-service-information-from-agent","text":"# Query the TRMM API with PowerShell . .\\ dotenv . ps1 $Payload = [PSCustomObject] @{ code = [string] ( Get-Content -Path .\\ TRMM-Run-Cmd-Remote . ps1 -Raw -Encoding UTF8 ) timeout = 90 args = @() shell = \"powershell\" } $Agent_ID = \"ENTER AGENT ID HERE\" $Rest_Params = @{ Uri = GetURL ( \"scripts/${Agent_ID}/test\" ) Headers = $Headers ContentType = \"application/json\" Method = \"POST\" Body = $Payload | ConvertTo-Json } # Write-Output $Rest_Params[\"Body\"] # Prefer to handle the error ourselves rather than fill the screen with red text. $ErrorActionPreference = 'SilentlyContinue' $Response = Invoke-RestMethod @Rest_Params if (! $?) { Write-Output \"Failed to submit request: $( $error [ 0 ]. ToString () ) \" Write-Output \"Stacktrace: $( $error [ 0 ]. Exception . ToString () ) \" Exit ( 1 ) } # $Response | ConvertTo-Json $Services = [System.Text.Encoding] :: UTF8 . GetString ( [System.Convert] :: FromBase64String ( $Response )) ConvertFrom-Json $Services","title":"List service information from Agent"},{"location":"functions/api/#combining-scripts","text":"This will iterate over all agents, filter out non-Windows and offline agents, run the PowerShell above to the first 5 services that are running, and compile the information in a Servers array. # Query the TRMM API with PowerShell . .\\ dotenv . ps1 # Default parameters. Body is missing because GET does not include the body. $Rest_Params = @{ Uri = \"\" Headers = $Headers ContentType = \"application/json\" Method = \"GET\" } # Prefer to handle the error ourselves rather than fill the screen with red text. $ErrorActionPreference = 'SilentlyContinue' $Rest_Params [ \"Uri\" ] = GetURL ( \"agents\" ) $Agents = Invoke-RestMethod @Rest_Params if (! $?) { Write-Output \"Failed to get list of agents from API: $( $error [ 0 ]. ToString () ) \" Write-Output \"Stacktrace: $( $error [ 0 ]. Exception . ToString () ) \" Exit ( 1 ) } # Remote command to run. $Payload = [PSCustomObject] @{ # Without the type casting to [string], this was returning properties relating to Get-Content. code = [string] ( Get-Content -Path .\\ TRMM-Run-Cmd-Remote . ps1 -Raw -Encoding UTF8 ) timeout = 90 args = @() shell = \"powershell\" } $Rest_Params [ \"Body\" ] = [string] ( $Payload | ConvertTo-Json ) $Rest_Params [ \"Method\" ] = \"POST\" $Servers = @() foreach ( $Agent in $Agents ) { # Build this object to match your needs. $Server = [PSCustomObject] @{ Agent_ID = $Agent . agent_id # Services = \"Error / Unavailable\" Service_Name = \"N/A\" Service_Status = \"N/A\" Service_DisplayName = \"N/A\" Hostname = $Agent . hostname Platform = $Agent . plat Status = $Agent . status } if ( $Agent . plat -ne \"windows\" -or $Agent . status -ne \"online\" ) { # Only process online Windows agents. Add other checks as necessary. # Uncomment this if you want to include filtered servers in the output. # $Servers += $Server.PSObject.Copy() continue } $Rest_Params [ \"Uri\" ] = GetURL ( \"scripts/ $( $Agent . Agent_ID ) /test\" ) $Response = Invoke-RestMethod @Rest_Params if (! $?) { $Servers += $Server . PSObject . Copy () continue } # Create a new server object for every item returned from the remote agent (Services in this case). $Services = ConvertFrom-Json ( [System.Text.Encoding] :: UTF8 . GetString ( [System.Convert] :: FromBase64String ( $Response ))) foreach ( $Service in $Services ) { $Server . Service_Name = $Service . Name $Server . Service_Status = $Service . Status $Server . Service_DisplayName = $Service . DisplayName $Servers += $Server . PSObject . Copy () } } $Servers | Format-Table Agent_ID , Hostname , Status , Service_Name , Service_Status , Service_DisplayName # $Servers","title":"Combining scripts"},{"location":"functions/api/#pulling-audit-logs","text":"<?php $ApiKey = \"XXX\" ; $BasicUrl = \"https://api.trmm.xxx.xxx/\" ; $Url = \"/logs/audit/\" ; $curl = curl_init (); curl_setopt ( $curl , CURLOPT_URL , $BasicUrl . $Url ); $payload = '{\"pagination\":{\"sortBy\":\"entry_time\",\"descending\":true,\"page\":1,\"rowsPerPage\":1000,\"rowsNumber\":2},\"agentFilter\":[\"QFhdnzJcFnodMibCGJYmfIwRyjgIazjajjMSvVWX\"],\"actionFilter\":[\"modify\"]}' ; curl_setopt ( $curl , CURLOPT_POSTFIELDS , $payload ); curl_setopt ( $curl , CURLOPT_RETURNTRANSFER , true ); $headers = [ 'Content-Type: application/json' , 'X-API-KEY: ' . $ApiKey ]; curl_setopt ( $curl , CURLOPT_HTTPHEADER , $headers ); curl_setopt ( $curl , CURLOPT_CUSTOMREQUEST , 'PATCH' ); $data = curl_exec ( $curl ); curl_close ( $curl ); $audit = json_decode ( $data , true ); var_dump ( $audit ); ?>","title":"Pulling Audit Logs"},{"location":"functions/api/#update-software-using-api","text":"#!/rmm/api/env/bin/python import concurrent.futures import requests API = \"https://api.CHANGEME.com\" API_KEY = \"CHANGEME\" HEADERS = { \"Content-Type\" : \"application/json\" , \"X-API-KEY\" : API_KEY , } MAX_WORKERS = 10 def create_list_of_urls (): ret = [] agents = requests . get ( f \" { API } /agents/?detail=false\" , headers = HEADERS ) for agent in agents . json (): ret . append ( f \" { API } /software/ { agent [ 'agent_id' ] } /\" ) # refresh software endpoint return ret def do_software_refresh ( url ): r = requests . put ( url , headers = HEADERS ) return r . json () with concurrent . futures . ThreadPoolExecutor ( max_workers = MAX_WORKERS ) as executor : futures = [] for url in create_list_of_urls (): futures . append ( executor . submit ( do_software_refresh , url )) for future in concurrent . futures . as_completed ( futures ): print ( future . result ())","title":"Update software using API"},{"location":"functions/automated_checks/","text":"Checks \u00b6 Checks vs Tasks \u00b6 When to Use Checks for Scripts \u00b6 Define custom return codes for Information and Warning levels. Configure alerts only after a specified number of consecutive failures. When to Use Tasks for Scripts \u00b6 Execute multiple commands and/or scripts in sequence. Leverage advanced scheduling options for flexibility. How Often Are Checks Run? \u00b6 The frequency of checks is controlled at two levels: Per Check Configuration Each check has a Run Check Every (seconds) setting. Setting this to 0 defaults to the agent's global value. Agent Default Configuration The default check frequency for the agent is set under Edit Agent > General in the Run Checks Every field. The default value is 120 seconds. Best Practices \u00b6 Use Automation Policies to apply checks efficiently. Customize the frequency of individual checks as needed.","title":"Checks"},{"location":"functions/automated_checks/#checks","text":"","title":"Checks"},{"location":"functions/automated_checks/#checks-vs-tasks","text":"","title":"Checks vs Tasks"},{"location":"functions/automated_checks/#when-to-use-checks-for-scripts","text":"Define custom return codes for Information and Warning levels. Configure alerts only after a specified number of consecutive failures.","title":"When to Use Checks for Scripts"},{"location":"functions/automated_checks/#when-to-use-tasks-for-scripts","text":"Execute multiple commands and/or scripts in sequence. Leverage advanced scheduling options for flexibility.","title":"When to Use Tasks for Scripts"},{"location":"functions/automated_checks/#how-often-are-checks-run","text":"The frequency of checks is controlled at two levels: Per Check Configuration Each check has a Run Check Every (seconds) setting. Setting this to 0 defaults to the agent's global value. Agent Default Configuration The default check frequency for the agent is set under Edit Agent > General in the Run Checks Every field. The default value is 120 seconds.","title":"How Often Are Checks Run?"},{"location":"functions/automated_checks/#best-practices","text":"Use Automation Policies to apply checks efficiently. Customize the frequency of individual checks as needed.","title":"Best Practices"},{"location":"functions/automated_tasks/","text":"Automated Tasks \u00b6 An Automated Task allows you to run scripts and/or commands on an agent, with flexible scheduling options. Task Triggers \u00b6 Time-Based \u00b6 Daily, Weekly, or Monthly : Schedule tasks to run at regular intervals, as expected. Note: On Linux and macOS, tasks will execute based on the \"Start Time\" field, ignoring the date portion. For example, a daily task set to start at 12:55 PM will run at that time every day starting from when the task is created. Run Once : For future dates, tasks run as scheduled. For past dates, tasks are created to run 5 minutes after being registered with the Windows Task Scheduler. This ensures the task runs at least once, as the scheduler will not execute tasks with past \"Run Once\" dates. On Check Failure \u00b6 Automatically trigger a script to address issues when a Check fails. Onboarding \u00b6 Use this type of task to execute \"Run Once\" scripts during agent onboarding. These tasks run immediately after the task is created on the agent, which happens a few minutes after the install of a new agent. Ideal for: - Setting workstation defaults - Installing software - Configuring machines Integrate these tasks with Automation Policies to streamline the setup of new devices. Manual \u00b6 Manually triggered tasks for on-demand operations. Example: A Windows Defender Cleanup Task might perform the following when manually triggered: 1. Delete all Shadow Copies from VSS. 2. Create a new VSS Snapshot. 3. Clear Defender logs to prevent duplicate alerts. 4. Run a full Defender scan. This is useful for addressing alerts about Defender detections (e.g., malware or adware in download folders). Task Actions \u00b6 Execute any script from your Script Library , or use Batch or PowerShell commands. Configure multiple scripts/commands to run sequentially. Optionally continue or halt the sequence based on errors. Collector Tasks \u00b6 Collector tasks allow you to save script output directly to a custom field. How to Create Collector Tasks \u00b6 Add the task to an Automation Policy or directly to an agent. During task creation: Select the Collector checkbox. Choose the custom field where the output should be saved. Note Currently, you can only save data to agent-level custom fields. For more details, see Custom Fields and Scripting .","title":"Automated Tasks"},{"location":"functions/automated_tasks/#automated-tasks","text":"An Automated Task allows you to run scripts and/or commands on an agent, with flexible scheduling options.","title":"Automated Tasks"},{"location":"functions/automated_tasks/#task-triggers","text":"","title":"Task Triggers"},{"location":"functions/automated_tasks/#time-based","text":"Daily, Weekly, or Monthly : Schedule tasks to run at regular intervals, as expected. Note: On Linux and macOS, tasks will execute based on the \"Start Time\" field, ignoring the date portion. For example, a daily task set to start at 12:55 PM will run at that time every day starting from when the task is created. Run Once : For future dates, tasks run as scheduled. For past dates, tasks are created to run 5 minutes after being registered with the Windows Task Scheduler. This ensures the task runs at least once, as the scheduler will not execute tasks with past \"Run Once\" dates.","title":"Time-Based"},{"location":"functions/automated_tasks/#on-check-failure","text":"Automatically trigger a script to address issues when a Check fails.","title":"On Check Failure"},{"location":"functions/automated_tasks/#onboarding","text":"Use this type of task to execute \"Run Once\" scripts during agent onboarding. These tasks run immediately after the task is created on the agent, which happens a few minutes after the install of a new agent. Ideal for: - Setting workstation defaults - Installing software - Configuring machines Integrate these tasks with Automation Policies to streamline the setup of new devices.","title":"Onboarding"},{"location":"functions/automated_tasks/#manual","text":"Manually triggered tasks for on-demand operations. Example: A Windows Defender Cleanup Task might perform the following when manually triggered: 1. Delete all Shadow Copies from VSS. 2. Create a new VSS Snapshot. 3. Clear Defender logs to prevent duplicate alerts. 4. Run a full Defender scan. This is useful for addressing alerts about Defender detections (e.g., malware or adware in download folders).","title":"Manual"},{"location":"functions/automated_tasks/#task-actions","text":"Execute any script from your Script Library , or use Batch or PowerShell commands. Configure multiple scripts/commands to run sequentially. Optionally continue or halt the sequence based on errors.","title":"Task Actions"},{"location":"functions/automated_tasks/#collector-tasks","text":"Collector tasks allow you to save script output directly to a custom field.","title":"Collector Tasks"},{"location":"functions/automated_tasks/#how-to-create-collector-tasks","text":"Add the task to an Automation Policy or directly to an agent. During task creation: Select the Collector checkbox. Choose the custom field where the output should be saved. Note Currently, you can only save data to agent-level custom fields. For more details, see Custom Fields and Scripting .","title":"How to Create Collector Tasks"},{"location":"functions/automation_policies/","text":"Automation Policies \u00b6 Automation policies in Tactical RMM allow for mass deployment of Checks, Automated Tasks, Patch Policies, and Alert Templates. You can apply Automation Policies to: Global Settings Client Site Agent You can also see a list of Relations that show what policy is applied to what Clients / Sites / Agents. Before you ask, multiple automation policies per level is in the todo list. Creating Automation Policies \u00b6 In the dashboard, navigate to Settings > Automation Manager . Use the Add button to create a blank Automation Policy. The options available are: Name - The name that will be used to identify the automation policy in the dashboard. Description - Optional description of the automation policy. Enabled - Specifies if the automation policy is active or not. Enforced - Specifies that the automation policy should overwrite any conflicting checks configured directly on the agent. Policy Inheritance \u00b6 They get applied in this order: Global Settings Client Site Agent At each level you can block policy inheritance from the level above using checkboxes in the appropriate screens. Adding Windows Patch Management Policy \u00b6 Under the Automation Manager you can create a Patch Policy and control what patches are applied, when, and if the computer is rebooted after. Note Most \"regular\" Windows patches are listed in the \"Other\" category.","title":"Automation Policies"},{"location":"functions/automation_policies/#automation-policies","text":"Automation policies in Tactical RMM allow for mass deployment of Checks, Automated Tasks, Patch Policies, and Alert Templates. You can apply Automation Policies to: Global Settings Client Site Agent You can also see a list of Relations that show what policy is applied to what Clients / Sites / Agents. Before you ask, multiple automation policies per level is in the todo list.","title":"Automation Policies"},{"location":"functions/automation_policies/#creating-automation-policies","text":"In the dashboard, navigate to Settings > Automation Manager . Use the Add button to create a blank Automation Policy. The options available are: Name - The name that will be used to identify the automation policy in the dashboard. Description - Optional description of the automation policy. Enabled - Specifies if the automation policy is active or not. Enforced - Specifies that the automation policy should overwrite any conflicting checks configured directly on the agent.","title":"Creating Automation Policies"},{"location":"functions/automation_policies/#policy-inheritance","text":"They get applied in this order: Global Settings Client Site Agent At each level you can block policy inheritance from the level above using checkboxes in the appropriate screens.","title":"Policy Inheritance"},{"location":"functions/automation_policies/#adding-windows-patch-management-policy","text":"Under the Automation Manager you can create a Patch Policy and control what patches are applied, when, and if the computer is rebooted after. Note Most \"regular\" Windows patches are listed in the \"Other\" category.","title":"Adding Windows Patch Management Policy"},{"location":"functions/custom_fields/","text":"Custom Fields \u00b6 Warning \\ is an escape character, if you want to use that in a custom field you will need to use \\\\ instead. Adding Custom Fields \u00b6 In the dashboard, go to Settings > Global Settings > Custom Fields and click Add Custom Field . Info Everything between {{}} is CaSe sEnSiTive. The following options are available to configure on custom fields: Model - This is the object that the custom field will be added to. The available options are: Agent Site Client Name - Sets the name of the custom field. This will be used to identify the custom field in the dashboard and in scripts. Field Type - Sets the type of field. Below are the allowed types. Text Number Single select dropdown Multi-select dropdown Checkbox ( 1 = Checked or $null = Unchecked) DateTime Input Options - Only available on Single and Multiple-select dropdowns . Sets the options to choose from. Default Value - If no value is found when looking up the custom field; this value will instead be supplied. Required - This makes the field required when adding new Clients, Sites, and Agents If this is set a default value will need to be set as well . Hide in Dashboard - This will not show the custom field in Client, Site, and Agent forms in the dashboard. This is useful if the custom field's value is updated by a collector task and only supplied to scripts. Using Custom Fields in the Dashboard \u00b6 Once the custom fields are added, they will show up in the Client, Site, and Agent Add / Edit forms. Using Custom Fields in Scripts \u00b6 Tactical RMM allows for passing various database fields for Clients, Sites, and Agents in scripts. This includes custom fields as well! Warning The characters within the brackets are case-sensitive! In your script's arguments, use the notation {{client.AV_KEY}} . This will lookup the client for the agent that the script is running on and find the custom field named AV_KEY and replace that with the value. The same is also true for {{site.no_patching}} and {{agent.Another Field}} . For more information see SCRIPTING PAGE . Populating Custom Fields Automatically \u00b6 Tactical RMM supports automatically collecting information and saving them directly to custom fields. This is made possible by creating Collector Tasks . These are just normal Automated Tasks, but instead they will save the last line of the standard output to the custom field that is selected. Info To populate a multiple select custom field, return a string with the options separated by a comma \"This,will,be,an,array\" . For more information See Collector Tasks . Video Walkthru \u00b6","title":"Custom Fields"},{"location":"functions/custom_fields/#custom-fields","text":"Warning \\ is an escape character, if you want to use that in a custom field you will need to use \\\\ instead.","title":"Custom Fields"},{"location":"functions/custom_fields/#adding-custom-fields","text":"In the dashboard, go to Settings > Global Settings > Custom Fields and click Add Custom Field . Info Everything between {{}} is CaSe sEnSiTive. The following options are available to configure on custom fields: Model - This is the object that the custom field will be added to. The available options are: Agent Site Client Name - Sets the name of the custom field. This will be used to identify the custom field in the dashboard and in scripts. Field Type - Sets the type of field. Below are the allowed types. Text Number Single select dropdown Multi-select dropdown Checkbox ( 1 = Checked or $null = Unchecked) DateTime Input Options - Only available on Single and Multiple-select dropdowns . Sets the options to choose from. Default Value - If no value is found when looking up the custom field; this value will instead be supplied. Required - This makes the field required when adding new Clients, Sites, and Agents If this is set a default value will need to be set as well . Hide in Dashboard - This will not show the custom field in Client, Site, and Agent forms in the dashboard. This is useful if the custom field's value is updated by a collector task and only supplied to scripts.","title":"Adding Custom Fields"},{"location":"functions/custom_fields/#using-custom-fields-in-the-dashboard","text":"Once the custom fields are added, they will show up in the Client, Site, and Agent Add / Edit forms.","title":"Using Custom Fields in the Dashboard"},{"location":"functions/custom_fields/#using-custom-fields-in-scripts","text":"Tactical RMM allows for passing various database fields for Clients, Sites, and Agents in scripts. This includes custom fields as well! Warning The characters within the brackets are case-sensitive! In your script's arguments, use the notation {{client.AV_KEY}} . This will lookup the client for the agent that the script is running on and find the custom field named AV_KEY and replace that with the value. The same is also true for {{site.no_patching}} and {{agent.Another Field}} . For more information see SCRIPTING PAGE .","title":"Using Custom Fields in Scripts"},{"location":"functions/custom_fields/#populating-custom-fields-automatically","text":"Tactical RMM supports automatically collecting information and saving them directly to custom fields. This is made possible by creating Collector Tasks . These are just normal Automated Tasks, but instead they will save the last line of the standard output to the custom field that is selected. Info To populate a multiple select custom field, return a string with the options separated by a comma \"This,will,be,an,array\" . For more information See Collector Tasks .","title":"Populating Custom Fields Automatically"},{"location":"functions/custom_fields/#video-walkthru","text":"","title":"Video Walkthru"},{"location":"functions/django_admin/","text":"Django Admin \u00b6 Warning Do not use the Django admin unless you really know what you're doing. You should never need to access it unless you are familiar with Django or are instructed to do something here by one of the developers. The Django admin is basically a web interface for the postgres database. As of Tactical RMM v0.4.19, the Django admin is disabled by default. To enable it, edit /rmm/api/tacticalrmm/tacticalrmm/local_settings.py and change ADMIN_ENABLED from False to True then run these 2 commands: /rmm/api/env/bin/python /rmm/api/tacticalrmm/manage.py collectstatic --no-input sudo systemctl restart rmm.service Login to the Django admin using the same admin credential that was created during the install.sh script (ie the web ui login). If you did not save the Django admin url (which was printed out at the end of the install script), check the local_settings.py file referenced above for the ADMIN_URL variable. Then simply append the value of this variable to your api domain ( https://api.EXAMPLE.COM/ ) to get the full url. Example of a full Django admin url: https://api.example.com/JwboKNYb3v6K93Fvtcz0G3vUM17LMTSZggOUAxa97jQfAh0P5xosEk7u2PPkjEfdOtucUp/","title":"Django Admin"},{"location":"functions/django_admin/#django-admin","text":"Warning Do not use the Django admin unless you really know what you're doing. You should never need to access it unless you are familiar with Django or are instructed to do something here by one of the developers. The Django admin is basically a web interface for the postgres database. As of Tactical RMM v0.4.19, the Django admin is disabled by default. To enable it, edit /rmm/api/tacticalrmm/tacticalrmm/local_settings.py and change ADMIN_ENABLED from False to True then run these 2 commands: /rmm/api/env/bin/python /rmm/api/tacticalrmm/manage.py collectstatic --no-input sudo systemctl restart rmm.service Login to the Django admin using the same admin credential that was created during the install.sh script (ie the web ui login). If you did not save the Django admin url (which was printed out at the end of the install script), check the local_settings.py file referenced above for the ADMIN_URL variable. Then simply append the value of this variable to your api domain ( https://api.EXAMPLE.COM/ ) to get the full url. Example of a full Django admin url: https://api.example.com/JwboKNYb3v6K93Fvtcz0G3vUM17LMTSZggOUAxa97jQfAh0P5xosEk7u2PPkjEfdOtucUp/","title":"Django Admin"},{"location":"functions/emailsms_alert/","text":"Email and SMS Setup \u00b6 Email Setup \u00b6 Under Settings > Global Settings > Email Alerts Setting up Tactical RMM Alerts using Open Relay \u00b6 MS 365 in this example Log into Tactical RMM Go to Settings Go to Global Settings Click on Alerts Enter the email address (or addresses) you want to receive alerts to eg info@EXAMPLE.COM Enter the from email address (this will need to be part of your domain on 365, however it doesn\u2019t need a license) eg rmm@EXAMPLE.COM Go to MXToolbox.com and enter your domain name in, copy the hostname from there and paste into Host Change the port to 25 Click Save Login to admin.microsoft.com Go to Exchange Admin Centre Go to \u201cConnectors\u201d under \u201cMail Flow\u201d Click to + button In From: select \u201cYour organizations email server\u201d In To: select \u201cOffice 365\u201d Click Next In the Name type in RMM Click By Verifying that the IP address\u2026\u2026 Click + Enter your IP and Click OK Click Next Click OK Setting up Tactical RMM Alerts using username & password \u00b6 Gmail in this example Log into Tactical RMM Go to Settings Go to Global Settings Click on Alerts Enter the email address (or addresses) you want to receive alerts to eg info@EXAMPLE.COM Enter the from email address myrmm@gmail.com Tick the box \u201cMy server requires Authentication\u201d Enter your username e.g. myrmm@gmail.com Enter your password Change the port to 587 Click Save SMS Alerts \u00b6 Under Settings > Global Settings > SMS Alerts Currently Twilio is the only support SMS service Setup an Auth Token, and copy the data to the relevant fields","title":"Email & SMS Alerts"},{"location":"functions/emailsms_alert/#email-and-sms-setup","text":"","title":"Email and SMS Setup"},{"location":"functions/emailsms_alert/#email-setup","text":"Under Settings > Global Settings > Email Alerts","title":"Email Setup"},{"location":"functions/emailsms_alert/#setting-up-tactical-rmm-alerts-using-open-relay","text":"MS 365 in this example Log into Tactical RMM Go to Settings Go to Global Settings Click on Alerts Enter the email address (or addresses) you want to receive alerts to eg info@EXAMPLE.COM Enter the from email address (this will need to be part of your domain on 365, however it doesn\u2019t need a license) eg rmm@EXAMPLE.COM Go to MXToolbox.com and enter your domain name in, copy the hostname from there and paste into Host Change the port to 25 Click Save Login to admin.microsoft.com Go to Exchange Admin Centre Go to \u201cConnectors\u201d under \u201cMail Flow\u201d Click to + button In From: select \u201cYour organizations email server\u201d In To: select \u201cOffice 365\u201d Click Next In the Name type in RMM Click By Verifying that the IP address\u2026\u2026 Click + Enter your IP and Click OK Click Next Click OK","title":"Setting up Tactical RMM Alerts using Open Relay"},{"location":"functions/emailsms_alert/#setting-up-tactical-rmm-alerts-using-username-password","text":"Gmail in this example Log into Tactical RMM Go to Settings Go to Global Settings Click on Alerts Enter the email address (or addresses) you want to receive alerts to eg info@EXAMPLE.COM Enter the from email address myrmm@gmail.com Tick the box \u201cMy server requires Authentication\u201d Enter your username e.g. myrmm@gmail.com Enter your password Change the port to 587 Click Save","title":"Setting up Tactical RMM Alerts using username &amp; password"},{"location":"functions/emailsms_alert/#sms-alerts","text":"Under Settings > Global Settings > SMS Alerts Currently Twilio is the only support SMS service Setup an Auth Token, and copy the data to the relevant fields","title":"SMS Alerts"},{"location":"functions/examples/","text":"Examples \u00b6 Create Run URL Action to Computer support page \u00b6 This will create a URL link that will take you to the support page for a computer based on the computers Serial Number Goto Settings | Global Settings | Custom Fields Under Agents tab Add Custom Field (CaSe SeNsItIve) Create Task (best to use Settings | Automation Manager if you want to apply it to all computers). Add script that has an output of the data you want. Create URL Action (under Settings | Global Settings | URL ACTIONS ) for Manufacturer websites Dell Support Page https://www.dell.com/support/home/en-us/product-support/servicetag/{{agent.SerialNumber}}/overview Lenovo Support Page https://pcsupport.lenovo.com/us/en/products/{{agent.SerialNumber}} HP Support Page It gives an errors because the product model doesn't match the serial number. If you figure out a better link please let us know! :) https://support.hp.com/us-en/product/hp-pro-3500-microtower-pc/5270849/model/5270850?serialnumber={{agent.SerialNumber}} Setup LAPS - Local Administrator Password Solution \u00b6 Optional: Create a Global Key to have a custom admin username Create a custom field for storing the password Create Task (can use Automation Policy) Run however often you'd like admin password reset When you need the LAPS password, get from Agent Custom Fields","title":"Examples"},{"location":"functions/examples/#examples","text":"","title":"Examples"},{"location":"functions/examples/#create-run-url-action-to-computer-support-page","text":"This will create a URL link that will take you to the support page for a computer based on the computers Serial Number Goto Settings | Global Settings | Custom Fields Under Agents tab Add Custom Field (CaSe SeNsItIve) Create Task (best to use Settings | Automation Manager if you want to apply it to all computers). Add script that has an output of the data you want. Create URL Action (under Settings | Global Settings | URL ACTIONS ) for Manufacturer websites Dell Support Page https://www.dell.com/support/home/en-us/product-support/servicetag/{{agent.SerialNumber}}/overview Lenovo Support Page https://pcsupport.lenovo.com/us/en/products/{{agent.SerialNumber}} HP Support Page It gives an errors because the product model doesn't match the serial number. If you figure out a better link please let us know! :) https://support.hp.com/us-en/product/hp-pro-3500-microtower-pc/5270849/model/5270850?serialnumber={{agent.SerialNumber}}","title":"Create Run URL Action to Computer support page"},{"location":"functions/examples/#setup-laps-local-administrator-password-solution","text":"Optional: Create a Global Key to have a custom admin username Create a custom field for storing the password Create Task (can use Automation Policy) Run however often you'd like admin password reset When you need the LAPS password, get from Agent Custom Fields","title":"Setup LAPS - Local Administrator Password Solution"},{"location":"functions/global_settings/","text":"Global Settings \u00b6 General \u00b6 Enable agent automatic self update (Recommended setting: Enabled) Enable server side scripts Enable web terminal Default Agent timezone Default Date Format Default Server Policy Default Workstation Policy Default Alert Template Receive notifications on Agent Debug Level Clear faults on agents that haven't checked in after (days) Reset Patch Policy on Agents Email Alerts \u00b6 See Email Alerts SMS Alerts \u00b6 See SMS Alerts Meshcentral \u00b6 See Meshcentral Custom Fields \u00b6 See Custom Fields (Global) Key Store \u00b6 See Key Store URL Actions \u00b6 See URL Actions Web Hooks \u00b6 See Webhooks Retention (TRMM Database) \u00b6 These are the settings related to your Tools > Server Maintenance > Prune DB Tables Tactical RMM ships with data retention defaults that will work fine for most environments. There are situations, depending on the number of agents and checks configured, that these defaults need to be tweaked to improve performance. Adjusting Data Retention \u00b6 The options are: Check History - Will delete check history older than the days specified (default is 30 days). Resolved Alerts - Will delete alerts that have been resolved older than the days specified (default is disabled). Agent History - Will delete agent command/script history older than the days specified (default is 60 days). Debug Logs - Will delete agent debug logs older than the days specified (default is 30 days). Audit Logs Will delete Tactical RMM audit logs older than the days specified (default is disabled). To disable database pruning on a table, set the days to 0. API Keys \u00b6 See API","title":"Global Settings"},{"location":"functions/global_settings/#global-settings","text":"","title":"Global Settings"},{"location":"functions/global_settings/#general","text":"Enable agent automatic self update (Recommended setting: Enabled) Enable server side scripts Enable web terminal Default Agent timezone Default Date Format Default Server Policy Default Workstation Policy Default Alert Template Receive notifications on Agent Debug Level Clear faults on agents that haven't checked in after (days) Reset Patch Policy on Agents","title":"General"},{"location":"functions/global_settings/#email-alerts","text":"See Email Alerts","title":"Email Alerts"},{"location":"functions/global_settings/#sms-alerts","text":"See SMS Alerts","title":"SMS Alerts"},{"location":"functions/global_settings/#meshcentral","text":"See Meshcentral","title":"Meshcentral"},{"location":"functions/global_settings/#custom-fields","text":"See Custom Fields","title":"Custom Fields"},{"location":"functions/global_settings/#global-key-store","text":"See Key Store","title":"(Global) Key Store"},{"location":"functions/global_settings/#url-actions","text":"See URL Actions","title":"URL Actions"},{"location":"functions/global_settings/#web-hooks","text":"See Webhooks","title":"Web Hooks"},{"location":"functions/global_settings/#retention-trmm-database","text":"These are the settings related to your Tools > Server Maintenance > Prune DB Tables Tactical RMM ships with data retention defaults that will work fine for most environments. There are situations, depending on the number of agents and checks configured, that these defaults need to be tweaked to improve performance.","title":"Retention (TRMM Database)"},{"location":"functions/global_settings/#adjusting-data-retention","text":"The options are: Check History - Will delete check history older than the days specified (default is 30 days). Resolved Alerts - Will delete alerts that have been resolved older than the days specified (default is disabled). Agent History - Will delete agent command/script history older than the days specified (default is 60 days). Debug Logs - Will delete agent debug logs older than the days specified (default is 30 days). Audit Logs Will delete Tactical RMM audit logs older than the days specified (default is disabled). To disable database pruning on a table, set the days to 0.","title":"Adjusting Data Retention"},{"location":"functions/global_settings/#api-keys","text":"See API","title":"API Keys"},{"location":"functions/keystore/","text":"Global Key Store \u00b6 The key store is used to store values that need to be referenced from multiple scripts. This also allows for easy updating of values since scripts reference the values at runtime. To Add/Edit values in the Global Key Store, browse to Settings > Global Settings > KeyStore . You can reference values from the key store in script arguments by using the {{global.key_name}} syntax. Info Everything between {{}} is CaSe sEnSiTive. global. must be all lower case. See Scripts for more information.","title":"Global Keystore"},{"location":"functions/keystore/#global-key-store","text":"The key store is used to store values that need to be referenced from multiple scripts. This also allows for easy updating of values since scripts reference the values at runtime. To Add/Edit values in the Global Key Store, browse to Settings > Global Settings > KeyStore . You can reference values from the key store in script arguments by using the {{global.key_name}} syntax. Info Everything between {{}} is CaSe sEnSiTive. global. must be all lower case. See Scripts for more information.","title":"Global Key Store"},{"location":"functions/maintenance_mode/","text":"Maintenance Mode \u00b6 Enabling maintenance mode for an agent will prevent any overdue/check/task email/sms alerts from being sent. It will also prevent clients/sites/agents from showing up as red in the dashboard if they have any failing checks or are overdue. To enable maintenance mode for all agents in a client/site, Right Click on a client / site and choose Enable Maintenance Mode To enable maintenance mode for a single agent, Right Click on the agent and choose Enable Maintenance Mode Putting server into maintenance mode \u00b6 Follow the instructions at the top of Management Commands page to activate the python virtual env Run the management command using one of the options below: python manage.py server_maint_mode [options] Options Description --enable Enable Maintenance Mode. Sets all agents to maintenance mode and saves their current states. --disable Disable Maintenance Mode. Restores agents to their previous states before maintenance mode was enabled. --force-enable Force Enable Maintenance Mode. Unconditionally sets all agents to maintenance mode, ignoring any previously saved states. --force-disable Force Disable Maintenance Mode. Unconditionally disables maintenance mode for all agents, removing any saved state information. Note : Only one of the above options should be used at a time to avoid conflicts.","title":"Maintenance Mode"},{"location":"functions/maintenance_mode/#maintenance-mode","text":"Enabling maintenance mode for an agent will prevent any overdue/check/task email/sms alerts from being sent. It will also prevent clients/sites/agents from showing up as red in the dashboard if they have any failing checks or are overdue. To enable maintenance mode for all agents in a client/site, Right Click on a client / site and choose Enable Maintenance Mode To enable maintenance mode for a single agent, Right Click on the agent and choose Enable Maintenance Mode","title":"Maintenance Mode"},{"location":"functions/maintenance_mode/#putting-server-into-maintenance-mode","text":"Follow the instructions at the top of Management Commands page to activate the python virtual env Run the management command using one of the options below: python manage.py server_maint_mode [options] Options Description --enable Enable Maintenance Mode. Sets all agents to maintenance mode and saves their current states. --disable Disable Maintenance Mode. Restores agents to their previous states before maintenance mode was enabled. --force-enable Force Enable Maintenance Mode. Unconditionally sets all agents to maintenance mode, ignoring any previously saved states. --force-disable Force Disable Maintenance Mode. Unconditionally disables maintenance mode for all agents, removing any saved state information. Note : Only one of the above options should be used at a time to avoid conflicts.","title":"Putting server into maintenance mode"},{"location":"functions/permissions/","text":"User Roles and Permissions \u00b6 Permission Manager \u00b6 Make sure you've setup at least 1 valid (Super User aka Administrator) role under Settings > Permission Manager Login as usual Tactical user Go to Settings - Permissions Manager Click New Role You can all the role anything, I called it Admins Tick the Super User Box/or relevant permissions required Click Save then exit Permissions Manager Go to Settings - Users Open current logged in user/or any other user and assign role (created above step 6) in the Role drop down box. Click Save Once you've set that up a Super User role and assigned your primary user, you can create other Roles with more limited access. Tip If you are only trying to give permissions to one or more sites within a client, but not all of the sites, then leave the \"Allowed Clients\" field blank and only add sites to \"Allowed Sites\". If a client is set in \"Allowed Clients\" that will override any site perms and give access to all sites within that client, regardless of what sites are set. Video Walkthru \u00b6 Permissions with extra Security implications \u00b6 Warning DO NOT use the Web Terminal for running the Tactical update script as it will stop the service running the web terminal and bork your update. Use TRMM Server Web Terminal Run Scripts on TRMM Server Both of these functions are running under the linux user that you installed TRMM with (usually tactical if you followed the docs). These have full access to your TRMM server's filesystem and as a result have the ability to become root if you have passwordless sudo enabled. These can be very dangerous features if not handled with care so think carefully before you enable/use them. These features can be disabled from the web UI in Global Settings. They can also be disabled at the filesystem level (which overrides the setting in Global Settings) by adding any of these variables to /rmm/api/tacticalrmm/tacticalrmm/local_settings.py TRMM_DISABLE_WEB_TERMINAL = True TRMM_DISABLE_SERVER_SCRIPTS = True After adding these make sure they take effect by running sudo systemctl restart rmm daphne celery celerybeat Info Docker Installs need to only update the .env file and issue command docker compose down && docker compose up -d for the variables to take effect.","title":"Permissions"},{"location":"functions/permissions/#user-roles-and-permissions","text":"","title":"User Roles and Permissions"},{"location":"functions/permissions/#permission-manager","text":"Make sure you've setup at least 1 valid (Super User aka Administrator) role under Settings > Permission Manager Login as usual Tactical user Go to Settings - Permissions Manager Click New Role You can all the role anything, I called it Admins Tick the Super User Box/or relevant permissions required Click Save then exit Permissions Manager Go to Settings - Users Open current logged in user/or any other user and assign role (created above step 6) in the Role drop down box. Click Save Once you've set that up a Super User role and assigned your primary user, you can create other Roles with more limited access. Tip If you are only trying to give permissions to one or more sites within a client, but not all of the sites, then leave the \"Allowed Clients\" field blank and only add sites to \"Allowed Sites\". If a client is set in \"Allowed Clients\" that will override any site perms and give access to all sites within that client, regardless of what sites are set.","title":"Permission Manager"},{"location":"functions/permissions/#video-walkthru","text":"","title":"Video Walkthru"},{"location":"functions/permissions/#permissions-with-extra-security-implications","text":"Warning DO NOT use the Web Terminal for running the Tactical update script as it will stop the service running the web terminal and bork your update. Use TRMM Server Web Terminal Run Scripts on TRMM Server Both of these functions are running under the linux user that you installed TRMM with (usually tactical if you followed the docs). These have full access to your TRMM server's filesystem and as a result have the ability to become root if you have passwordless sudo enabled. These can be very dangerous features if not handled with care so think carefully before you enable/use them. These features can be disabled from the web UI in Global Settings. They can also be disabled at the filesystem level (which overrides the setting in Global Settings) by adding any of these variables to /rmm/api/tacticalrmm/tacticalrmm/local_settings.py TRMM_DISABLE_WEB_TERMINAL = True TRMM_DISABLE_SERVER_SCRIPTS = True After adding these make sure they take effect by running sudo systemctl restart rmm daphne celery celerybeat Info Docker Installs need to only update the .env file and issue command docker compose down && docker compose up -d for the variables to take effect.","title":"Permissions with extra Security implications"},{"location":"functions/remote_bg/","text":"Remote Background \u00b6 To access: Right click on an agent > Remote Background Terminal Tab \u00b6 Meshcentral Integration: This will allow you to open a terminal on the remote agent. Right-clicking will allow: Admin Shell Admin PowerShell User Shell User PowerShell Ask Admin Shell Ask Admin PowerShell Ask User Shell Ask User PowerShell Tip If you don't see any Connect button in the top left the problem is either the TRMM user doesn't have meshcentral permissions or the mesh agent is having connectivity problems. Try either the \"Recover Connection\" button or script \"TacticalRMM - Check Mesh Agent for problems\" File Browser \u00b6 Meshcentral Integration: This will allow you to open a File Manager where you can manage and transfer files to and from the agent. Services Tab \u00b6 Right click on a service to show the context menu where you can start/stop/restart services: Click Service Details to bring up the details tab where you can edit more service options: Processes Tab \u00b6 A very basic task manager that shows real time process usage. Right click on a process to end the task: Event Log \u00b6 Allows you to query the Windows Application | System | Security Logs","title":"Remote Background"},{"location":"functions/remote_bg/#remote-background","text":"To access: Right click on an agent > Remote Background","title":"Remote Background"},{"location":"functions/remote_bg/#terminal-tab","text":"Meshcentral Integration: This will allow you to open a terminal on the remote agent. Right-clicking will allow: Admin Shell Admin PowerShell User Shell User PowerShell Ask Admin Shell Ask Admin PowerShell Ask User Shell Ask User PowerShell Tip If you don't see any Connect button in the top left the problem is either the TRMM user doesn't have meshcentral permissions or the mesh agent is having connectivity problems. Try either the \"Recover Connection\" button or script \"TacticalRMM - Check Mesh Agent for problems\"","title":"Terminal Tab"},{"location":"functions/remote_bg/#file-browser","text":"Meshcentral Integration: This will allow you to open a File Manager where you can manage and transfer files to and from the agent.","title":"File Browser"},{"location":"functions/remote_bg/#services-tab","text":"Right click on a service to show the context menu where you can start/stop/restart services: Click Service Details to bring up the details tab where you can edit more service options:","title":"Services Tab"},{"location":"functions/remote_bg/#processes-tab","text":"A very basic task manager that shows real time process usage. Right click on a process to end the task:","title":"Processes Tab"},{"location":"functions/remote_bg/#event-log","text":"Allows you to query the Windows Application | System | Security Logs","title":"Event Log"},{"location":"functions/scripting/","text":"Scripting \u00b6 Tactical RMM supports uploading existing scripts or creating new scripts from within the web interface. Windows agent languages supported: PowerShell Windows Batch Python Nushell Deno There is RunAsUser functionality for Windows. Linux/Mac languages supported: Any language that is installed on the remote machine (use a shebang at the top of the script to set the interpreter) nu deno (Javascript and TypeScript) Adding Scripts \u00b6 In the dashboard, browse to Settings > Scripts Manager . Click the New button and select either Upload Script or New Script. The available options for scripts are: Name - This identifies the script in the dashboard. Description - Optional description for the script. Category - Optional way to group similar scripts together. Type - This sets the language of the script. Available options are: PowerShell Windows Batch Python Shell (use for Linux/macOS scripts) Nushell Deno Script Arguments - Optional way to set default arguments for scripts. These will auto populate when running scripts and can be changed at runtime. Logged on Windows Event Viewer > Applications and Services Logs > Microsoft > Windows> PowerShell > Operational Environment vars - Optional way to set default arguments for scripts using Environment Variables. These will auto populate when running scripts and can be changed at runtime. Not logged, better to use when passing data you don't want logged Default Timeout - Sets the default timeout of the script and will stop script execution if the duration surpasses the configured timeout. Can be changed at script runtime. Favorite - Favorites the script. Downloading Scripts \u00b6 To download a Tactical RMM Script, click on the script in the Script Manager to select it. Then click the Download Script button on the top. You can also right-click on the script and select download. Community Scripts \u00b6 These are script that are built into Tactical RMM. They are provided and maintained by the Tactical RMM community . These scripts are updated whenever Tactical RMM is updated and can't be modified or deleted in the dashboard. Hiding Community Scripts \u00b6 You can choose to hide community script throughout the dashboard by opening Script Manager and clicking the Show/Hide Community Scripts toggle button. Using Scripts \u00b6 Manual run on agent \u00b6 In the Agent Table , you can right-click on an agent and select Run Script . You have the options of: Wait for Output - Runs the script and waits for the script to finish running and displays the output. Fire and Forget - Starts the script and does not wait for output. Email Output - Starts the script and will email the output. Allows for using the default email address in the global settings or adding a new email address. Save as Note - Saves the output as a Note that can be views in the agent Notes tab. Collector - Saves to output to the specified custom field. There is also an option on the agent context menu called Run Favorited Script . This will pre-populate the script run dialog with the script of your choice. Script Execution Process Script Arguments \u00b6 The Script Arguments field should be pre-filled with information for any script that can accept or requires parameters. Use the (i) < Required Parameter Name > < string > [ - < Optional Parameter Name > < string > ] [ - < string > { ( < default string if not specified > ) | < string2 > | < string3 > } ] Where [] indicates an optional parameter and {} indicates a parameter with several preconfigured parameter and () indicates a default parameter if none is specified. Starting with 0.15.4 you can use environment variables to pass them too! Examples \u00b6 Script Arguments -hello world -foo bar -data {{agent.public_ip}} Environment vars ehello=eworld efoo=ebar edata={{agent.hostname}} Batch Powershell Python Shell Script @ echo off setlocal rem Parameters. Batch only accepts positional params not named ones set hello = %1 set foo = %2 set data = %3 echo Script Args echo hello: %hello% echo foo: %foo% echo data: %data% echo . echo Environment Vars echo ehello: %ehello% echo efoo: %efoo% echo edata: %edata% endlocal Script param( [string]$hello, [string]$foo, [string]$data ) Write-Output \"Script Args\" Write-Output \"hello: $hello\" Write-Output \"foo: $foo\" Write-Output \"data: $data\" Write-Output \"\" Write-Output \"Environment Vars\" Write-Output \"ehello: $env:ehello\" Write-Output \"efoo: $env:efoo\" Write-Output \"edata: $env:edata\" Script #!/usr/bin/python3 import os import argparse #Note: named args in python require -- and = between name and value eg # --hello=world # --foo=bar # --data={{agent.public_ip}} # Parse command-line arguments parser = argparse . ArgumentParser ( description = \"Process some strings.\" ) parser . add_argument ( \"--hello\" , type = str , help = \"Value for hello\" ) parser . add_argument ( \"--foo\" , type = str , help = \"Value for foo\" ) parser . add_argument ( \"--data\" , type = str , help = \"Value for data\" ) args = parser . parse_args () # Script Args print ( \"Script Args\" ) print ( f \"hello: { args . hello } \" ) print ( f \"foo: { args . foo } \" ) print ( f \"data: { args . data } \" ) # Environment Vars print ( \" \\n Environment Vars\" ) print ( f \"ehello: { os . getenv ( 'ehello' ) } \" ) print ( f \"efoo: { os . getenv ( 'efoo' ) } \" ) print ( f \"edata: { os . getenv ( 'edata' ) } \" ) Script #!/bin/bash #Bash only accepts positional params not named ones hello = \" $1 \" foo = \" $2 \" data = \" $3 \" echo \"Script Args\" echo \"hello: $hello \" echo \"foo: $foo \" echo \"data: $data \" echo \"\" echo \"Environment Vars\" echo \"ehello: $ehello \" echo \"efoo: $efoo \" echo \"edata: $edata \" Run Script on many agents at once \u00b6 Under the Tools menu -> Bulk Script you can execute scripts against Clients/Sites/Selected Agents/All based on All/Servers/Workstations. The history is saved in the history tab of the agent. The history can also be retrieved from the API from the /agents/history/ endpoint. Run Command on many agents at once \u00b6 Under the Tools menu -> Bulk Command you can execute a command against Clients/Sites/Selected Agents/All based on All/Servers/Workstations. The history is saved in the history tab of the agent. The history can also be retrieved from the API from the /agents/history/ endpoint. Automated Tasks \u00b6 Tactical RMM allows scheduling tasks to run on agents. This leverages the Windows Task Scheduler and has the same scheduling options. See Automated Tasks for configuring automated tasks. Script Checks \u00b6 Scripts can also be run periodically on an agent and trigger an alert if it fails in case you want any kind of warning code to alert you. Important: When utilizing PowerShell scripts and manually assigning an exit code, it's essential to define the exit code using the following syntax: $host.SetShouldExit(EXITCODE) . Here, EXITCODE represents the desired exit code number. For instance, to assign an exit code of 3, use $host.SetShouldExit(3) . Alert Failure/Resolve Actions \u00b6 Scripts can be triggered when an alert is triggered and resolved. For configuring Alert Templates , see Alerting See below for populating dashboard data in scripts and the available options. Using dashboard data in scripts \u00b6 Tactical RMM allows passing in dashboard data to scripts as arguments or environment variables. The below PowerShell arguments will get the client name of the agent and also the agent's public IP address. -ClientName {{client.name}} -PublicIP {{agent.public_ip}} Info Everything between {{}} is CaSe sEnSiTive See a full list of possible built-in variables Here Getting Custom Field values \u00b6 Tactical RMM supports pulling data from custom fields using the {{model.custom_field_name}} syntax. See Using Custom Fields in Scripts . Getting values from the Global Keystore \u00b6 Tactical RMM supports getting values from the global key store using the {{global.key_name}} syntax. See Global Keystore . Script Snippets \u00b6 Script Snippets allow you to create common code blocks or comments and apply them to all of your scripts. This could be initialization code, common error checking, or even code comments. Adding Script Snippets \u00b6 In the dashboard, browse to Settings > Scripts Manager . Click the Script Snippets button. Name - This identifies the script snippet in the dashboard Description - Optional description for the script snippet Shell - This sets the language of the script. Available options are: PowerShell Windows Batch Python Using Script Snippets \u00b6 When editing a script, you can add template tags to the script body that contains the script snippet name. For example, if a script snippet exists with the name \"Check WMF\", you would put {{Check WMF}} in the script body and the snippet code will be replaced. Info Everything between {{}} is CaSe sEnSiTive The template tags will only be visible when Editing the script. When downloading or viewing the script code the template tags will be replaced with the script snippet code. PowerShell 7 \u00b6 https://docs.microsoft.com/en-us/powershell/module/microsoft.powershell.management/start-process?view=powershell-7.2 Shell Type: PowerShell Command: Start-Process nohup 'pwsh -noprofile -c \"1..120 | % { Write-Host . -NoNewline; sleep 1 }\"' Python \u00b6 Python on windows \u00b6 Tactical ships with a portable python distribution on windows. OS Version Windows >= 8.1 3.11.9 Windows < 8.1 3.8.7 The following 3rd party packages are also bundled with this distribution: cryptography httpx msgpack psutil pysnmplib pywin32 pywin32-ctypes requests websockets WMI validators Python on posix \u00b6 How do you target a specific version? The shebang can specify the interpreter on macOS and Linux, but since Windows does not use the shebang, the interpreter needs to be specified by the calling program. Ok, so how do you use the shebang? Take this hello world script for example. The shebang #! in this script will use /usr/bin/python3 . This is easy enough until you run across a system where the system Python is not the expected 3.8 or later. #!/usr/bin/python3 print ( \"Hello World!\" ) This is where env comes into play. env will search the $PATH for the executable that matches the argument. In this case, the script will be run by the first \"python3\" found in $PATH. However, what if python3 points to python3.6 ? You're in the same boat you were in before. #!/usr/bin/env python3 print ( \"Hello World!\" ) Or are you? If you read the env man page , it states you can add parameters to the command line. In case you didn't know, the shebang is the command line! env will modify the $PATH before searching for python3 , allowing you to use a custom python location. #!/usr/bin/env PATH=\"/opt/my-python/3.8/:$PATH\" python3 print ( \"Hello World!\" ) Wait! Isn't the shebang a shell script, not a Python script? In TRMM, a \"Shell\" script and a \"Python\" script are treated the same except that Python scripts also work on Windows. On Linux and macOS, \"Shell\" and \"Python\" scripts are treated the same. Script Type OS Supported Python Windows Yes Python Linux Yes Python macOS Yes Shell Windows No Shell Linux Yes Shell macOS Yes Python version references \u00b6 Python 2 was sunset in January 2020. Python versions : Python 3.7 is end of life in June 2023. Debian releases including the end of life date. Python support in Debian to determine the Python version included in Debian. Ubuntu inherits from Debian ; see previous line. Ubuntu vs Debian OS versions ; to map Ubuntu version to Debian version to determine the Python version. Ubuntu Release Notes may contain the Python version included. macOS versions ; macOS version number mapped to the OS name. macOS release history ; includes supported/maintained/unsupported and last update date. OS Python version Installed by TRMM Windows 3.11 Yes Linux, Debian 10 (Buster) (end of life) 3.7 No Linux, Debian 11 (Bullseye) 3.9 No Linux, Debian 12 (Bookworm) 3.12 No Linux, Ubuntu 20.04 LTS 3.8 No Linux, Ubuntu 22.04 LTS 3.10 No macOS Ventura 3.8 No macOS Monterey 12.3 2.7 removed No macOS Catalina 10.15 2.7 (not recommended to use) No Targeting a specific version \u00b6 Python compiles the script into bytecode and then executes it. Because of the compilation step, errors due to language constructs introduced in a later version of Python will cause the script to fail. For example, Python 3.10 introduced the \"match\" term as their version of a case or switch statement. #!/usr/bin/env python3 match \"term\" : case \"Nope\" : print ( \"No match found\" ) case \"term\" : print ( \"Found match!\" ) case _ : print ( \"Default if nothing matches\" ) The same code will work on Python 3.10. $ python3.10 test-python-version.py Found match! The same code fails on versions prior to 3.10. $ python3.6 test-python-version.py File \"test-python-version.py\" , line 3 match \"term\" : ^ SyntaxError: invalid syntax Nushell \u00b6 Nu is a new type of shell. Like PowerShell, Nu passes objects from one command to the next. For example, this script will list processes that are more than 100MB. ps | where mem >= 100MB There are some important points to keep in mind when writing Nu scripts. See the Thinking in Nu for details. Some highlights: The > is the greater-than operator, not redirection. Use | save some-file.txt Variables are immutable, or constant. Use mut to make a variable mutable. Currently Nu does not support background tasks. long-running-command & will not work. Nu has a Discord server if you have questions. To disable this feature, add the following to local_settings.py : INSTALL_NUSHELL = False Example Nushell Script \u00b6 The below script find processes sorted by greatest cpu utilization. ps | sort-by cpu | reverse Deno \u00b6 Deno is considered to be the next iteration of Node.js. Deno uses ECMAScript modules (a.k.a ES Modules or ESM) syntax, not CommonJS (CJS). I.e. use import * from https://example.com/package/module.ts instead of require('./local/file.js') . Tactical RMM runs Deno scripts with the following permissions: DENO_PERMISSIONS=--allow-all See the documentation on permissions for details. To override this, either: Add the DENO_DEFAULT_PERMISSIONS string variable with the permissions requested to local_settings.py or Set the DENO_PERMISSIONS environment variable to the permissions requested in your script. To disable this feature, add the following to local_settings.py : INSTALL_DENO = False Example Deno Script \u00b6 The below script prints basic system information: async function gatherSystemInfo () { const os = Deno . build . os ; const arch = Deno . build . arch ; const memory = Deno . systemMemoryInfo (); const info = ` OS: ${ os } Architecture: ${ arch } Total Memory: ${ ( await memory ). total / 1024 / 1024 } MB Free Memory: ${ ( await memory ). free / 1024 / 1024 } MB ` ; console . log ( info ); } gatherSystemInfo (). catch ( console . error ); Example Scripts \u00b6 Example PowerShell Script \u00b6 The below script takes five named values. The arguments will look like this: -SiteName {{site.name}} -ClientName {{client.name}} -PublicIP {{agent.public_ip}} -CustomField {{client.AV_KEY}} -Global {{global.API_KEY}} param ( [string] $SiteName , [string] $ClientName , [string] $PublicIp , [string] $CustomField , [string] $Global ) Write-Output \"Site: $SiteName\" Write-Output \"Client: $ClientName\" Write-Output \"Public IP: $PublicIp\" Write-Output \"Custom Fields: $CustomField\" Write-Output \"Global: $Global\" Example Shell Script \u00b6 The below script prints the user running the script. #!/usr/bin/env bash whoami","title":"Scripting"},{"location":"functions/scripting/#scripting","text":"Tactical RMM supports uploading existing scripts or creating new scripts from within the web interface. Windows agent languages supported: PowerShell Windows Batch Python Nushell Deno There is RunAsUser functionality for Windows. Linux/Mac languages supported: Any language that is installed on the remote machine (use a shebang at the top of the script to set the interpreter) nu deno (Javascript and TypeScript)","title":"Scripting"},{"location":"functions/scripting/#adding-scripts","text":"In the dashboard, browse to Settings > Scripts Manager . Click the New button and select either Upload Script or New Script. The available options for scripts are: Name - This identifies the script in the dashboard. Description - Optional description for the script. Category - Optional way to group similar scripts together. Type - This sets the language of the script. Available options are: PowerShell Windows Batch Python Shell (use for Linux/macOS scripts) Nushell Deno Script Arguments - Optional way to set default arguments for scripts. These will auto populate when running scripts and can be changed at runtime. Logged on Windows Event Viewer > Applications and Services Logs > Microsoft > Windows> PowerShell > Operational Environment vars - Optional way to set default arguments for scripts using Environment Variables. These will auto populate when running scripts and can be changed at runtime. Not logged, better to use when passing data you don't want logged Default Timeout - Sets the default timeout of the script and will stop script execution if the duration surpasses the configured timeout. Can be changed at script runtime. Favorite - Favorites the script.","title":"Adding Scripts"},{"location":"functions/scripting/#downloading-scripts","text":"To download a Tactical RMM Script, click on the script in the Script Manager to select it. Then click the Download Script button on the top. You can also right-click on the script and select download.","title":"Downloading Scripts"},{"location":"functions/scripting/#community-scripts","text":"These are script that are built into Tactical RMM. They are provided and maintained by the Tactical RMM community . These scripts are updated whenever Tactical RMM is updated and can't be modified or deleted in the dashboard.","title":"Community Scripts"},{"location":"functions/scripting/#hiding-community-scripts","text":"You can choose to hide community script throughout the dashboard by opening Script Manager and clicking the Show/Hide Community Scripts toggle button.","title":"Hiding Community Scripts"},{"location":"functions/scripting/#using-scripts","text":"","title":"Using Scripts"},{"location":"functions/scripting/#manual-run-on-agent","text":"In the Agent Table , you can right-click on an agent and select Run Script . You have the options of: Wait for Output - Runs the script and waits for the script to finish running and displays the output. Fire and Forget - Starts the script and does not wait for output. Email Output - Starts the script and will email the output. Allows for using the default email address in the global settings or adding a new email address. Save as Note - Saves the output as a Note that can be views in the agent Notes tab. Collector - Saves to output to the specified custom field. There is also an option on the agent context menu called Run Favorited Script . This will pre-populate the script run dialog with the script of your choice. Script Execution Process","title":"Manual run on agent"},{"location":"functions/scripting/#script-arguments","text":"The Script Arguments field should be pre-filled with information for any script that can accept or requires parameters. Use the (i) < Required Parameter Name > < string > [ - < Optional Parameter Name > < string > ] [ - < string > { ( < default string if not specified > ) | < string2 > | < string3 > } ] Where [] indicates an optional parameter and {} indicates a parameter with several preconfigured parameter and () indicates a default parameter if none is specified. Starting with 0.15.4 you can use environment variables to pass them too!","title":"Script Arguments"},{"location":"functions/scripting/#examples","text":"Script Arguments -hello world -foo bar -data {{agent.public_ip}} Environment vars ehello=eworld efoo=ebar edata={{agent.hostname}} Batch Powershell Python Shell Script @ echo off setlocal rem Parameters. Batch only accepts positional params not named ones set hello = %1 set foo = %2 set data = %3 echo Script Args echo hello: %hello% echo foo: %foo% echo data: %data% echo . echo Environment Vars echo ehello: %ehello% echo efoo: %efoo% echo edata: %edata% endlocal Script param( [string]$hello, [string]$foo, [string]$data ) Write-Output \"Script Args\" Write-Output \"hello: $hello\" Write-Output \"foo: $foo\" Write-Output \"data: $data\" Write-Output \"\" Write-Output \"Environment Vars\" Write-Output \"ehello: $env:ehello\" Write-Output \"efoo: $env:efoo\" Write-Output \"edata: $env:edata\" Script #!/usr/bin/python3 import os import argparse #Note: named args in python require -- and = between name and value eg # --hello=world # --foo=bar # --data={{agent.public_ip}} # Parse command-line arguments parser = argparse . ArgumentParser ( description = \"Process some strings.\" ) parser . add_argument ( \"--hello\" , type = str , help = \"Value for hello\" ) parser . add_argument ( \"--foo\" , type = str , help = \"Value for foo\" ) parser . add_argument ( \"--data\" , type = str , help = \"Value for data\" ) args = parser . parse_args () # Script Args print ( \"Script Args\" ) print ( f \"hello: { args . hello } \" ) print ( f \"foo: { args . foo } \" ) print ( f \"data: { args . data } \" ) # Environment Vars print ( \" \\n Environment Vars\" ) print ( f \"ehello: { os . getenv ( 'ehello' ) } \" ) print ( f \"efoo: { os . getenv ( 'efoo' ) } \" ) print ( f \"edata: { os . getenv ( 'edata' ) } \" ) Script #!/bin/bash #Bash only accepts positional params not named ones hello = \" $1 \" foo = \" $2 \" data = \" $3 \" echo \"Script Args\" echo \"hello: $hello \" echo \"foo: $foo \" echo \"data: $data \" echo \"\" echo \"Environment Vars\" echo \"ehello: $ehello \" echo \"efoo: $efoo \" echo \"edata: $edata \"","title":"Examples"},{"location":"functions/scripting/#run-script-on-many-agents-at-once","text":"Under the Tools menu -> Bulk Script you can execute scripts against Clients/Sites/Selected Agents/All based on All/Servers/Workstations. The history is saved in the history tab of the agent. The history can also be retrieved from the API from the /agents/history/ endpoint.","title":"Run Script on many agents at once"},{"location":"functions/scripting/#run-command-on-many-agents-at-once","text":"Under the Tools menu -> Bulk Command you can execute a command against Clients/Sites/Selected Agents/All based on All/Servers/Workstations. The history is saved in the history tab of the agent. The history can also be retrieved from the API from the /agents/history/ endpoint.","title":"Run Command on many agents at once"},{"location":"functions/scripting/#automated-tasks","text":"Tactical RMM allows scheduling tasks to run on agents. This leverages the Windows Task Scheduler and has the same scheduling options. See Automated Tasks for configuring automated tasks.","title":"Automated Tasks"},{"location":"functions/scripting/#script-checks","text":"Scripts can also be run periodically on an agent and trigger an alert if it fails in case you want any kind of warning code to alert you. Important: When utilizing PowerShell scripts and manually assigning an exit code, it's essential to define the exit code using the following syntax: $host.SetShouldExit(EXITCODE) . Here, EXITCODE represents the desired exit code number. For instance, to assign an exit code of 3, use $host.SetShouldExit(3) .","title":"Script Checks"},{"location":"functions/scripting/#alert-failureresolve-actions","text":"Scripts can be triggered when an alert is triggered and resolved. For configuring Alert Templates , see Alerting See below for populating dashboard data in scripts and the available options.","title":"Alert Failure/Resolve Actions"},{"location":"functions/scripting/#using-dashboard-data-in-scripts","text":"Tactical RMM allows passing in dashboard data to scripts as arguments or environment variables. The below PowerShell arguments will get the client name of the agent and also the agent's public IP address. -ClientName {{client.name}} -PublicIP {{agent.public_ip}} Info Everything between {{}} is CaSe sEnSiTive See a full list of possible built-in variables Here","title":"Using dashboard data in scripts"},{"location":"functions/scripting/#getting-custom-field-values","text":"Tactical RMM supports pulling data from custom fields using the {{model.custom_field_name}} syntax. See Using Custom Fields in Scripts .","title":"Getting Custom Field values"},{"location":"functions/scripting/#getting-values-from-the-global-keystore","text":"Tactical RMM supports getting values from the global key store using the {{global.key_name}} syntax. See Global Keystore .","title":"Getting values from the Global Keystore"},{"location":"functions/scripting/#script-snippets","text":"Script Snippets allow you to create common code blocks or comments and apply them to all of your scripts. This could be initialization code, common error checking, or even code comments.","title":"Script Snippets"},{"location":"functions/scripting/#adding-script-snippets","text":"In the dashboard, browse to Settings > Scripts Manager . Click the Script Snippets button. Name - This identifies the script snippet in the dashboard Description - Optional description for the script snippet Shell - This sets the language of the script. Available options are: PowerShell Windows Batch Python","title":"Adding Script Snippets"},{"location":"functions/scripting/#using-script-snippets","text":"When editing a script, you can add template tags to the script body that contains the script snippet name. For example, if a script snippet exists with the name \"Check WMF\", you would put {{Check WMF}} in the script body and the snippet code will be replaced. Info Everything between {{}} is CaSe sEnSiTive The template tags will only be visible when Editing the script. When downloading or viewing the script code the template tags will be replaced with the script snippet code.","title":"Using Script Snippets"},{"location":"functions/scripting/#powershell-7","text":"https://docs.microsoft.com/en-us/powershell/module/microsoft.powershell.management/start-process?view=powershell-7.2 Shell Type: PowerShell Command: Start-Process nohup 'pwsh -noprofile -c \"1..120 | % { Write-Host . -NoNewline; sleep 1 }\"'","title":"PowerShell 7"},{"location":"functions/scripting/#python","text":"","title":"Python"},{"location":"functions/scripting/#python-on-windows","text":"Tactical ships with a portable python distribution on windows. OS Version Windows >= 8.1 3.11.9 Windows < 8.1 3.8.7 The following 3rd party packages are also bundled with this distribution: cryptography httpx msgpack psutil pysnmplib pywin32 pywin32-ctypes requests websockets WMI validators","title":"Python on windows"},{"location":"functions/scripting/#python-on-posix","text":"How do you target a specific version? The shebang can specify the interpreter on macOS and Linux, but since Windows does not use the shebang, the interpreter needs to be specified by the calling program. Ok, so how do you use the shebang? Take this hello world script for example. The shebang #! in this script will use /usr/bin/python3 . This is easy enough until you run across a system where the system Python is not the expected 3.8 or later. #!/usr/bin/python3 print ( \"Hello World!\" ) This is where env comes into play. env will search the $PATH for the executable that matches the argument. In this case, the script will be run by the first \"python3\" found in $PATH. However, what if python3 points to python3.6 ? You're in the same boat you were in before. #!/usr/bin/env python3 print ( \"Hello World!\" ) Or are you? If you read the env man page , it states you can add parameters to the command line. In case you didn't know, the shebang is the command line! env will modify the $PATH before searching for python3 , allowing you to use a custom python location. #!/usr/bin/env PATH=\"/opt/my-python/3.8/:$PATH\" python3 print ( \"Hello World!\" ) Wait! Isn't the shebang a shell script, not a Python script? In TRMM, a \"Shell\" script and a \"Python\" script are treated the same except that Python scripts also work on Windows. On Linux and macOS, \"Shell\" and \"Python\" scripts are treated the same. Script Type OS Supported Python Windows Yes Python Linux Yes Python macOS Yes Shell Windows No Shell Linux Yes Shell macOS Yes","title":"Python on posix"},{"location":"functions/scripting/#python-version-references","text":"Python 2 was sunset in January 2020. Python versions : Python 3.7 is end of life in June 2023. Debian releases including the end of life date. Python support in Debian to determine the Python version included in Debian. Ubuntu inherits from Debian ; see previous line. Ubuntu vs Debian OS versions ; to map Ubuntu version to Debian version to determine the Python version. Ubuntu Release Notes may contain the Python version included. macOS versions ; macOS version number mapped to the OS name. macOS release history ; includes supported/maintained/unsupported and last update date. OS Python version Installed by TRMM Windows 3.11 Yes Linux, Debian 10 (Buster) (end of life) 3.7 No Linux, Debian 11 (Bullseye) 3.9 No Linux, Debian 12 (Bookworm) 3.12 No Linux, Ubuntu 20.04 LTS 3.8 No Linux, Ubuntu 22.04 LTS 3.10 No macOS Ventura 3.8 No macOS Monterey 12.3 2.7 removed No macOS Catalina 10.15 2.7 (not recommended to use) No","title":"Python version references"},{"location":"functions/scripting/#targeting-a-specific-version","text":"Python compiles the script into bytecode and then executes it. Because of the compilation step, errors due to language constructs introduced in a later version of Python will cause the script to fail. For example, Python 3.10 introduced the \"match\" term as their version of a case or switch statement. #!/usr/bin/env python3 match \"term\" : case \"Nope\" : print ( \"No match found\" ) case \"term\" : print ( \"Found match!\" ) case _ : print ( \"Default if nothing matches\" ) The same code will work on Python 3.10. $ python3.10 test-python-version.py Found match! The same code fails on versions prior to 3.10. $ python3.6 test-python-version.py File \"test-python-version.py\" , line 3 match \"term\" : ^ SyntaxError: invalid syntax","title":"Targeting a specific version"},{"location":"functions/scripting/#nushell","text":"Nu is a new type of shell. Like PowerShell, Nu passes objects from one command to the next. For example, this script will list processes that are more than 100MB. ps | where mem >= 100MB There are some important points to keep in mind when writing Nu scripts. See the Thinking in Nu for details. Some highlights: The > is the greater-than operator, not redirection. Use | save some-file.txt Variables are immutable, or constant. Use mut to make a variable mutable. Currently Nu does not support background tasks. long-running-command & will not work. Nu has a Discord server if you have questions. To disable this feature, add the following to local_settings.py : INSTALL_NUSHELL = False","title":"Nushell"},{"location":"functions/scripting/#example-nushell-script","text":"The below script find processes sorted by greatest cpu utilization. ps | sort-by cpu | reverse","title":"Example Nushell Script"},{"location":"functions/scripting/#deno","text":"Deno is considered to be the next iteration of Node.js. Deno uses ECMAScript modules (a.k.a ES Modules or ESM) syntax, not CommonJS (CJS). I.e. use import * from https://example.com/package/module.ts instead of require('./local/file.js') . Tactical RMM runs Deno scripts with the following permissions: DENO_PERMISSIONS=--allow-all See the documentation on permissions for details. To override this, either: Add the DENO_DEFAULT_PERMISSIONS string variable with the permissions requested to local_settings.py or Set the DENO_PERMISSIONS environment variable to the permissions requested in your script. To disable this feature, add the following to local_settings.py : INSTALL_DENO = False","title":"Deno"},{"location":"functions/scripting/#example-deno-script","text":"The below script prints basic system information: async function gatherSystemInfo () { const os = Deno . build . os ; const arch = Deno . build . arch ; const memory = Deno . systemMemoryInfo (); const info = ` OS: ${ os } Architecture: ${ arch } Total Memory: ${ ( await memory ). total / 1024 / 1024 } MB Free Memory: ${ ( await memory ). free / 1024 / 1024 } MB ` ; console . log ( info ); } gatherSystemInfo (). catch ( console . error );","title":"Example Deno Script"},{"location":"functions/scripting/#example-scripts","text":"","title":"Example Scripts"},{"location":"functions/scripting/#example-powershell-script","text":"The below script takes five named values. The arguments will look like this: -SiteName {{site.name}} -ClientName {{client.name}} -PublicIP {{agent.public_ip}} -CustomField {{client.AV_KEY}} -Global {{global.API_KEY}} param ( [string] $SiteName , [string] $ClientName , [string] $PublicIp , [string] $CustomField , [string] $Global ) Write-Output \"Site: $SiteName\" Write-Output \"Client: $ClientName\" Write-Output \"Public IP: $PublicIp\" Write-Output \"Custom Fields: $CustomField\" Write-Output \"Global: $Global\"","title":"Example PowerShell Script"},{"location":"functions/scripting/#example-shell-script","text":"The below script prints the user running the script. #!/usr/bin/env bash whoami","title":"Example Shell Script"},{"location":"functions/settings_override/","text":"Overriding / Customizing Default Settings \u00b6 Admin User Browser Token Expiration and Idle Timeout Settings \u00b6 The browser token expiration for admin users determines how long a session remains active before requiring re-authentication. By default, the token expires after 5 hours of inactivity. You can customize this idle timeout to automatically log out admin users after a shorter or longer period, depending on your security policy. See this ticket for reference. To change it, add the following code block to the end of /rmm/api/tacticalrmm/tacticalrmm/local_settings.py from datetime import timedelta REST_KNOX = { \"TOKEN_TTL\" : timedelta ( days = 30 ), \"AUTO_REFRESH\" : True , \"MIN_REFRESH_INTERVAL\" : 600 , } Change (days=30) to whatever you prefer. Then run sudo systemctl restart rmm.service for changes to take effect. Using your own wildcard SSL cert \u00b6 Before Install \u00b6 Follow the instructions in the install guide for the --use-own-cert install flag. Existing Install \u00b6 Append the following two variables to /rmm/api/tacticalrmm/tacticalrmm/local_settings.py , replacing the paths with the actual locations of your certificate and private key. The certificate must include the full chain: CERT_FILE = \"/path/to/your/fullchain.pem\" KEY_FILE = \"/path/to/your/privkey.pem\" Ensure that both files are readable by the tactical Linux user: sudo chown tactical:tactical /path/to/your/fullchain.pem /path/to/your/privkey.pem sudo chmod 440 /path/to/your/fullchain.pem /path/to/your/privkey.pem Update all instances of ssl_certificate and ssl_certificate_key in the three Nginx configuration files located in /etc/nginx/sites-available to point to your certificate and private key paths. Restart the services: sudo systemctl restart nginx meshcentral rmm daphne Use NATS Standard instead of NATS websocket \u00b6 Prior to TRMM v0.14.0 (released 7/7/2022), agents NATS traffic connected to the TRMM server on public port 4222. If you have upgraded to v0.14.0 and have agents that won't work with websockets for some reason (too old TLS etc) then you can do the following to use NATS standard TCP on port 4222, just like how it was before v0.14.0: For Windows agents: Add the following registry string value (REG_SZ): HKEY_LOCAL_MACHINE\\SOFTWARE\\TacticalRMM\\NatsStandardPort with value 4222 Then restart the tacticalrmm Windows service. For Linux agents: Add the following key/value pair to /etc/tacticalagent : { \"natsstandardport\" : \"4222\" } Then sudo systemctl restart tacticalagent.service Just make sure port 4222 TCP is still open in your firewall and you're done. Configuring Custom Temp Dirs on Windows Agents \u00b6 Version added: Tactical RMM v0.15.10 Requires Agent v2.4.7 By default, the Windows agent utilizes the C:\\ProgramData\\TacticalRMM directory for executing scripts and managing agent updates. However, it is possible to override this default directory by setting two optional registry string values ( REG_SZ ), specifying full paths to the desired directories: HKEY_LOCAL_MACHINE\\SOFTWARE\\TacticalRMM\\WinTmpDir : This registry value is used for running scripts and handling agent updates. Provide the full path to the custom directory. HKEY_LOCAL_MACHINE\\SOFTWARE\\TacticalRMM\\WinRunAsUserTmpDir : This registry value is specifically for executing Run As User scripts. Provide the full path to the custom directory. Please note that these custom directories must already exist on the system, as the agent will not attempt to create them. Ensure that the desired directories are created and that the appropriate permissions are set before adding the registry values. Directory path cannot contain spaces, this is a known issue and will be fixed in a future release. To apply the changes, restart the tacticalrmm Windows service. The custom temporary directories will then be used for the respective tasks. Example: Monitor NATS via its HTTP API \u00b6 Version added: Tactical RMM v0.15.1 To enable NATS monitoring , add the folllowing to /rmm/api/tacticalrmm/tacticalrmm/local_settings.py (replace with whatever port you want). NATS_HTTP_PORT = 8222 Then from the TRMM Web UI, do Tools > Server Maintenance > Reload Nats Configuration . And then from your TRMM server cli restart both the rmm.service and nats.service services. Modify the Placeholder Text for the 'Send Command' Functionality \u00b6 Version added: Tactical RMM v0.15.12 Users now have the flexibility to customize the placeholder text that is displayed in the 'Send Command' dialog. This customization can be achieved by defining any or all of the following three optional variables in /rmm/api/tacticalrmm/tacticalrmm/local_settings.py file: CMD_PLACEHOLDER_TEXT = \"<Your customized command prompt text>\" POWERSHELL_PLACEHOLDER_TEXT = \"<Your customized PowerShell prompt text>\" SHELL_PLACEHOLDER_TEXT = \"<Your customized shell prompt text>\" To activate, restart the api with sudo systemctl restart rmm and then refresh the web interface. Define a root user to prevent changes from web UI \u00b6 To define a \"root\" user who cannot be modified via the web UI, add the following line to /rmm/api/tacticalrmm/tacticalrmm/local_settings.py ROOT_USER = \"username\" Replace \"username\" with the actual username. After making this change, run sudo systemctl restart rmm.service to apply the changes. Adjusting Agent Check-In Intervals \u00b6 The agent periodically communicates with the RMM server, sending various data about its status and environment at random intervals. These randomized intervals are designed to prevent the \"thundering herd\" problem, where too many agents would check in simultaneously, potentially overloading the server. You can modify these intervals by adding one or more of the following variables to /rmm/api/tacticalrmm/tacticalrmm/local_settings.py . Each variable is a Python tuple containing two values: the minimum and maximum interval times, specified in seconds. The agent will select a random interval within this range for each check-in. The default check-in intervals are as follows: CHECKIN_HELLO = ( 30 , 60 ) # Agent heartbeat (\"I'm alive\") CHECKIN_AGENTINFO = ( 200 , 400 ) # System info (logged-in user, boot time, RAM, etc.) CHECKIN_WINSVC = ( 2400 , 3000 ) # Windows services and their status CHECKIN_PUBIP = ( 300 , 500 ) # Agent's public IP address CHECKIN_DISKS = ( 1000 , 2000 ) # Disk information and usage CHECKIN_SW = ( 2800 , 3500 ) # Installed Windows software list CHECKIN_WMI = ( 3000 , 4000 ) # Asset details (as seen in the \"Assets\" tab) CHECKIN_SYNCMESH = ( 800 , 1200 ) # Agent's Mesh node ID By adjusting these intervals, you can control how frequently the agent checks in with the RMM server for different types of data. This flexibility allows for balancing between server load and the frequency of updates. After adding any of these settings, you must restart both the RMM service ( sudo systemctl restart rmm ) and the agent service. An easy way to restart the agent service is by using the \"Tools > Recover All Agents\" function in the TRMM web UI. Configuring Agent Check Jitter \u00b6 Version added: v1.0.0 To prevent the thundering herd problem, where multiple agents send their check results simultaneously and overwhelm the server, a random jitter has been introduced. By default, this jitter is a random delay between 1 and 60 seconds. To customize this behavior, add the following variable to /rmm/api/tacticalrmm/tacticalrmm/local_settings.py and adjust the values as needed, then restart the RMM service ( sudo systemctl restart rmm ): CHECK_INTERVAL_JITTER = ( 1 , 60 )","title":"Overriding / Customizing Default Settings"},{"location":"functions/settings_override/#overriding-customizing-default-settings","text":"","title":"Overriding / Customizing Default Settings"},{"location":"functions/settings_override/#admin-user-browser-token-expiration-and-idle-timeout-settings","text":"The browser token expiration for admin users determines how long a session remains active before requiring re-authentication. By default, the token expires after 5 hours of inactivity. You can customize this idle timeout to automatically log out admin users after a shorter or longer period, depending on your security policy. See this ticket for reference. To change it, add the following code block to the end of /rmm/api/tacticalrmm/tacticalrmm/local_settings.py from datetime import timedelta REST_KNOX = { \"TOKEN_TTL\" : timedelta ( days = 30 ), \"AUTO_REFRESH\" : True , \"MIN_REFRESH_INTERVAL\" : 600 , } Change (days=30) to whatever you prefer. Then run sudo systemctl restart rmm.service for changes to take effect.","title":"Admin User Browser Token Expiration and Idle Timeout Settings"},{"location":"functions/settings_override/#using-your-own-wildcard-ssl-cert","text":"","title":"Using your own wildcard SSL cert"},{"location":"functions/settings_override/#before-install","text":"Follow the instructions in the install guide for the --use-own-cert install flag.","title":"Before Install"},{"location":"functions/settings_override/#existing-install","text":"Append the following two variables to /rmm/api/tacticalrmm/tacticalrmm/local_settings.py , replacing the paths with the actual locations of your certificate and private key. The certificate must include the full chain: CERT_FILE = \"/path/to/your/fullchain.pem\" KEY_FILE = \"/path/to/your/privkey.pem\" Ensure that both files are readable by the tactical Linux user: sudo chown tactical:tactical /path/to/your/fullchain.pem /path/to/your/privkey.pem sudo chmod 440 /path/to/your/fullchain.pem /path/to/your/privkey.pem Update all instances of ssl_certificate and ssl_certificate_key in the three Nginx configuration files located in /etc/nginx/sites-available to point to your certificate and private key paths. Restart the services: sudo systemctl restart nginx meshcentral rmm daphne","title":"Existing Install"},{"location":"functions/settings_override/#use-nats-standard-instead-of-nats-websocket","text":"Prior to TRMM v0.14.0 (released 7/7/2022), agents NATS traffic connected to the TRMM server on public port 4222. If you have upgraded to v0.14.0 and have agents that won't work with websockets for some reason (too old TLS etc) then you can do the following to use NATS standard TCP on port 4222, just like how it was before v0.14.0: For Windows agents: Add the following registry string value (REG_SZ): HKEY_LOCAL_MACHINE\\SOFTWARE\\TacticalRMM\\NatsStandardPort with value 4222 Then restart the tacticalrmm Windows service. For Linux agents: Add the following key/value pair to /etc/tacticalagent : { \"natsstandardport\" : \"4222\" } Then sudo systemctl restart tacticalagent.service Just make sure port 4222 TCP is still open in your firewall and you're done.","title":"Use NATS Standard instead of NATS websocket"},{"location":"functions/settings_override/#configuring-custom-temp-dirs-on-windows-agents","text":"Version added: Tactical RMM v0.15.10 Requires Agent v2.4.7 By default, the Windows agent utilizes the C:\\ProgramData\\TacticalRMM directory for executing scripts and managing agent updates. However, it is possible to override this default directory by setting two optional registry string values ( REG_SZ ), specifying full paths to the desired directories: HKEY_LOCAL_MACHINE\\SOFTWARE\\TacticalRMM\\WinTmpDir : This registry value is used for running scripts and handling agent updates. Provide the full path to the custom directory. HKEY_LOCAL_MACHINE\\SOFTWARE\\TacticalRMM\\WinRunAsUserTmpDir : This registry value is specifically for executing Run As User scripts. Provide the full path to the custom directory. Please note that these custom directories must already exist on the system, as the agent will not attempt to create them. Ensure that the desired directories are created and that the appropriate permissions are set before adding the registry values. Directory path cannot contain spaces, this is a known issue and will be fixed in a future release. To apply the changes, restart the tacticalrmm Windows service. The custom temporary directories will then be used for the respective tasks. Example:","title":"Configuring Custom Temp Dirs on Windows Agents"},{"location":"functions/settings_override/#monitor-nats-via-its-http-api","text":"Version added: Tactical RMM v0.15.1 To enable NATS monitoring , add the folllowing to /rmm/api/tacticalrmm/tacticalrmm/local_settings.py (replace with whatever port you want). NATS_HTTP_PORT = 8222 Then from the TRMM Web UI, do Tools > Server Maintenance > Reload Nats Configuration . And then from your TRMM server cli restart both the rmm.service and nats.service services.","title":"Monitor NATS via its HTTP API"},{"location":"functions/settings_override/#modify-the-placeholder-text-for-the-send-command-functionality","text":"Version added: Tactical RMM v0.15.12 Users now have the flexibility to customize the placeholder text that is displayed in the 'Send Command' dialog. This customization can be achieved by defining any or all of the following three optional variables in /rmm/api/tacticalrmm/tacticalrmm/local_settings.py file: CMD_PLACEHOLDER_TEXT = \"<Your customized command prompt text>\" POWERSHELL_PLACEHOLDER_TEXT = \"<Your customized PowerShell prompt text>\" SHELL_PLACEHOLDER_TEXT = \"<Your customized shell prompt text>\" To activate, restart the api with sudo systemctl restart rmm and then refresh the web interface.","title":"Modify the Placeholder Text for the 'Send Command' Functionality"},{"location":"functions/settings_override/#define-a-root-user-to-prevent-changes-from-web-ui","text":"To define a \"root\" user who cannot be modified via the web UI, add the following line to /rmm/api/tacticalrmm/tacticalrmm/local_settings.py ROOT_USER = \"username\" Replace \"username\" with the actual username. After making this change, run sudo systemctl restart rmm.service to apply the changes.","title":"Define a root user to prevent changes from web UI"},{"location":"functions/settings_override/#adjusting-agent-check-in-intervals","text":"The agent periodically communicates with the RMM server, sending various data about its status and environment at random intervals. These randomized intervals are designed to prevent the \"thundering herd\" problem, where too many agents would check in simultaneously, potentially overloading the server. You can modify these intervals by adding one or more of the following variables to /rmm/api/tacticalrmm/tacticalrmm/local_settings.py . Each variable is a Python tuple containing two values: the minimum and maximum interval times, specified in seconds. The agent will select a random interval within this range for each check-in. The default check-in intervals are as follows: CHECKIN_HELLO = ( 30 , 60 ) # Agent heartbeat (\"I'm alive\") CHECKIN_AGENTINFO = ( 200 , 400 ) # System info (logged-in user, boot time, RAM, etc.) CHECKIN_WINSVC = ( 2400 , 3000 ) # Windows services and their status CHECKIN_PUBIP = ( 300 , 500 ) # Agent's public IP address CHECKIN_DISKS = ( 1000 , 2000 ) # Disk information and usage CHECKIN_SW = ( 2800 , 3500 ) # Installed Windows software list CHECKIN_WMI = ( 3000 , 4000 ) # Asset details (as seen in the \"Assets\" tab) CHECKIN_SYNCMESH = ( 800 , 1200 ) # Agent's Mesh node ID By adjusting these intervals, you can control how frequently the agent checks in with the RMM server for different types of data. This flexibility allows for balancing between server load and the frequency of updates. After adding any of these settings, you must restart both the RMM service ( sudo systemctl restart rmm ) and the agent service. An easy way to restart the agent service is by using the \"Tools > Recover All Agents\" function in the TRMM web UI.","title":"Adjusting Agent Check-In Intervals"},{"location":"functions/settings_override/#configuring-agent-check-jitter","text":"Version added: v1.0.0 To prevent the thundering herd problem, where multiple agents send their check results simultaneously and overwhelm the server, a random jitter has been introduced. By default, this jitter is a random delay between 1 and 60 seconds. To customize this behavior, add the following variable to /rmm/api/tacticalrmm/tacticalrmm/local_settings.py and adjust the values as needed, then restart the RMM service ( sudo systemctl restart rmm ): CHECK_INTERVAL_JITTER = ( 1 , 60 )","title":"Configuring Agent Check Jitter"},{"location":"functions/snmp_checks/","text":"SNMP Checks \u00b6 Version added: Tactical RMM v0.19.0 / Agent v2.8.0 Video Walkthru \u00b6 SNMP monitoring can now be done using the pysnmplib library included with the portable python distribution on windows agents. Here is a sample script (written by ChatGPT) that can be used to query and monitor a printer. It takes the printer's IP address as the first argument. #!/usr/bin/python3 import sys from pysnmp.hlapi import * if len ( sys . argv ) != 2 : print ( \"Missing required argument: snmp device IP address\" ) sys . exit ( 1 ) printer_ip = sys . argv [ 1 ] community_string = 'public' oids = { 'Printer Model' : '1.3.6.1.2.1.1.1.0' , 'Total Page Count' : '1.3.6.1.2.1.43.10.2.1.4.1.1' , 'Toner Level Black' : '1.3.6.1.2.1.43.11.1.1.9.1.1' , 'Toner Level Cyan' : '1.3.6.1.2.1.43.11.1.1.9.1.2' , 'Toner Level Magenta' : '1.3.6.1.2.1.43.11.1.1.9.1.3' , 'Toner Level Yellow' : '1.3.6.1.2.1.43.11.1.1.9.1.4' , 'Device Status' : '1.3.6.1.2.1.25.3.2.1.5.1' , 'Serial Number' : '1.3.6.1.2.1.43.5.1.1.17.1' , } for name , oid in oids . items (): iterator = getCmd ( SnmpEngine (), CommunityData ( community_string , mpModel = 0 ), UdpTransportTarget (( printer_ip , 161 )), ContextData (), ObjectType ( ObjectIdentity ( oid )) ) errorIndication , errorStatus , errorIndex , varBinds = next ( iterator ) if errorIndication : print ( f \"Error: { errorIndication } \" ) elif errorStatus : print ( f 'Error: { errorStatus . prettyPrint () } at { errorIndex and varBinds [ int ( errorIndex ) - 1 ] or \"?\" } ' ) else : for varBind in varBinds : print ( f ' { name } : { varBind [ 1 ] } ' )","title":"SNMP Checks"},{"location":"functions/snmp_checks/#snmp-checks","text":"Version added: Tactical RMM v0.19.0 / Agent v2.8.0","title":"SNMP Checks"},{"location":"functions/snmp_checks/#video-walkthru","text":"SNMP monitoring can now be done using the pysnmplib library included with the portable python distribution on windows agents. Here is a sample script (written by ChatGPT) that can be used to query and monitor a printer. It takes the printer's IP address as the first argument. #!/usr/bin/python3 import sys from pysnmp.hlapi import * if len ( sys . argv ) != 2 : print ( \"Missing required argument: snmp device IP address\" ) sys . exit ( 1 ) printer_ip = sys . argv [ 1 ] community_string = 'public' oids = { 'Printer Model' : '1.3.6.1.2.1.1.1.0' , 'Total Page Count' : '1.3.6.1.2.1.43.10.2.1.4.1.1' , 'Toner Level Black' : '1.3.6.1.2.1.43.11.1.1.9.1.1' , 'Toner Level Cyan' : '1.3.6.1.2.1.43.11.1.1.9.1.2' , 'Toner Level Magenta' : '1.3.6.1.2.1.43.11.1.1.9.1.3' , 'Toner Level Yellow' : '1.3.6.1.2.1.43.11.1.1.9.1.4' , 'Device Status' : '1.3.6.1.2.1.25.3.2.1.5.1' , 'Serial Number' : '1.3.6.1.2.1.43.5.1.1.17.1' , } for name , oid in oids . items (): iterator = getCmd ( SnmpEngine (), CommunityData ( community_string , mpModel = 0 ), UdpTransportTarget (( printer_ip , 161 )), ContextData (), ObjectType ( ObjectIdentity ( oid )) ) errorIndication , errorStatus , errorIndex , varBinds = next ( iterator ) if errorIndication : print ( f \"Error: { errorIndication } \" ) elif errorStatus : print ( f 'Error: { errorStatus . prettyPrint () } at { errorIndex and varBinds [ int ( errorIndex ) - 1 ] or \"?\" } ' ) else : for varBind in varBinds : print ( f ' { name } : { varBind [ 1 ] } ' )","title":"Video Walkthru"},{"location":"functions/url_actions/","text":"URL Actions \u00b6 URL Actions will run against an agent and open a configured URL in a new browser tab or window. This allows for integrations with various remote viewing softwares. Adding URL Actions \u00b6 In the dashboard, browse to Settings > Global Settings > URL Actions . The available options are: Name - This identifies the URL Action in other parts of the dashboard Description - Optional description for the URL Action Pattern - This is the actual URL pattern that will open in the new browser tab/window. This field supports variables from the Global Keystore and Script Variables . URL Pattern Example \u00b6 Info Variable names are case sensitive ! https://remote.example.com/connect?API_KEY={{global.API_KEY}}&agent_id={{agent.Remote ID}} The above example uses a value defined in the global keystore named API_KEY and an Agent custom field called remote id . The URLs are properly encoded to work with any special characters or spaces returned in the values. Running URL Actions \u00b6 In the agent table, right-click on the Agent and select Run URL Action and select the action to run. You can also create a shortcut for this by setting the default double-click action to open a URL action: Click on your username in the top right of the web UI > Preferences , then select Run URL Action and then select the URL action: The URL action will now run when you double click on a row in the Agent table in the dashboard.","title":"URL Actions"},{"location":"functions/url_actions/#url-actions","text":"URL Actions will run against an agent and open a configured URL in a new browser tab or window. This allows for integrations with various remote viewing softwares.","title":"URL Actions"},{"location":"functions/url_actions/#adding-url-actions","text":"In the dashboard, browse to Settings > Global Settings > URL Actions . The available options are: Name - This identifies the URL Action in other parts of the dashboard Description - Optional description for the URL Action Pattern - This is the actual URL pattern that will open in the new browser tab/window. This field supports variables from the Global Keystore and Script Variables .","title":"Adding URL Actions"},{"location":"functions/url_actions/#url-pattern-example","text":"Info Variable names are case sensitive ! https://remote.example.com/connect?API_KEY={{global.API_KEY}}&agent_id={{agent.Remote ID}} The above example uses a value defined in the global keystore named API_KEY and an Agent custom field called remote id . The URLs are properly encoded to work with any special characters or spaces returned in the values.","title":"URL Pattern Example"},{"location":"functions/url_actions/#running-url-actions","text":"In the agent table, right-click on the Agent and select Run URL Action and select the action to run. You can also create a shortcut for this by setting the default double-click action to open a URL action: Click on your username in the top right of the web UI > Preferences , then select Run URL Action and then select the URL action: The URL action will now run when you double click on a row in the Agent table in the dashboard.","title":"Running URL Actions"},{"location":"functions/user_ui/","text":"User Interface Preferences \u00b6 Click on your username at the top right of the dashboard > Preferences:","title":"User Interface Preferences"},{"location":"functions/user_ui/#user-interface-preferences","text":"Click on your username at the top right of the dashboard > Preferences:","title":"User Interface Preferences"},{"location":"functions/web_terminal/","text":"Web Terminal \u00b6 Video Walkthru \u00b6","title":"Web Terminal"},{"location":"functions/web_terminal/#web-terminal","text":"","title":"Web Terminal"},{"location":"functions/web_terminal/#video-walkthru","text":"","title":"Video Walkthru"},{"location":"functions/webhooks/","text":"Video Walkthru \u00b6 To apply and run on Agent overdue and Check/Task failures use Alert Templates Name : Name Description : for notes about webhook. URL Pattern : For webhooks, you need a URL where the Tactical RMM can send HTTP requests when an event occurs. This URL should be a server endpoint configured to accept HTTP requests. Request Headers \u00b6 Request headers allow the server to learn more about the request context. Here are some common headers used in webhook configurations: Content-Type: Describes the nature of the data being sent. For JSON data, you use application/json. Authorization: If your endpoint requires authentication, you might use a token or other credentials in this header. User-Agent: Identifies the application making the request. { \"Content-Type\" : \"application/json\" } Request Body \u00b6 The request body must contain valid JSON and can include anything you want. Here are some examples: Discord JSON Microsoft Teams (Basic) Microsoft Teams (Advanced) Slack Ticketing System Discord: Edit a channel > Integrations > Webhooks { \"content\" : \"Agent hasn't checked in for {{agent.overdue_time}} minutes.\" , \"username\" : \"{{agent.hostname}}\" , \"avatar_url\" : \"https://cdn3.emoji.gg/emojis/PogChamp.png\" , \"embeds\" : [ { \"title\" : \"Agent {{agent.hostname}} Client: {{agent.site.client.name}}\" , \"description\" : \"This is an embed\" , \"color\" : 15258703 , \"fields\" : [ { \"name\" : \"Field1\" , \"value\" : \"Some value\" , \"inline\" : true }, { \"name\" : \"Field2\" , \"value\" : \"Another value\" , \"inline\" : true } ] } ] } Simple JSON { \"text\" : \"{{agent.hostname}}: {{alert.message}}\" } Teams Microsoft Teams uses Office 365 Connectors for its incoming webhooks. The format for Teams is slightly more complex, allowing for potentially richer content. { \"@type\" : \"MessageCard\" , \"@context\" : \"http://schema.org/extensions\" , \"summary\" : \"Issue 176715375\" , \"themeColor\" : \"0078D7\" , \"title\" : \"Issue opened: \\\"Push notifications not working\\\"\" , \"sections\" : [{ \"activityTitle\" : \"Mona Lisa\" , \"activitySubtitle\" : \"On Project XYZ\" , \"activityImage\" : \"https://teamsnodesample.azurewebsites.net/static/img/image5.png\" , \"facts\" : [{ \"name\" : \"Assigned to\" , \"value\" : \"Unassigned\" }, { \"name\" : \"Due date\" , \"value\" : \"2016-08-29T04:31:32.993Z\" }], \"markdown\" : true }] } Teams Microsoft Teams uses Office 365 Connectors for its incoming webhooks. The format for Teams is slightly more complex, allowing for potentially richer content. { \"type\" : \"message\" , \"attachments\" : [ { \"contentType\" : \"application/vnd.microsoft.card.adaptive\" , \"contentUrl\" : null , \"content\" : { \"$schema\" : \"https://adaptivecards.io/schemas/adaptive-card.json\" , \"type\" : \"AdaptiveCard\" , \"version\" : \"1.2\" , \"msteams\" : { \"width\" : \"Full\" }, \"body\" : [ { \"type\" : \"ColumnSet\" , \"columns\" : [ { \"type\" : \"Column\" , \"items\" : [ { \"type\" : \"Image\" , \"style\" : \"person\" , \"url\" : \"https://amidaware.com/images/amidaware.jpg\" , \"altText\" : \"TacticalRMM\" , \"size\" : \"small\" } ], \"width\" : \"auto\" }, { \"type\" : \"Column\" , \"items\" : [ { \"type\" : \"TextBlock\" , \"weight\" : \"bolder\" , \"text\" : \"TacticalRMM\" , \"wrap\" : true , \"size\" : \"heading\" }, { \"type\" : \"TextBlock\" , \"spacing\" : \"none\" , \"text\" : \"Created date here\" , \"isSubtle\" : true , \"wrap\" : true } ], \"width\" : \"stretch\" } ] }, { \"type\" : \"ColumnSet\" , \"isVisible\" : true , \"columns\" : [ { \"type\" : \"Column\" , \"isVisible\" : true , \"items\" : [ { \"type\" : \"RichTextBlock\" , \"inlines\" : [ { \"type\" : \"TextRun\" , \"text\" : \"first column more text\" , \"wrap\" : true , \"color\" : \"default\" , \"weight\" : \"bolder\" } ] } ] }, { \"type\" : \"Column\" , \"isVisible\" : true , \"items\" : [ { \"type\" : \"RichTextBlock\" , \"inlines\" : [ { \"type\" : \"TextRun\" , \"text\" : \"Second column\" , \"wrap\" : true }, { \"type\" : \"TextRun\" , \"text\" : \"second column more text\" , \"wrap\" : true , \"color\" : \"default\" , \"weight\" : \"bolder\" } ] } ] } ] }, { \"type\" : \"ColumnSet\" , \"columns\" : [ { \"type\" : \"Column\" , \"width\" : \"stretch\" , \"style\" : \"emphasis\" , \"minHeight\" : \"40px\" , \"items\" : [ { \"type\" : \"TextBlock\" , \"text\" : \"The minimal message!\" , \"wrap\" : true } ] }, { \"type\" : \"Column\" , \"width\" : \"auto\" , \"verticalContentAlignment\" : \"center\" , \"isVisible\" : false , \"items\" : [ { \"type\" : \"ActionSet\" , \"isVisible\" : false , \"actions\" : [] }, { \"type\" : \"ActionSet\" , \"isVisible\" : false , \"actions\" : [] } ] } ] } ] } } ] } Slack You can also send more complex messages with attachments, buttons, etc., by using Slack\u2019s rich messaging format. { \"text\" : \"Hello, world! This is a line of text.\\nAnd this is another one.\" } Zammad See above for how to open a ticket in Zammad with a webhook alert. Testing webhooks \u00b6 Use the test button to make sure your webhook is working. Note: {{alert.XXX}} variables will NOT be available in testing mode.","title":"Web Hooks"},{"location":"functions/webhooks/#video-walkthru","text":"To apply and run on Agent overdue and Check/Task failures use Alert Templates Name : Name Description : for notes about webhook. URL Pattern : For webhooks, you need a URL where the Tactical RMM can send HTTP requests when an event occurs. This URL should be a server endpoint configured to accept HTTP requests.","title":"Video Walkthru"},{"location":"functions/webhooks/#request-headers","text":"Request headers allow the server to learn more about the request context. Here are some common headers used in webhook configurations: Content-Type: Describes the nature of the data being sent. For JSON data, you use application/json. Authorization: If your endpoint requires authentication, you might use a token or other credentials in this header. User-Agent: Identifies the application making the request. { \"Content-Type\" : \"application/json\" }","title":"Request Headers"},{"location":"functions/webhooks/#request-body","text":"The request body must contain valid JSON and can include anything you want. Here are some examples: Discord JSON Microsoft Teams (Basic) Microsoft Teams (Advanced) Slack Ticketing System Discord: Edit a channel > Integrations > Webhooks { \"content\" : \"Agent hasn't checked in for {{agent.overdue_time}} minutes.\" , \"username\" : \"{{agent.hostname}}\" , \"avatar_url\" : \"https://cdn3.emoji.gg/emojis/PogChamp.png\" , \"embeds\" : [ { \"title\" : \"Agent {{agent.hostname}} Client: {{agent.site.client.name}}\" , \"description\" : \"This is an embed\" , \"color\" : 15258703 , \"fields\" : [ { \"name\" : \"Field1\" , \"value\" : \"Some value\" , \"inline\" : true }, { \"name\" : \"Field2\" , \"value\" : \"Another value\" , \"inline\" : true } ] } ] } Simple JSON { \"text\" : \"{{agent.hostname}}: {{alert.message}}\" } Teams Microsoft Teams uses Office 365 Connectors for its incoming webhooks. The format for Teams is slightly more complex, allowing for potentially richer content. { \"@type\" : \"MessageCard\" , \"@context\" : \"http://schema.org/extensions\" , \"summary\" : \"Issue 176715375\" , \"themeColor\" : \"0078D7\" , \"title\" : \"Issue opened: \\\"Push notifications not working\\\"\" , \"sections\" : [{ \"activityTitle\" : \"Mona Lisa\" , \"activitySubtitle\" : \"On Project XYZ\" , \"activityImage\" : \"https://teamsnodesample.azurewebsites.net/static/img/image5.png\" , \"facts\" : [{ \"name\" : \"Assigned to\" , \"value\" : \"Unassigned\" }, { \"name\" : \"Due date\" , \"value\" : \"2016-08-29T04:31:32.993Z\" }], \"markdown\" : true }] } Teams Microsoft Teams uses Office 365 Connectors for its incoming webhooks. The format for Teams is slightly more complex, allowing for potentially richer content. { \"type\" : \"message\" , \"attachments\" : [ { \"contentType\" : \"application/vnd.microsoft.card.adaptive\" , \"contentUrl\" : null , \"content\" : { \"$schema\" : \"https://adaptivecards.io/schemas/adaptive-card.json\" , \"type\" : \"AdaptiveCard\" , \"version\" : \"1.2\" , \"msteams\" : { \"width\" : \"Full\" }, \"body\" : [ { \"type\" : \"ColumnSet\" , \"columns\" : [ { \"type\" : \"Column\" , \"items\" : [ { \"type\" : \"Image\" , \"style\" : \"person\" , \"url\" : \"https://amidaware.com/images/amidaware.jpg\" , \"altText\" : \"TacticalRMM\" , \"size\" : \"small\" } ], \"width\" : \"auto\" }, { \"type\" : \"Column\" , \"items\" : [ { \"type\" : \"TextBlock\" , \"weight\" : \"bolder\" , \"text\" : \"TacticalRMM\" , \"wrap\" : true , \"size\" : \"heading\" }, { \"type\" : \"TextBlock\" , \"spacing\" : \"none\" , \"text\" : \"Created date here\" , \"isSubtle\" : true , \"wrap\" : true } ], \"width\" : \"stretch\" } ] }, { \"type\" : \"ColumnSet\" , \"isVisible\" : true , \"columns\" : [ { \"type\" : \"Column\" , \"isVisible\" : true , \"items\" : [ { \"type\" : \"RichTextBlock\" , \"inlines\" : [ { \"type\" : \"TextRun\" , \"text\" : \"first column more text\" , \"wrap\" : true , \"color\" : \"default\" , \"weight\" : \"bolder\" } ] } ] }, { \"type\" : \"Column\" , \"isVisible\" : true , \"items\" : [ { \"type\" : \"RichTextBlock\" , \"inlines\" : [ { \"type\" : \"TextRun\" , \"text\" : \"Second column\" , \"wrap\" : true }, { \"type\" : \"TextRun\" , \"text\" : \"second column more text\" , \"wrap\" : true , \"color\" : \"default\" , \"weight\" : \"bolder\" } ] } ] } ] }, { \"type\" : \"ColumnSet\" , \"columns\" : [ { \"type\" : \"Column\" , \"width\" : \"stretch\" , \"style\" : \"emphasis\" , \"minHeight\" : \"40px\" , \"items\" : [ { \"type\" : \"TextBlock\" , \"text\" : \"The minimal message!\" , \"wrap\" : true } ] }, { \"type\" : \"Column\" , \"width\" : \"auto\" , \"verticalContentAlignment\" : \"center\" , \"isVisible\" : false , \"items\" : [ { \"type\" : \"ActionSet\" , \"isVisible\" : false , \"actions\" : [] }, { \"type\" : \"ActionSet\" , \"isVisible\" : false , \"actions\" : [] } ] } ] } ] } } ] } Slack You can also send more complex messages with attachments, buttons, etc., by using Slack\u2019s rich messaging format. { \"text\" : \"Hello, world! This is a line of text.\\nAnd this is another one.\" } Zammad See above for how to open a ticket in Zammad with a webhook alert.","title":"Request Body"},{"location":"functions/webhooks/#testing-webhooks","text":"Use the test button to make sure your webhook is working. Note: {{alert.XXX}} variables will NOT be available in testing mode.","title":"Testing webhooks"}]}